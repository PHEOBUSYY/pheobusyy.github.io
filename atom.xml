<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pheobusyy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pheobusyy.github.io/"/>
  <updated>2017-03-06T13:25:49.000Z</updated>
  <id>http://pheobusyy.github.io/</id>
  
  <author>
    <name>yanyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;如何高效学习&gt;读书笔记</title>
    <link href="http://pheobusyy.github.io/2017/03/06/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://pheobusyy.github.io/2017/03/06/2017/读书笔记/如何高效学习-读书笔记/</id>
    <published>2017-03-06T13:14:00.000Z</published>
    <updated>2017-03-06T13:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>  书中提出了整体性学习的概念,就是通过把信息分类然后运用类比,内在化,记忆技巧等方式来学习各种知识的方法.<br>  里面的最重要的三个概念,分别是 <em>结构</em> <em>模型</em> <em>高速公路</em> .</p>
<ul>
<li>结构 类比城市,是一类知识的总称,比如整个java或者整个编程体系知识都可以比作一个城市.</li>
<li>模型 类比城市快速索引,是一类概念的高端抽象统称</li>
<li><p>高速公路 类比知识之间的关联,通过不同领域的领域的知识互相关联来增加记忆和运用的效率</p>
<p>把信息又分为5类,分别对应 <em>随意信息</em>, <em>抽象信息</em> , <em>具体信息</em> ,<em>观点信息</em> , <em>过程信息</em> .</p>
<p>整体性学习的顺序,分别是 <em>获取阶段</em> <em>理解阶段</em> <em>拓展阶段</em> <em>纠错阶段</em> <em>应用阶段</em> <em>测试阶段</em> .</p>
<a id="more"></a>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  书中提出了整体性学习的概念,就是通过把信息分类然后运用类比,内在化,记忆技巧等方式来学习各种知识的方法.&lt;br&gt;  里面的最重要的三个概念,分别是 &lt;em&gt;结构&lt;/em&gt; &lt;em&gt;模型&lt;/em&gt; &lt;em&gt;高速公路&lt;/em&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构 类比城市,是一类知识的总称,比如整个java或者整个编程体系知识都可以比作一个城市.&lt;/li&gt;
&lt;li&gt;模型 类比城市快速索引,是一类概念的高端抽象统称&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高速公路 类比知识之间的关联,通过不同领域的领域的知识互相关联来增加记忆和运用的效率&lt;/p&gt;
&lt;p&gt;把信息又分为5类,分别对应 &lt;em&gt;随意信息&lt;/em&gt;, &lt;em&gt;抽象信息&lt;/em&gt; , &lt;em&gt;具体信息&lt;/em&gt; ,&lt;em&gt;观点信息&lt;/em&gt; , &lt;em&gt;过程信息&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;整体性学习的顺序,分别是 &lt;em&gt;获取阶段&lt;/em&gt; &lt;em&gt;理解阶段&lt;/em&gt; &lt;em&gt;拓展阶段&lt;/em&gt; &lt;em&gt;纠错阶段&lt;/em&gt; &lt;em&gt;应用阶段&lt;/em&gt; &lt;em&gt;测试阶段&lt;/em&gt; .&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;如何阅读一本书&gt;</title>
    <link href="http://pheobusyy.github.io/2017/03/02/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017-03-02-%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://pheobusyy.github.io/2017/03/02/2017/读书笔记/2017-03-02-如何阅读一本书/</id>
    <published>2017-03-02T07:18:00.000Z</published>
    <updated>2017-03-02T07:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>书中把阅读分为4个层次,基础阅读,检视阅读,分析阅读,主题阅读.不同书要根据不同的阅读层次来阅读.依次讲解了每个层次对应的阅读方式.</p>
<p>其中最重要的要点就是主动阅读也就是带着问题去阅读.基础阅读就是普通的阅读方式,只要认字就可以的阅读,适用于小学.检视阅读主要对应速度和略读,快速的读完一本书,并对书中要说的重点和基础框架有个整体的认知.分析阅读是从内到外的阅读.从词,句,段落中找出作者的主旨.最后是主题阅读通过对一些列书的阅读对某一个主题来形成整体认知.</p>
<p>下面是书中的一些摘要:</p>
<blockquote>
<p>阅读的目标:为获得咨询而读,以及为了求得理解而读.<br>阅读艺术定义:这是一个凭借头脑运作,除了玩味读物中的一些字句之外,不假任何外助,以一己之力提升自我的过程.<br>如果第一层次的阅读所问的问题是:”这个句子在说什么?”那么在这个层次要问的典型问题就是:”这本书在谈什么?”这是个表象的问题.还有些类似的问题是:”这本书的架构如何?”后是:”这本书包含哪些部分?”</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书中把阅读分为4个层次,基础阅读,检视阅读,分析阅读,主题阅读.不同书要根据不同的阅读层次来阅读.依次讲解了每个层次对应的阅读方式.&lt;/p&gt;
&lt;p&gt;其中最重要的要点就是主动阅读也就是带着问题去阅读.基础阅读就是普通的阅读方式,只要认字就可以的阅读,适用于小学.检视阅读主要对
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://pheobusyy.github.io/2017/02/25/hello-world/"/>
    <id>http://pheobusyy.github.io/2017/02/25/hello-world/</id>
    <published>2017-02-25T04:06:55.000Z</published>
    <updated>2017-02-25T04:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android binder与AIDL</title>
    <link href="http://pheobusyy.github.io/2017/02/21/2017/android%20binder%E4%B8%8Eaidl/"/>
    <id>http://pheobusyy.github.io/2017/02/21/2017/android binder与aidl/</id>
    <published>2017-02-21T07:59:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-binder与AIDL"><a href="#android-binder与AIDL" class="headerlink" title="android binder与AIDL"></a>android binder与AIDL</h2><p>  最近重新研究了一下Activity启动流程,里面主要提到了ActivityManagerService这个类来管理Activity的生命周期,而如何和这个类通讯成为了理解Activity启动流程的关键,而实现与ActivityManagerService通讯的基础就是今天要讲到的Binder知识.</p>
<p>  我们知道你通过Luncher点击app图标来启动响应的app的时候,实际上就是相当于在Luncher这个app中取启动另一个app,也就是两个app的通讯,并且这两个app分属于不同的 <em>线程</em> ,在android两个不同线程的通讯有个统一的说法叫做 <em>IPC(inter-process connection)</em> .我们可以想象一下如果你要让两个陌生人之间互相认识,是不是需要一个中间人,那么在这里的进程就好比两个陌生人,而中间人就是我们这里的IPC,binder机制是IPC的一种实现方式.</p>
<a id="more"></a>
<h2 id="binder机制相比于其他IPC方式的优点"><a href="#binder机制相比于其他IPC方式的优点" class="headerlink" title="binder机制相比于其他IPC方式的优点"></a>binder机制相比于其他IPC方式的优点</h2><p>  在linux的原有IPC主要有下面几种:</p>
<ul>
<li>System V IPC (消息队列/信号量/共享内存)</li>
<li>管道 / FIFO</li>
<li>SOCKET</li>
<li><p>读,写锁定文件</p>
<p>在手机系统中,我们如果要使两个进程来通讯,要考虑的因素的主要有:</p>
</li>
<li>性能</li>
<li>稳定性</li>
<li><p>安全</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-ipc/" target="_blank" rel="external">点我查看Linux IPC</a></p>
<p>可以这样理解,如果两个进程直接通讯的时候需要消耗大量的内存和电量,那手机是肯定无法支撑的.同时如果其中一个进程发生问题,对另一个进程造成了影响的话这也是不合理的.最后,如果没有一种安全机制来对非法进程进行检查的话,容易发生信息泄漏等安全问题.</p>
<p>上面提到的这几种IPC方式都或多或少的无法满足移动手机上的IPC要求,比如System V IPC,管道,SOCKET都需要对数据做两次拷贝,先拷贝到内存,然后再逐次的写入或者读出,而共享内存和文件读写的话虽然不需要数据拷贝,但是需要上层的进程完成同步控制,手段比较复杂.另外就是在安全性上他们都无法有效的识别出发送方和接收方的有效身份.基于上面提到的几点,android就提出了使用Binder这种新的IPC方式来满足我们的需求.</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>IPC方式</th>
<th>数据拷贝次数</th>
</tr>
</thead>
<tbody>
<tr>
<td>  共享内存</td>
<td>0</td>
</tr>
<tr>
<td>  Binder</td>
<td>1</td>
</tr>
<tr>
<td>  System V IPC/SOCKET/读,写锁定文件</td>
<td>2</td>
</tr>
</tbody>
</table>
<h2 id="binder的核心原理"><a href="#binder的核心原理" class="headerlink" title="binder的核心原理"></a>binder的核心原理</h2><p><img src="/images/2017/02/android binder结构图.gif" alt="android binder结构"></p>
<h3 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h3><p>  linux中的应用都是运行在自己独立的空间中,这个空间称为用户空间,一般来说指的就是应用运行所在的进程.之所以要这样做的目的就是为了保证每个应用的独立性,应用之间互不干扰,相互隔离.不过总会有应用需要用到系统中公共的资源,或者请求调用一些系统的功能,这个时候在linux唯一的实现方式就是 <em>系统调用</em> .通过 <em>系统调用</em> 这个唯一的接口,应用在内核的监控下执行,这种情况下我们就说应用处于 <em>内核态</em> .在linux系统中主要采用了0和3这两个特权级对应用户态和内核态.<br>  其中内核态对应0,代表最高的执行权限,这个时候可以操作系统的高权限操作.而用户态对应3,代表最低的用户权限,这个时候只能执行应用内部的代码.</p>
<h3 id="内核模块和驱动"><a href="#内核模块和驱动" class="headerlink" title="内核模块和驱动"></a>内核模块和驱动</h3><p>  想象一下两个独立的应用程序(进程)想要相互通信该如何实现呢?还是上面提到的两个陌生人要认识对方最好的方式就是找个中间人,那么在linux我们可以想到可以把内核作为这个中间人.我们让内核帮我们找到对方,然后调用对方的方法就完成了一次通讯.那么前面提到了:在linux中本来是没有binder这种IPC方式的,如何让linux的内核支持binder呢?我们可以通过动态可加载内核模块(LKM:Loadable Kernel Moudle)这种方式来实现.模块是具有独立的功能,可以被单独编译但是不能直接运行.它在运行时被链接到内核中,作为内核中的一部分.这样,android通过添加一个内核模块来实现binder的相关功能.也就是我们上图中的 <em>binder驱动</em> 来帮助我们实现binder这种IPC方式.</p>
<h3 id="4个角色"><a href="#4个角色" class="headerlink" title="4个角色"></a>4个角色</h3><p>  根据上面的图片我们介绍一下binder中的4个重要角色:</p>
<ol>
<li>client</li>
<li>server</li>
<li>serverManager</li>
<li><p>binder驱动</p>
<p>在binder中,通过定义client和server来明确请求的发送方和接收方.而serviceManager对应是的一个管理者的角色.首先在系统启动的时候server把自己注册到serverManager中,然后每当client请求相关的服务的时候,首先是到ServiceManager中查找对应的server,这个时候并不会把server对象直接返回给client,而是会返回一个server对象的代理对象,这个代理对象并不是真正的server.当client拿到代理对象之后,就可以像真正获取到了server,调用server的方法了,而代理对象又会通过binder驱动去调用真正的server,完成真正的调用.</p>
</li>
</ol>
<p><img src="/images/2017/02/android binder调用关系图.jpg" alt="  android binder调用关系"></p>
<p>  通过上图可以看到4个角色之间的调用关系.</p>
<h3 id="binder通讯模型-binder中4个角色-通过打电话的例子来类比"><a href="#binder通讯模型-binder中4个角色-通过打电话的例子来类比" class="headerlink" title="binder通讯模型(binder中4个角色,通过打电话的例子来类比)"></a>binder通讯模型(binder中4个角色,通过打电话的例子来类比)</h3><p>  我们可以通过一个打电话的例子来说明binder的通讯模型,假设A要给B打电话,那么这里A对应client,B对应server,首先A不知道B的手机号码是什么,需要先去通讯录去查B的电话号码,这里的通讯录对应ServerManager,ServerManager里面有想要服务的对象,当知道B的电话号码后开始拨号,通过基站来把信号传递给B的手机,这里的基站对应Binder驱动.可能唯一的不适合的地方就是在系统中binder驱动只有一份,serverManager也只有一份.</p>
<h3 id="binder驱动中的对象"><a href="#binder驱动中的对象" class="headerlink" title="binder驱动中的对象"></a>binder驱动中的对象</h3><p>  在binder驱动中,有三个对象定义,分别为binder_proc,binder_node,binder_ref.其中binder_proc保存的是进程中的上下文信息,每一个应用空间都有一个binder_proc信息.binder_node叫做binder实体信息,保存的是server在binder驱动中的体现,也就是对应的server的内存地址,这里可以理解成server对象的 <em>指针</em> .binder_ref对应上面讲到的Binder代理对象,client实际上获取到的就是这个代理对象.一个binder_node对应多个binder_ref,因为可以多个代理对象来代理真正的binder_node对象.其中binder_ref到binder_node转换就是binder驱动的核心实现了.这里就不展开了.</p>
<p>  如果对binder驱动内部实现感兴趣可以看 <a href="http://wangkuiwu.github.io/2014/09/01/Binder-Introduce/" target="_blank" rel="external">这里</a></p>
<h2 id="aidl实例"><a href="#aidl实例" class="headerlink" title="aidl实例"></a>aidl实例</h2><p>  我们知道,android提供了aidl的方式来完成IPC,实际上aidl就是一个binder具体实现了,我们通过讲解一个demo来说明如何使用aidl,也帮助我们理解binder在android中的具体实现.</p>
<p>  我们最终要实现的效果是在手机会安装好两个app,在其中client的app中点击后可以获取到server的app中的数据,表明我们的aidl调用成功.</p>
<p>  首先,在AS中创建一个新的工程,里面包含了两个模块,一个代表server,一个代表client,在server中创建两个java 对象,一个叫book,一个叫user.</p>
<p>  <img src="/images/2017/02/android aidl目录结构.png" alt="android aidl目录结构"></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(bookId);</div><div class="line">        dest.writeString(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(source);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(Parcel parcel)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = parcel.readInt();</div><div class="line">        <span class="keyword">this</span>.name = parcel.readString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> bookId, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(bookId);</div><div class="line">        dest.writeString(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(source);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(Parcel parcel)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = parcel.readInt();</div><div class="line">        <span class="keyword">this</span>.name = parcel.readString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这两个对象可以自由发挥,只要满足都是实现的 <em>Parcelable</em> 序列化接口就可以.<br>  之后我们开始创建aidl文件,右键新建选择AIDL类型,AS会自动帮我们创建好aidl文件夹并新建好aidl文件.这里写创建三个aidl文件,分别book.aidl,user.aidl,IMyAidlInterface.aidl :</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yonyou.com.testbinderipc;</div><div class="line">parcelable Book;</div></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yonyou.com.testbinderipc;</div><div class="line">parcelable User;</div></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yonyou.com.testbinderipc;</div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"><span class="keyword">import</span> yonyou.com.testbinderipc.Book;</div><div class="line"><span class="keyword">import</span> yonyou.com.testbinderipc.User;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyAidlInterface</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  注意:千万不要忘了在IMyAidlInterface.aidl中使用对象的时候显示声明import相应的对象,因为aidl只会自动导入基础数据类型和List.</p>
<p>  这里在IMyAidlInterface中定义两个方法对应我们server具有的行为.注意到这里的addBook中的参数 <em>in</em> 表明是一种输入类型,还有两个分别兑现 <em>out</em> 和 <em>inout</em> .</p>
<p>  aidl写好之后,我们需要一个service类来用来给其他的app调用.<br>  新建一个android 的service,TestAidlService:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAidlService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Nullable</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> stub;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">private</span> IMyAidlInterface.Stub stub = <span class="keyword">new</span> IMyAidlInterface.Stub() &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book, String a , String b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">          Log.e(<span class="string">"yy"</span>, <span class="string">"addBook: book = "</span> + book.name);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">          <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"yy"</span>));</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  内部代码非常简单,这里你可能会问,这个 <em>IMyAidlInterface.Stub</em> 是哪里来的呢?当我们在完成了aidl文件之后,编译工程,会发现在/build/generated/source/aidl/debug/目录下有一个新生成的文件MyAidlInterface.java.这个就是编译起帮助我们生成的真正的aidl java文件了.来看下内部代码.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">package</span> yonyou.com.testbinderipc;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMyAidlInterface</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Local-side IPC implementation stub class.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">yonyou</span>.<span class="title">com</span>.<span class="title">testbinderipc</span>.<span class="title">IMyAidlInterface</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"yonyou.com.testbinderipc.IMyAidlInterface"</span>;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Construct the stub at attach it to the interface.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Cast an IBinder object into an yonyou.com.testbinderipc.IMyAidlInterface interface,</div><div class="line">         * generating a proxy if needed.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> yonyou.com.testbinderipc.<span class="function">IMyAidlInterface <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> yonyou.com.testbinderipc.IMyAidlInterface))) &#123;</div><div class="line">                <span class="keyword">return</span> ((yonyou.com.testbinderipc.IMyAidlInterface) iin);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> yonyou.com.testbinderipc.IMyAidlInterface.Stub.Proxy(obj);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (code) &#123;</div><div class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                    reply.writeString(DESCRIPTOR);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">                    data.enforceInterface(DESCRIPTOR);</div><div class="line">                    yonyou.com.testbinderipc.Book _arg0;</div><div class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                        _arg0 = yonyou.com.testbinderipc.Book.CREATOR.createFromParcel(data);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        _arg0 = <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                    java.lang.String _arg1;</div><div class="line">                    _arg1 = data.readString();</div><div class="line">                    java.lang.String _arg2;</div><div class="line">                    _arg2 = data.readString();</div><div class="line">                    <span class="keyword">this</span>.addBook(_arg0, _arg1, _arg2);</div><div class="line">                    reply.writeNoException();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> TRANSACTION_getUser: &#123;</div><div class="line">                    data.enforceInterface(DESCRIPTOR);</div><div class="line">                    java.util.List&lt;yonyou.com.testbinderipc.User&gt; _result = <span class="keyword">this</span>.getUser();</div><div class="line">                    reply.writeNoException();</div><div class="line">                    reply.writeTypedList(_result);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">yonyou</span>.<span class="title">com</span>.<span class="title">testbinderipc</span>.<span class="title">IMyAidlInterface</span> </span>&#123;</div><div class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">            Proxy(android.os.IBinder remote) &#123;</div><div class="line">                mRemote = remote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mRemote;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(yonyou.com.testbinderipc.Book book, java.lang.String a, java.lang.String b)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">                        _data.writeInt(<span class="number">1</span>);</div><div class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        _data.writeInt(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    _data.writeString(a);</div><div class="line">                    _data.writeString(b);</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> java.util.List&lt;yonyou.com.testbinderipc.User&gt; getUser() <span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                java.util.List&lt;yonyou.com.testbinderipc.User&gt; _result;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                    mRemote.transact(Stub.TRANSACTION_getUser, _data, _reply, <span class="number">0</span>);</div><div class="line">                    _reply.readException();</div><div class="line">                    _result = _reply.createTypedArrayList(yonyou.com.testbinderipc.User.CREATOR);</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    _reply.recycle();</div><div class="line">                    _data.recycle();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> _result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(yonyou.com.testbinderipc.Book book, java.lang.String a, java.lang.String b)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.util.List&lt;yonyou.com.testbinderipc.User&gt; getUser() <span class="keyword">throws</span> android.os.RemoteException;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  可以看到IMyAidlInterface表明是一个接口,同时内部有两个内部类sub和proxy,这两个对象就对应了上面个讲到的binder实体对象和binder代理对象.<br>  当client和server属于同一个进程时候,可以直接使用stub本地对象,如果不在同一进程中就只能使用proxy对象.这段逻辑对应这里的 <em>asInterface</em> 方法.</p>
<p>  写完service之后,我们需要在manifest中注册:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;service android:name=&quot;.TestAidlService&quot; android:exported=&quot;true&quot; android:process=&quot;:remote&quot; android:enabled=&quot;true&quot;&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=&quot;com.yonyou.test.aidl&quot;/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">    &lt;/service&gt;</div></pre></td></tr></table></figure></p>
<p>  到这里,server端的代码就算完成了.下面来看client端代码.</p>
<p>  client中也有aidl文件夹,里面的内容和server端是一模一样的,只需要把server中的aidl文件夹拷过来就可以了.还有两个java对象放入和server中包名一样的目录中.</p>
<p>  最终的目录结果应该是这样的:</p>
<p><img src="/images/2017/02/android aidl目录2.png" alt="android aidl目录结构2  "></p>
<p>  最后我们在client中的MainActivity来binder server中的service.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> IMyAidlInterface iMyAidlInterface;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">      setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">      FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">      fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">              Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.yonyou.test.aidl"</span>);</div><div class="line">              intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">              intent.setPackage(<span class="string">"yonyou.com.testbinderipc"</span>);</div><div class="line">              bindService(intent,sc, BIND_AUTO_CREATE);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">private</span> ServiceConnection sc = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">          iMyAidlInterface = IMyAidlInterface.Stub.asInterface(service);</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              iMyAidlInterface.addBook(<span class="keyword">new</span> Book(<span class="number">1001</span>,<span class="string">"如何阅读一本书"</span>));</div><div class="line">              List&lt;User&gt; user = iMyAidlInterface.getUser();</div><div class="line">              Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"user is "</span>+ user.get(<span class="number">0</span>).name, Toast.LENGTH_SHORT).show();</div><div class="line">          &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">          iMyAidlInterface = <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onDestroy();</div><div class="line">      unbindService(sc);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  点击FloatingActionButton,绑定server中的service,如果toast成功,并打印出日志表明调用成功.</p>
<p>  这里有个点需要注意下,在android5.0以后如果要startService或者bindService的时候一定要明确指定对方的包名,否者会抛出异常.这里intent的包名我们就写server的包名就可以了.</p>
<p>  在onServiceConnected中我们调用了IMyAidlInterface.Stub.asInterface,这里就完成了是否是统一进程的判断,如果不同进程就返回proxy对象,如果是统一进程就直接返回stub对象.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  要明白的是,这里的讲的代码只是java层的binder实现,真正的binder是在底层通过c++来实现的,要明白真正的binder实现还是要去深入看源码.这里只要明白了binder的实现原理和机制就可以了.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://weishu.me/2016/01/12/binder-index-for-newer/#comments" title="Binder学习指南" target="_blank" rel="external">Binder学习指南  </a></p>
<p><a href="http://wangkuiwu.github.io/2014/09/01/Binder-Introduce/" title="Android Binder机制(一) Binder的设计和框架" target="_blank" rel="external">Android Binder机制(一) Binder的设计和框架</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-binder与AIDL&quot;&gt;&lt;a href=&quot;#android-binder与AIDL&quot; class=&quot;headerlink&quot; title=&quot;android binder与AIDL&quot;&gt;&lt;/a&gt;android binder与AIDL&lt;/h2&gt;&lt;p&gt;  最近重新研究了一下Activity启动流程,里面主要提到了ActivityManagerService这个类来管理Activity的生命周期,而如何和这个类通讯成为了理解Activity启动流程的关键,而实现与ActivityManagerService通讯的基础就是今天要讲到的Binder知识.&lt;/p&gt;
&lt;p&gt;  我们知道你通过Luncher点击app图标来启动响应的app的时候,实际上就是相当于在Luncher这个app中取启动另一个app,也就是两个app的通讯,并且这两个app分属于不同的 &lt;em&gt;线程&lt;/em&gt; ,在android两个不同线程的通讯有个统一的说法叫做 &lt;em&gt;IPC(inter-process connection)&lt;/em&gt; .我们可以想象一下如果你要让两个陌生人之间互相认识,是不是需要一个中间人,那么在这里的进程就好比两个陌生人,而中间人就是我们这里的IPC,binder机制是IPC的一种实现方式.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android LruMemoryCache源码分析</title>
    <link href="http://pheobusyy.github.io/2017/02/17/2017/Android%20LruMemoryCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://pheobusyy.github.io/2017/02/17/2017/Android LruMemoryCache源码分析/</id>
    <published>2017-02-17T06:45:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-LruMemoryCache源码分析"><a href="#Android-LruMemoryCache源码分析" class="headerlink" title="Android LruMemoryCache源码分析"></a>Android LruMemoryCache源码分析</h2><p>  在分析Univeral Image Loader的时候看到里面的缓存实现很不错.其中的内存缓存使用的是它自己写的 <em>LruMemoryCache</em> ,文件缓存使用的是 <em>DiskLruCache</em> ,其中的 <em>DiskLruCache</em> 的源码已经分析完了,下面简单讲下 <em>LruMemoryCache</em> 的实现.<br><a id="more"></a><br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruMemoryCache</span> <span class="keyword">implements</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, Bitmap&gt; map;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxSize;</div><div class="line"><span class="comment">/** Size of this cache in bytes */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"><span class="comment">/** <span class="doctag">@param</span> maxSize Maximum sum of the sizes of the Bitmaps in this cache */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruMemoryCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">	<span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;String, Bitmap&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the Bitmap for &#123;<span class="doctag">@code</span> key&#125; if it exists in the cache. If a Bitmap was returned, it is moved to the head</div><div class="line"> * of the queue. This returns null if a Bitmap is not cached.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Bitmap <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">return</span> map.get(key);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Caches &#123;<span class="doctag">@code</span> Bitmap&#125; for &#123;<span class="doctag">@code</span> key&#125;. The Bitmap is moved to the head of the queue. */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		size += sizeOf(key, value);</div><div class="line">		Bitmap previous = map.put(key, value);</div><div class="line">		<span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">			size -= sizeOf(key, previous);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	trimToSize(maxSize);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove the eldest entries until the total of remaining entries is at or below the requested size.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> maxSize the maximum size of the cache before returning. May be -1 to evict even 0-sized elements.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">		String key;</div><div class="line">		Bitmap value;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName() + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (size &lt;= maxSize || map.isEmpty()) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			Map.Entry&lt;String, Bitmap&gt; toEvict = map.entrySet().iterator().next();</div><div class="line">			<span class="keyword">if</span> (toEvict == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			key = toEvict.getKey();</div><div class="line">			value = toEvict.getValue();</div><div class="line">			map.remove(key);</div><div class="line">			size -= sizeOf(key, value);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Removes the entry for &#123;<span class="doctag">@code</span> key&#125; if it exists. */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Bitmap <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		Bitmap previous = map.remove(key);</div><div class="line">		<span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">			size -= sizeOf(key, previous);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> previous;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;String&gt;(map.keySet());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">	trimToSize(-<span class="number">1</span>); <span class="comment">// -1 will evict 0-sized elements</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the size &#123;<span class="doctag">@code</span> Bitmap&#125; in bytes.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * An entry's size must not change while it is in the cache.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> value.getRowBytes() * value.getHeight();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> String.format(<span class="string">"LruCache[maxSize=%d]"</span>, maxSize);</div><div class="line">&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  整个代码大概一百多行,主要是通过维护一个LinkedhashMap来保存key对应的bitmap对象,同时内部通过size属性来表明总容量.<br>  当size超过最大限制的时候,就会触发 <em>trimToSize</em> 方法.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    String key;</div><div class="line">    Bitmap value;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName() + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (size &lt;= maxSize || map.isEmpty()) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Map.Entry&lt;String, Bitmap&gt; toEvict = map.entrySet().iterator().next();</div><div class="line">      <span class="keyword">if</span> (toEvict == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      key = toEvict.getKey();</div><div class="line">      value = toEvict.getValue();</div><div class="line">      map.remove(key);</div><div class="line">      size -= sizeOf(key, value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  可以看到这里循环遍历map对象,从头到尾的删除对象,每删除一个对象之后计算size容量是否低于最大容量,直到满足小于最大容量限制.</p>
<p>  就是这么简单,over.<br>  可以看到所有 LRUXX 缓存类的实现都是基于这种思路,交给一个map容器,如果超过容量限制的时候就触发减容操作,直到满足条件.这里的数据结构很重要,都是用的 <em>LinkedHashMap</em> ,有序并且容易删除.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android-LruMemoryCache源码分析&quot;&gt;&lt;a href=&quot;#Android-LruMemoryCache源码分析&quot; class=&quot;headerlink&quot; title=&quot;Android LruMemoryCache源码分析&quot;&gt;&lt;/a&gt;Android LruMemoryCache源码分析&lt;/h2&gt;&lt;p&gt;  在分析Univeral Image Loader的时候看到里面的缓存实现很不错.其中的内存缓存使用的是它自己写的 &lt;em&gt;LruMemoryCache&lt;/em&gt; ,文件缓存使用的是 &lt;em&gt;DiskLruCache&lt;/em&gt; ,其中的 &lt;em&gt;DiskLruCache&lt;/em&gt; 的源码已经分析完了,下面简单讲下 &lt;em&gt;LruMemoryCache&lt;/em&gt; 的实现.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android DiskLruCache源码分析</title>
    <link href="http://pheobusyy.github.io/2017/02/17/2017/android%20DiskLruCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://pheobusyy.github.io/2017/02/17/2017/android DiskLruCache源码分析/</id>
    <published>2017-02-17T02:02:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="adroid-DiskLruCache源码分析"><a href="#adroid-DiskLruCache源码分析" class="headerlink" title="adroid DiskLruCache源码分析"></a>adroid DiskLruCache源码分析</h2><p>  在学习Universal image loader源码的时候,看到了它在用到本地文件缓存的时候使用的是 <em>DiskLruCache</em> ,所有抽时间来分析下 <em>DiskLruCache</em> 的源码,来看下为什么它支持类似于 <em>LruCache</em> 功能,内部是怎么实现的.顺便再查看源码过程中了解下它的大概用法.</p>
<a id="more"></a>
<h3 id="journal文件"><a href="#journal文件" class="headerlink" title="journal文件"></a>journal文件</h3><p>  先来介绍下这个 <em>journal</em> 文件是什么东西.首先我们知道缓存必须对应是key-value结构,而文件缓存肯定是通过一定规则生成的key,然后对应找到制定路径上的文件来达到一个缓存的目的.那么在 <em>DiskLruCache</em> 中所有的缓存key的信息都是通过一个叫做 <em>journal</em> 的文件保存的.在使用的 <em>DiskLruCache</em> 的主文件目录中可以找到这个文件. 文件的格式内容大概像这样的:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*     libcore.io.DiskLruCache</div><div class="line">*     1</div><div class="line">*     100</div><div class="line">*     2</div><div class="line">*</div><div class="line">*     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054</div><div class="line">*     DIRTY 335c4c6028171cfddfbaae1a9c313c52</div><div class="line">*     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342</div><div class="line">*     REMOVE 335c4c6028171cfddfbaae1a9c313c52</div><div class="line">*     DIRTY 1ab96a171faeeee38496d8b330771a7a</div><div class="line">*     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234</div><div class="line">*     READ 335c4c6028171cfddfbaae1a9c313c52</div><div class="line">*     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6</div><div class="line">*</div></pre></td></tr></table></figure>
<p>  这段格式摘录自源码中的顶部注释说明中.我们可以把这个文件内容分成两部分.<br>  首先是顶部header,共有5行,包含了:</p>
<ol>
<li>标志位,说明使用的DiskLruCache</li>
<li>LruCache的版本号</li>
<li>app的版本号</li>
<li>一个key对应多少个value值个数,在 <em>open</em> 方法中会说明</li>
<li><p>一个空行</p>
<p>然后是下面的就是用到的缓存信息了,前面的关键字表明了缓存文件的状态,主要有 <em>DIRTY</em> <em>CLEAN</em> <em>REMOVE</em> <em>READ</em> 4中状态.</p>
</li>
<li>DIRTY 每一条缓存在被创建或者更新的时候,状态都是 DIRTY 状态,下面紧跟着一条状态 <em>CLEAN</em> 或者 <em>REMOVE</em> 的信息,如果一条DIRTY信息下面没有找到 <em>CLEAN</em> 或者 <em>REMOVE</em> 的信息,说明是一条 “脏数据” ,需要被删除掉</li>
<li>CLEAN 表明这是一条可以被读取的数据 ,后面跟着缓存文件的文件size</li>
<li>REMOVE 表明这是一条已经被删除的数据</li>
<li><p>READ 记录访问过该条缓存数据</p>
<p>上面两部分组成了 <em>journal</em> 文件的所有内容.</p>
</li>
</ol>
<h3 id="open方法"><a href="#open方法" class="headerlink" title="open方法"></a>open方法</h3><p>  当我们要开始使用DiskLruCache时,是不能直接通过new来创建对象,要通过它提供的静态方法 <em>open</em> 方法.通过open方法来返回一个DiskLruCache对象.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskLruCache <span class="title">open</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (valueCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"valueCount &lt;= 0"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// prefer to pick up where we left off</span></div><div class="line">        DiskLruCache cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</div><div class="line">        <span class="keyword">if</span> (cache.journalFile.exists()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cache.readJournal();</div><div class="line">                cache.processJournal();</div><div class="line">                cache.journalWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(cache.journalFile, <span class="keyword">true</span>),</div><div class="line">                        IO_BUFFER_SIZE);</div><div class="line">                <span class="keyword">return</span> cache;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException journalIsCorrupt) &#123;</div><div class="line"><span class="comment">//                System.logW("DiskLruCache " + directory + " is corrupt: "</span></div><div class="line"><span class="comment">//                        + journalIsCorrupt.getMessage() + ", removing");</span></div><div class="line">                cache.delete();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// create a new empty cache</span></div><div class="line">        directory.mkdirs();</div><div class="line">        cache = <span class="keyword">new</span> DiskLruCache(directory, appVersion, valueCount, maxSize);</div><div class="line">        cache.rebuildJournal();</div><div class="line">        <span class="keyword">return</span> cache;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>  在 <em>open</em> 方法中先来看DiskLruCache的构造函数:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">DiskLruCache</span><span class="params">(File directory, <span class="keyword">int</span> appVersion, <span class="keyword">int</span> valueCount, <span class="keyword">long</span> maxSize)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.directory = directory;</div><div class="line">      <span class="keyword">this</span>.appVersion = appVersion;</div><div class="line">      <span class="keyword">this</span>.journalFile = <span class="keyword">new</span> File(directory, JOURNAL_FILE);</div><div class="line">      <span class="keyword">this</span>.journalFileTmp = <span class="keyword">new</span> File(directory, JOURNAL_FILE_TMP);</div><div class="line">      <span class="keyword">this</span>.valueCount = valueCount;</div><div class="line">      <span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>  构造函数中就是简单的赋值操作,其中</p>
<ol>
<li><p>directory 表明缓存要方法手机的什么位置上,一般放入 <em>/sdcard/Android/data/<application package="">/cache</application></em> 系统默认这个文件是app专用缓存文件,当app要被卸载的时候,会顺便把这个文件下的内容删除. 我们可以通过API来获取这个文件的位置:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cachePath = context.getExternalCacheDir().getPath();</div></pre></td></tr></table></figure>
<p>不过我们可能会遇到这种情况,就是SD卡不可用被挂起的状态下,我们只能使用手机本身的app缓存目录了,这个目录对应 <em>/data/data/<application package="">/cache</application></em> ,通过API来获取就是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cachePath = context.getCacheDir().getPath();</div></pre></td></tr></table></figure>
<p>那么在使用DiskLruCache时,我们可以通过下面的代码来判断缓存目录:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getDiskCacheDir</span><span class="params">(Context context, String uniqueName)</span> </span>&#123;  </div><div class="line">  String cachePath;  </div><div class="line">  <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())  </div><div class="line">          || !Environment.isExternalStorageRemovable()) &#123;  </div><div class="line">      cachePath = context.getExternalCacheDir().getPath();  </div><div class="line">  &#125; <span class="keyword">else</span> &#123;  </div><div class="line">      cachePath = context.getCacheDir().getPath();  </div><div class="line">  &#125;  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> File(cachePath + File.separator + uniqueName);  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>appVersion 表示app的version,我们可以通过PackageManager来获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAppVersion</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">  <span class="keyword">try</span> &#123;  </div><div class="line">      PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">0</span>);  </div><div class="line">      <span class="keyword">return</span> info.versionCode;  </div><div class="line">  &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;  </div><div class="line">      e.printStackTrace();  </div><div class="line">  &#125;  </div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>valueCount 表示一个key可以获取多少个文件个数.默认情况设置为1</p>
</li>
<li><p>maxSize 表示允许DIskLruCache最大存储空间是多少.如果超过了该设置空间,DIskLruCache会优先删除之前的缓存数据来腾出空间.</p>
<p>回到open方法中,接下来的if判断是否已经存在了 <em>journal</em> 文件了.如果存在的话调用了 <em>readJournal</em> 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(journalFile), IO_BUFFER_SIZE);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          String magic = readAsciiLine(in);</div><div class="line">          String version = readAsciiLine(in);</div><div class="line">          String appVersionString = readAsciiLine(in);</div><div class="line">          String valueCountString = readAsciiLine(in);</div><div class="line">          String blank = readAsciiLine(in);</div><div class="line">          <span class="keyword">if</span> (!MAGIC.equals(magic)</div><div class="line">                  || !VERSION_1.equals(version)</div><div class="line">                  || !Integer.toString(appVersion).equals(appVersionString)</div><div class="line">                  || !Integer.toString(valueCount).equals(valueCountString)</div><div class="line">                  || !<span class="string">""</span>.equals(blank)) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal header: ["</span></div><div class="line">                      + magic + <span class="string">", "</span> + version + <span class="string">", "</span> + valueCountString + <span class="string">", "</span> + blank + <span class="string">"]"</span>);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  readJournalLine(readAsciiLine(in));</div><div class="line">              &#125; <span class="keyword">catch</span> (EOFException endOfJournal) &#123;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          closeQuietly(in);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里通过 <em>readAsciiLine</em> 逐行读取已经存在的 <em>journal</em> 文件内容.然后把文件header中的属性与传入open方法的属性做对比,如果发现不匹配抛出异常.如果抛出异常就会回到open方法中的try catch中的catch部分,通过调用 <em>delete</em> 方法把缓存目录中所有文件清空.<br>如果匹配就通过 <em>readJournalLine</em> 逐行读出文件的后续内容.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readJournalLine</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      String[] parts = line.split(<span class="string">" "</span>);</div><div class="line">      <span class="keyword">if</span> (parts.length &lt; <span class="number">2</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      String key = parts[<span class="number">1</span>];</div><div class="line">      <span class="keyword">if</span> (parts[<span class="number">0</span>].equals(REMOVE) &amp;&amp; parts.length == <span class="number">2</span>) &#123;</div><div class="line">          lruEntries.remove(key);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Entry entry = lruEntries.get(key);</div><div class="line">      <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">          entry = <span class="keyword">new</span> Entry(key);</div><div class="line">          lruEntries.put(key, entry);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (parts[<span class="number">0</span>].equals(CLEAN) &amp;&amp; parts.length == <span class="number">2</span> + valueCount) &#123;</div><div class="line">          entry.readable = <span class="keyword">true</span>;</div><div class="line">          entry.currentEditor = <span class="keyword">null</span>;</div><div class="line">          entry.setLengths(copyOfRange(parts, <span class="number">2</span>, parts.length));</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parts[<span class="number">0</span>].equals(DIRTY) &amp;&amp; parts.length == <span class="number">2</span>) &#123;</div><div class="line">          entry.currentEditor = <span class="keyword">new</span> Editor(entry);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parts[<span class="number">0</span>].equals(READ) &amp;&amp; parts.length == <span class="number">2</span>) &#123;</div><div class="line">          <span class="comment">// this work was already done by calling lruEntries.get()</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"unexpected journal line: "</span> + line);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里通过一个LinkedHashMap lruEntries 来存放所有的缓存记录.这所以使用 LinkedHashMap 这种数据结构是为了方便修改和删除,提高效率.<br>如果在lruEntries中没有找到对应的记录就创建一个新的 <em>entry</em> 对象,反之,如果找到了就根据前面的状态来调整 <em>entry</em> 的属性.到这里就相当于把历史的缓存记录加载到了内存中了.<br>读取完成之后接着调用 <em>processJournal</em> 来对缓存数据做一个预处理.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">     deleteIfExists(journalFileTmp);</div><div class="line">     <span class="keyword">for</span> (Iterator&lt;Entry&gt; i = lruEntries.values().iterator(); i.hasNext(); ) &#123;</div><div class="line">         Entry entry = i.next();</div><div class="line">         <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</div><div class="line">                 size += entry.lengths[t];</div><div class="line">             &#125;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             entry.currentEditor = <span class="keyword">null</span>;</div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; valueCount; t++) &#123;</div><div class="line">                 deleteIfExists(entry.getCleanFile(t));</div><div class="line">                 deleteIfExists(entry.getDirtyFile(t));</div><div class="line">             &#125;</div><div class="line">             i.remove();</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>如果记录是 <em>CLEAN</em> 状态,把文件大小计入总大小中,反之如果记录是 <em>脏数据</em> 就删除掉记录文件.<br>走完 <em>readJournal</em> 和 <em>processJournal</em> 方法之后,就直接返回cache对象了.如果在这个过程中抛出异常就会把缓存文件全部删除.</p>
<p>最后回到open方法的剩下部分,创建一个新的DiskLruCache对象,然后通过 <em>rebuildJournal</em> 创建一个新的 <em>journal</em> 文件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rebuildJournal</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      <span class="keyword">if</span> (journalWriter != <span class="keyword">null</span>) &#123;</div><div class="line">          journalWriter.close();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Writer writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(journalFileTmp), IO_BUFFER_SIZE);</div><div class="line">      writer.write(MAGIC);</div><div class="line">      writer.write(<span class="string">"\n"</span>);</div><div class="line">      writer.write(VERSION_1);</div><div class="line">      writer.write(<span class="string">"\n"</span>);</div><div class="line">      writer.write(Integer.toString(appVersion));</div><div class="line">      writer.write(<span class="string">"\n"</span>);</div><div class="line">      writer.write(Integer.toString(valueCount));</div><div class="line">      writer.write(<span class="string">"\n"</span>);</div><div class="line">      writer.write(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (Entry entry : lruEntries.values()) &#123;</div><div class="line">          <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</div><div class="line">              writer.write(DIRTY + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              writer.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      writer.close();</div><div class="line">      journalFileTmp.renameTo(journalFile);</div><div class="line">      journalWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(journalFile, <span class="keyword">true</span>), IO_BUFFER_SIZE);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以看到还是创建两部分,header和缓存信息.非常的清晰.<br>到这里,open方法就讲完了,主要是做一个缓存的创建和预处理.核心就在维护这个 <em>journal</em> 文件中.下面讲到的写入缓存和读取缓存都是对这个文件的操作.</p>
</li>
</ol>
<h3 id="写入缓存-editor"><a href="#写入缓存-editor" class="headerlink" title="写入缓存 editor"></a>写入缓存 editor</h3><p>  当要写入缓存的时候,首先通过 <em>edit</em> 方法获取到 <em>Editor</em> 对象,之后通过editor对象的 <em>newOutputStream</em> 方法传入一个输入流,传入完成之后调用 <em>commit</em> 方法,完成写入缓存.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Editor <span class="title">edit</span><span class="params">(String key, <span class="keyword">long</span> expectedSequenceNumber)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">     checkNotClosed();</div><div class="line">     validateKey(key);</div><div class="line">     Entry entry = lruEntries.get(key);</div><div class="line">     <span class="keyword">if</span> (expectedSequenceNumber != ANY_SEQUENCE_NUMBER</div><div class="line">             &amp;&amp; (entry == <span class="keyword">null</span> || entry.sequenceNumber != expectedSequenceNumber)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// snapshot is stale</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">         entry = <span class="keyword">new</span> Entry(key);</div><div class="line">         lruEntries.put(key, entry);</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// another edit is in progress</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     Editor editor = <span class="keyword">new</span> Editor(entry);</div><div class="line">     entry.currentEditor = editor;</div><div class="line"></div><div class="line">     <span class="comment">// flush the journal before creating files to prevent file leaks</span></div><div class="line">     journalWriter.write(DIRTY + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</div><div class="line">     journalWriter.flush();</div><div class="line">     <span class="keyword">return</span> editor;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  这里通过edit方法生成一个新的editor对象,然后在 <em>journal</em> 文件中加入一条 <em>DIRTY</em> 类型的数据.获取到editor对象之后就可以通过editor的对象的 <em>newOutputStream</em> 拿到一个输出流,然后把要保存的文件输入到这个流中.来看下editor的源码:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">newOutputStream</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">         <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</div><div class="line">             <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">this</span>) &#123;</div><div class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">new</span> FaultHidingOutputStream(<span class="keyword">new</span> FileOutputStream(entry.getDirtyFile(index)));</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>  返回一个 <em>FaultHidingOutputStream</em> 这个对象只是对outputStream的异常做了一个封装处理,,没有其他的区别.<br>  注意这里的流文件的路径用的是 <em>getDirtyFile</em> 这相当于一个中间文件,当本次写入最终成功的时候会把这个 <em>getDirtyFile</em> 覆盖到 <em>getCleanFile</em> 中.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FaultHidingOutputStream</span> <span class="keyword">extends</span> <span class="title">FilterOutputStream</span> </span>&#123;</div><div class="line">         <span class="function"><span class="keyword">private</span> <span class="title">FaultHidingOutputStream</span><span class="params">(OutputStream out)</span> </span>&#123;</div><div class="line">             <span class="keyword">super</span>(out);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> oneByte)</span> </span>&#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 out.write(oneByte);</div><div class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                 hasErrors = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 out.write(buffer, offset, length);</div><div class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                 hasErrors = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 out.close();</div><div class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                 hasErrors = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 out.flush();</div><div class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                 hasErrors = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>  拿到这个对象之后,我们就可以把下载的数据流放入这个流中,比如通过下面的示例代码放入:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">      <span class="keyword">try</span> &#123;  </div><div class="line">          String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">          String key = hashKeyForDisk(imageUrl);  </div><div class="line">          DiskLruCache.Editor editor = mDiskLruCache.edit(key);  </div><div class="line">          <span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;  </div><div class="line">              OutputStream outputStream = editor.newOutputStream(<span class="number">0</span>);  </div><div class="line">              <span class="keyword">if</span> (downloadUrlToStream(imageUrl, outputStream)) &#123;  </div><div class="line">                  editor.commit();  </div><div class="line">              &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                  editor.abort();  </div><div class="line">              &#125;  </div><div class="line">          &#125;  </div><div class="line">          mDiskLruCache.flush();  </div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">          e.printStackTrace();  </div><div class="line">      &#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p>  当下载完成后,调用 <em>commit</em> 方法修改缓存 <em>journal</em> 文件:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">         <span class="keyword">if</span> (hasErrors) &#123;</div><div class="line">             completeEdit(<span class="keyword">this</span>, <span class="keyword">false</span>);</div><div class="line">             remove(entry.key); <span class="comment">// the previous entry is stale</span></div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             completeEdit(<span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        completeEdit(<span class="keyword">this</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  这里可以看到 <em>commit</em> 和 <em>abort</em> 方法都是调用的 <em>completeEdit</em> 方法.那什么情况下满足 <em>hasErrors</em> 呢?还记得上面说的那个 <em>FaultHidingOutputStream</em> 对象吗?里面的try catch发生异常的时候就会把 <em>hasErrors</em> 这个变量设置为true.</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">completeEdit</span><span class="params">(Editor editor, <span class="keyword">boolean</span> success)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      Entry entry = editor.entry;</div><div class="line">      <span class="keyword">if</span> (entry.currentEditor != editor) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// if this edit is creating the entry for the first time, every index must have a value</span></div><div class="line">      <span class="keyword">if</span> (success &amp;&amp; !entry.readable) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</div><div class="line">              <span class="keyword">if</span> (!entry.getDirtyFile(i).exists()) &#123;</div><div class="line">                  editor.abort();</div><div class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"edit didn't create file "</span> + i);</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</div><div class="line">          File dirty = entry.getDirtyFile(i);</div><div class="line">          <span class="keyword">if</span> (success) &#123;</div><div class="line">              <span class="keyword">if</span> (dirty.exists()) &#123;</div><div class="line">                  File clean = entry.getCleanFile(i);</div><div class="line">                  dirty.renameTo(clean);</div><div class="line">                  <span class="keyword">long</span> oldLength = entry.lengths[i];</div><div class="line">                  <span class="keyword">long</span> newLength = clean.length();</div><div class="line">                  entry.lengths[i] = newLength;</div><div class="line">                  size = size - oldLength + newLength;</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              deleteIfExists(dirty);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      redundantOpCount++;</div><div class="line">      entry.currentEditor = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (entry.readable | success) &#123;</div><div class="line">          entry.readable = <span class="keyword">true</span>;</div><div class="line">          journalWriter.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</div><div class="line">          <span class="keyword">if</span> (success) &#123;</div><div class="line">              entry.sequenceNumber = nextSequenceNumber++;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          lruEntries.remove(entry.key);</div><div class="line">          journalWriter.write(REMOVE + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (size &gt; maxSize || journalRebuildRequired()) &#123;</div><div class="line">          executorService.submit(cleanupCallable);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  下面来分析 <em>completeEdit</em> 这个方法.首先如果成功的话要判断是不是对应缓存的所有文件都是存在的,如果有一个不存在就取消这次写入.<br>  然后遍历所有的 “DirtyFile” 写入到 “CleanFile” 中,同时更新DiskLruCache中size.看看是否要触发越界处理.如果全部写入成功就在 <em>journal</em> 文件中写入一条 <em>CLEAN</em> 记录.<br>  感觉Editor整体就像一个事物管理器,为了保证这次写入的完整性,当最终写入完成的时候Editor才算执行完成,否者就会发生回滚.</p>
<p>  当写入文件的容量超过了总容量限制的时候,就会触发减容操作,也就是删除之前一些缓存文件来保证后面的文件的写入.这正好也是DiskLruCache的特性.下面来看下减容操作的实现:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Callable&lt;Void&gt; cleanupCallable = <span class="keyword">new</span> Callable&lt;Void&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (journalWriter == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// closed</span></div><div class="line">            &#125;</div><div class="line">            trimToSize();</div><div class="line">            <span class="keyword">if</span> (journalRebuildRequired()) &#123;</div><div class="line">                rebuildJournal();</div><div class="line">                redundantOpCount = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>  这里把 <em>cleanupCallable</em> 交给线程池来调用.内部调用的 <em>trimToSize</em> 方法.</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">while</span> (size &gt; maxSize) &#123;</div><div class="line"><span class="comment">//            Map.Entry&lt;String, Entry&gt; toEvict = lruEntries.eldest();</span></div><div class="line">            <span class="keyword">final</span> Map.Entry&lt;String, Entry&gt; toEvict = lruEntries.entrySet().iterator().next();</div><div class="line">            remove(toEvict.getKey());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  这里变量所有的缓存,从头开始删除,直到总容量小于容量限制为止.这也就是为什么要使用 <em>LinkedHashMap</em> 的原因,有序并且便于删除.这里遍历是从头开始,相应的开始的文件应该是最早的文件,使用可能性要远低于后来的.</p>
<p>  这里进入了 <em>remove</em> 方法,正好对应删除缓存操作.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">     checkNotClosed();</div><div class="line">     validateKey(key);</div><div class="line">     Entry entry = lruEntries.get(key);</div><div class="line">     <span class="keyword">if</span> (entry == <span class="keyword">null</span> || entry.currentEditor != <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</div><div class="line">         File file = entry.getCleanFile(i);</div><div class="line">         <span class="keyword">if</span> (!file.delete()) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"failed to delete "</span> + file);</div><div class="line">         &#125;</div><div class="line">         size -= entry.lengths[i];</div><div class="line">         entry.lengths[i] = <span class="number">0</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     redundantOpCount++;</div><div class="line">     journalWriter.append(REMOVE + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</div><div class="line">     lruEntries.remove(key);</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (journalRebuildRequired()) &#123;</div><div class="line">         executorService.submit(cleanupCallable);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  这里删除掉所有的缓存文件,同时修改 <em>journal</em> 文件中的记录.同时有个隐藏触发条件判断 <em>journalRebuildRequired</em> :<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">journalRebuildRequired</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> REDUNDANT_OP_COMPACT_THRESHOLD = <span class="number">2000</span>;</div><div class="line">    <span class="keyword">return</span> redundantOpCount &gt;= REDUNDANT_OP_COMPACT_THRESHOLD</div><div class="line">            &amp;&amp; redundantOpCount &gt;= lruEntries.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这里冗余数 <em>redundantOpCount</em> 超过了限制,并且冗余数大于缓存记录个数的话就会触发再一次的减容操作,并且会重新生成一个 <em>journal</em> 文件,里面只包含 <em>CLEAN</em> 和 <em>DIRTY</em> 类型的记录.这里对应上面讲到的 <em>rebuildJournal</em> 的中间部分:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Entry entry : lruEntries.values()) &#123;</div><div class="line">           <span class="keyword">if</span> (entry.currentEditor != <span class="keyword">null</span>) &#123;</div><div class="line">               writer.write(DIRTY + <span class="string">' '</span> + entry.key + <span class="string">'\n'</span>);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               writer.write(CLEAN + <span class="string">' '</span> + entry.key + entry.getLengths() + <span class="string">'\n'</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>  这里有个疑问要解答一下,就是说如果重构了 <em>journal</em> 文件,那么那些标记为 <em>REMOVE</em> 的文件会不会一直都留在了文件夹中变成了无头文件.因为在 <em>journal</em> 文件中没有它们的记录,下次重新启动后没人知道那些死文件的存在了,但是文件夹的容量会一直不断的变大.后来想了下应该不会发生这种情况,因为一条记录被标记为 <em>REMOVE</em> 类型的时候,对应的文件已经被删除了.不管是通过减容操作还是通过外部调用 <em>remove</em> 方法,文件和记录应该还是一一对应的.<br>  也就是说如果一条记录已经被标记为 <em>REMOVE</em> 那么对应的文件应该已经不存在了.</p>
<h3 id="读取缓存-get"><a href="#读取缓存-get" class="headerlink" title="读取缓存 get"></a>读取缓存 get</h3><p>  通过DiskLruCache的 <em>get</em> 方法可以获取指定的缓存:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Snapshot <span class="title">get</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    checkNotClosed();</div><div class="line">    validateKey(key);</div><div class="line">    Entry entry = lruEntries.get(key);</div><div class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!entry.readable) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Open all streams eagerly to guarantee that we see a single published</div><div class="line">     * snapshot. If we opened streams lazily then the streams could come</div><div class="line">     * from different edits.</div><div class="line">     */</div><div class="line">    InputStream[] ins = <span class="keyword">new</span> InputStream[valueCount];</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</div><div class="line">            ins[i] = <span class="keyword">new</span> FileInputStream(entry.getCleanFile(i));</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        <span class="comment">// a file must have been deleted manually!</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    redundantOpCount++;</div><div class="line">    journalWriter.append(READ + <span class="string">' '</span> + key + <span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">if</span> (journalRebuildRequired()) &#123;</div><div class="line">        executorService.submit(cleanupCallable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Snapshot(key, entry.sequenceNumber, ins);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  get方法非常的简单,就是从 <em>lruEntries</em> 获取对应的key,如果找到了就返回一个 <em>snap</em> 对象,同时在 <em>journal</em> 文件中写入一条 <em>READ</em> 类型的数据.<br>  为啥要包装一个 <em>snap</em> 对象呢?这是因为上面讲的open方法的第三个参数,就是一个缓存key可以对应几个文件的个数.因为可能是对应多个,所以需要包装一个对象,可以通过里面的index来获取制定key下面的指定index的文件对象.</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Snapshot</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> String key;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceNumber;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> InputStream[] ins;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">private</span> <span class="title">Snapshot</span><span class="params">(String key, <span class="keyword">long</span> sequenceNumber, InputStream[] ins)</span> </span>&#123;</div><div class="line">           <span class="keyword">this</span>.key = key;</div><div class="line">           <span class="keyword">this</span>.sequenceNumber = sequenceNumber;</div><div class="line">           <span class="keyword">this</span>.ins = ins;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Returns an editor for this snapshot's entry, or null if either the</div><div class="line">        * entry has changed since this snapshot was created or if another edit</div><div class="line">        * is in progress.</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">public</span> Editor <span class="title">edit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">           <span class="keyword">return</span> DiskLruCache.<span class="keyword">this</span>.edit(key, sequenceNumber);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Returns the unbuffered stream with the value for &#123;<span class="doctag">@code</span> index&#125;.</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> ins[index];</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Returns the string value for &#123;<span class="doctag">@code</span> index&#125;.</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">           <span class="keyword">return</span> inputStreamToString(getInputStream(index));</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">for</span> (InputStream in : ins) &#123;</div><div class="line">               closeQuietly(in);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>  这里通过snap的 <em>getInputStream</em> 可以获取到一个流对象,有了对象你就可以把它写入图片Bitmap对象等等操作都可以啦.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">try</span> &#123;  </div><div class="line">    String imageUrl = <span class="string">"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg"</span>;  </div><div class="line">    String key = hashKeyForDisk(imageUrl);  </div><div class="line">    DiskLruCache.Snapshot snapShot = mDiskLruCache.get(key);  </div><div class="line">    <span class="keyword">if</span> (snapShot != <span class="keyword">null</span>) &#123;  </div><div class="line">        InputStream is = snapShot.getInputStream(<span class="number">0</span>);  </div><div class="line">        Bitmap bitmap = BitmapFactory.decodeStream(is);  </div><div class="line">        mImage.setImageBitmap(bitmap);  </div><div class="line">    &#125;  </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">    e.printStackTrace();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  到这里,所有的操作都讲完了,可以看到就是通过维护 <em>journal</em> 文件来配置缓存,找到指定的文件位置,然后通过size属性来控制缓存容量的.这里通过 <em>Editor</em> 来模拟了事物的操作感觉还是很值得借鉴的.</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html#l55" title="DiskLruCache源码" target="_blank" rel="external">DiskLruCache源码</a></p>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/28863651" title="Android DiskLruCache全解析" target="_blank" rel="external">Android DiskLruCache全解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;adroid-DiskLruCache源码分析&quot;&gt;&lt;a href=&quot;#adroid-DiskLruCache源码分析&quot; class=&quot;headerlink&quot; title=&quot;adroid DiskLruCache源码分析&quot;&gt;&lt;/a&gt;adroid DiskLruCache源码分析&lt;/h2&gt;&lt;p&gt;  在学习Universal image loader源码的时候,看到了它在用到本地文件缓存的时候使用的是 &lt;em&gt;DiskLruCache&lt;/em&gt; ,所有抽时间来分析下 &lt;em&gt;DiskLruCache&lt;/em&gt; 的源码,来看下为什么它支持类似于 &lt;em&gt;LruCache&lt;/em&gt; 功能,内部是怎么实现的.顺便再查看源码过程中了解下它的大概用法.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读书笔记书写技巧</title>
    <link href="http://pheobusyy.github.io/2017/02/15/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%A6%E5%86%99%E6%8A%80%E5%B7%A7/"/>
    <id>http://pheobusyy.github.io/2017/02/15/2017/读书笔记/读书笔记书写技巧/</id>
    <published>2017-02-15T13:07:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记书写技巧"><a href="#读书笔记书写技巧" class="headerlink" title="读书笔记书写技巧"></a>读书笔记书写技巧</h2><p>这里记录一下在书写读书笔记的时候一些技巧,不一定对,不过可以尝试一下效果.</p>
<ol>
<li>不要直接照搬书上的原文,除非是特别棒的名言金句,而是要自己通过记忆回想复述内容,这样才能可以加深记忆,避免记占有错觉.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;读书笔记书写技巧&quot;&gt;&lt;a href=&quot;#读书笔记书写技巧&quot; class=&quot;headerlink&quot; title=&quot;读书笔记书写技巧&quot;&gt;&lt;/a&gt;读书笔记书写技巧&lt;/h2&gt;&lt;p&gt;这里记录一下在书写读书笔记的时候一些技巧,不一定对,不过可以尝试一下效果.&lt;/p&gt;
&lt;ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;学习之道&gt;读书笔记</title>
    <link href="http://pheobusyy.github.io/2017/02/15/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%3C%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93%3E%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://pheobusyy.github.io/2017/02/15/2017/读书笔记/&lt;学习之道&gt;读书笔记/</id>
    <published>2017-02-15T13:04:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-学习之道-gt-读书笔记"><a href="#lt-学习之道-gt-读书笔记" class="headerlink" title="&lt;学习之道&gt;读书笔记"></a>&lt;学习之道&gt;读书笔记</h2><h3 id="放松点"><a href="#放松点" class="headerlink" title="放松点"></a>放松点</h3><p>解决拖延的小技巧:</p>
<blockquote>
<p>想象一下,如果现在是准备入睡的时候,你正在回顾这一天最重要的任务.你想到的任务是哪一个呢?把它写下来, <em>现在就去做</em> .在这天内,试着用最少三个25分钟(“番茄时间段”)来处理你想到的最重要的一个或几个任务.</p>
<p>如果我们开始就用专注模式处理新的概念和陌生的问题,很容易止步不前.</p>
</blockquote>
<p>这是因为刚开始的时候你根本把相关的概念在脑海有一个清晰的轮廓或者想法,对你来说这些新的东西就和一个外星生物一样,你对它一无所知,只有当你对它有个理解和初步认识的时候你才能把它留在你的脑海中,下次才能在一提到这个东西的时候大脑立马就把它提取出来.so,刚开始不要死记硬背,这样效果很差,也就是在专注模式下学习新东西容易起不到效果</p>
<blockquote>
<p>想要发掘新点子,解决问题,不仅需要最初的专注,接着也需要给注意力放个假,让它从眼前的问题上溜开一会儿.<br><a id="more"></a></p>
</blockquote>
<p>让子弹飞一会儿,交给潜意识来消化和寻找解决问题思路.效果加倍.要 <em>向外行一样思考,专家一样实践</em>.</p>
<p>个人学习的3个步骤:</p>
<ol>
<li>预习</li>
<li>求助网络</li>
<li>放松一下,发散思维</li>
</ol>
<h3 id="学习即创造"><a href="#学习即创造" class="headerlink" title="学习即创造"></a>学习即创造</h3><blockquote>
<p>只要你放下手中的工作,停下来喘口气,发散模式就会乘虚而入,上蹿下跳,高屋建瓴的搜寻解决方案.</p>
</blockquote>
<p>之前在工作中遇到难题,百思不得解,后来停下来喝口水上厕所,回来之后就发现有了点点思路,试了下发现还真就是这样好使,在停下来的过程中交给潜意识来思考,会有意想不到的效果</p>
<blockquote>
<p>在紧凑的专注模式之后,利用发散模式的方法奖励自己<br>激发发散模式的一般方法:</p>
<ul>
<li>去健身房</li>
<li>参加运动,如踢足球或打篮球</li>
<li>慢跑,散步或游泳</li>
<li>跳舞</li>
<li>开车兜风(或搭个顺风车)</li>
<li>绘画或者涂鸦</li>
<li>淋个浴或者泡个澡</li>
<li>听音乐,尤其纯音乐</li>
<li>用乐器演奏熟悉的歌曲</li>
<li>冥想或者祷告</li>
<li>睡觉 (召唤发散模式的终极法宝!)</li>
</ul>
</blockquote>
<p>说白了就是让大脑休息一下,做做运动,听听音乐放松一下</p>
<blockquote>
<p>把信息从工作记忆转存到长期记忆需要一点点技巧,其中有一个叫 <em>间隔重复</em> 的技巧最有效.<br>已有研究证明,要想把某件事牢牢钉在记忆里,一晚上重复20次不如每天重复几次,多坚持几天甚至几周效果要来的更好.</p>
</blockquote>
<p>有个叫艾宾浩斯记忆曲线的东西,和这个概念类似.</p>
<blockquote>
<p>经验丰富的学习者会说,让精力充沛的大脑阅读一个小时,强过疲劳大脑读上三个小时.缺觉的大脑根本无法保证在正常思维活动中一如既往的进行思维联结.</p>
</blockquote>
<p>临时抱佛脚不靠谱,休息好调高效率才重要.</p>
<blockquote>
<p>个人成功依赖于一下几个要素.首先,正如耐克的口号所说:放胆去做.<br>创造力是数量上的竞争<br>战胜恐惧<br>再多做几次总会成功<br>批评使我们更优秀<br>接受分歧</p>
</blockquote>
<h3 id="组块的构建与避免能力错觉"><a href="#组块的构建与避免能力错觉" class="headerlink" title="组块的构建与避免能力错觉"></a>组块的构建与避免能力错觉</h3><blockquote>
<p>要熟练地掌握数学和科学知识,就要创造一些概念组块–这是通过意义讲分散的信息碎片组合起来的过程.把要处理的信息构成组块,可以使大脑更高效的运转.只要把一个想法或者概念构成组块,就不必纠缠于所有微观的基础信息了,因为你已经学会了提纲挈领(组块),有它足够了.</p>
</blockquote>
<p>有点像概念的模块化和组合化</p>
<blockquote>
<p>构建组块的步骤:</p>
<ol>
<li>把注意力集中在需要组块的信息上</li>
<li>把基本概念打包成组块,首先要理解这个基本概念</li>
<li>后去背景信息.你所看到的将不仅是如何进行组块,还有何时何地使用它们</li>
</ol>
<p>试着回想学习材料,即提取练习,效果比单纯阅读材料好得多.</p>
<p>在学习中进行回想– 让大脑提取关键概念,而非通过重复阅读被动地获取知识,将让你更加集中高效的利用学习时间.</p>
<p>特别是对初次学到,还颇有挑战性的知识,最好是24小时内就和他们亲近一下.这既是为什么许多教授建议,如果可能,要在听过课程的当晚再写一遍笔记.这样有助于巩固新形成的组块,也能揭露自己理解上的漏洞</p>
<p>一天之内再次强化学习模型,在构造神经模型的初始阶段至关重要.如果不强化,学习模型很快就会从脑中消失.</p>
</blockquote>
<p>及时复习的重要性.</p>
<blockquote>
<p>但在数学和科学学习中,必须进行适量的练习和重复,否则就无法构建组块来支撑专业技能.<br>相投时间内,仅靠对材料的练习和回想,学生的习得内容和学习深度都远远超过了其他方法.</p>
<p>你需要让大脑接受这个道理: 仅知道怎样使用特定的解题技巧是不够的,还得知道何时何地去使用才行</p>
</blockquote>
<p>要知道解题技巧的使用场景在哪里</p>
<blockquote>
<p>在有限的学习时间里,保尔的学习技巧:</p>
<ol>
<li>读一读(但还不去做)布置的家庭作业和模拟测试/小试题</li>
<li>复习讲义笔记</li>
<li>重做课堂笔记中的例题</li>
<li>完成布置的家庭作业和模拟测试/小测试</li>
</ol>
</blockquote>
<h3 id="预防拖延"><a href="#预防拖延" class="headerlink" title="预防拖延"></a>预防拖延</h3><blockquote>
<p>现实就是,我们拖延的,往往是让我们感到不安的事情.</p>
</blockquote>
<p>越怕啥越不想干啥,确实有道理</p>
<blockquote>
<p>拖延是个极具影响力的”关键”恶习.<br>但如果你开始对某件事游刃有余,自然就乐在其中了.</p>
</blockquote>
<p>越擅长啥就越喜欢干啥</p>
<h3 id="深入理解拖延的习惯"><a href="#深入理解拖延的习惯" class="headerlink" title="深入理解拖延的习惯"></a>深入理解拖延的习惯</h3><blockquote>
<p>习惯分成四个部分:<br>1.信号<br>2.反应程序<br>3.奖励机制<br>4.信念</p>
<p>改变的关键在于制定计划.培养新习惯可能会更有用.</p>
</blockquote>
<p>识别信号,修改反应程序</p>
<blockquote>
<p>通过关注过程而非结果进入思绪<br>想要避免拖延,就不要专注于结果.相反,你应该把关注点放在一些过程的形成上–也就是培养一些习惯,这些习惯让你动手做一些痛苦而又不得不完成的工作.</p>
</blockquote>
<p>通过习惯来推动改变拖延,结构性拖延</p>
<blockquote>
<p>把注意力放在过程而非结果上,可以让你避免对自己做出评价,(我快完成任务了吗)并让你放松的沉浸在工作过程中.</p>
</blockquote>
<h3 id="搭建组块对抗发蒙"><a href="#搭建组块对抗发蒙" class="headerlink" title="搭建组块对抗发蒙"></a>搭建组块对抗发蒙</h3><blockquote>
<p>搭建强大组块的步骤:</p>
<ol>
<li>全程在纸上解决一个重点难题</li>
<li>重做一次,要格外注意关键步骤</li>
<li>休息一下</li>
<li>睡眠</li>
<li>再来一次<br>6.给自己添新题</li>
<li>“主动”重复</li>
</ol>
<p>你越努力的回想学习材料,它在记忆中植入的就越深.相比纯粹的重复,回想才是学习过程中最好的可以练习方式.<br>提取练习是最强效的学习方式之一.</p>
<p>我们记忆有个奇特的特质,即主动重复比被动重复让人记忆更加深刻.我是说,在意心记的方式学习过程中,等明白得差不多了,如果多花些时间和精力去回想,得到的效果比再看一遍书更好.</p>
</blockquote>
<p>回想的重要性.加深记忆</p>
<blockquote>
<p>测试本身就是一种强效的学习经历.它可以改造你已有的知识体系或是为其添砖加瓦,同时可以显著提高你记住学习材料的能力.</p>
<p>提取练习的做法就有效多了,读每一页时,试着概括出主要内容并铭记在心,然后翻到下一页.</p>
</blockquote>
<h3 id="增强你的记忆力"><a href="#增强你的记忆力" class="headerlink" title="增强你的记忆力"></a>增强你的记忆力</h3><blockquote>
<p>通过激发感官建立起越多的神经联结,就越容易回想起概念和意义.</p>
</blockquote>
<h3 id="记忆技巧多多益善"><a href="#记忆技巧多多益善" class="headerlink" title="记忆技巧多多益善"></a>记忆技巧多多益善</h3><blockquote>
<p>在数学和科学的学习中,如果你除了想记住概念,还想理解概念,一个上策就是为它量身打造一个比喻或类比,而且,通常这个类比越✨,效果越好.</p>
<p>书写会把要学的知识编译(讲信息转换为神经记忆结构的一部分)到你更深的记忆</p>
</blockquote>
<h3 id="借方程的诗歌打开心灵之眼"><a href="#借方程的诗歌打开心灵之眼" class="headerlink" title="借方程的诗歌打开心灵之眼"></a>借方程的诗歌打开心灵之眼</h3><blockquote>
<p>费曼法:这个方法要求人们找到简单的比喻或类比来帮助他们理解概念要旨.</p>
</blockquote>
<h3 id="释放无限潜力"><a href="#释放无限潜力" class="headerlink" title="释放无限潜力"></a>释放无限潜力</h3><blockquote>
<p>10个好的学习法则:</p>
<ol>
<li>运用回想</li>
<li>自我测试</li>
<li>对问题进行组块</li>
<li>间隔开重复动作</li>
<li>在练习中交替使用不同的技巧</li>
<li>注意休息</li>
<li>使用解释性的提问和简单类比(费曼法则)</li>
<li>专注</li>
<li>困难的事情先做.</li>
<li>心里对照</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-学习之道-gt-读书笔记&quot;&gt;&lt;a href=&quot;#lt-学习之道-gt-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;学习之道&amp;gt;读书笔记&quot;&gt;&lt;/a&gt;&amp;lt;学习之道&amp;gt;读书笔记&lt;/h2&gt;&lt;h3 id=&quot;放松点&quot;&gt;&lt;a href=&quot;#放松点&quot; class=&quot;headerlink&quot; title=&quot;放松点&quot;&gt;&lt;/a&gt;放松点&lt;/h3&gt;&lt;p&gt;解决拖延的小技巧:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想象一下,如果现在是准备入睡的时候,你正在回顾这一天最重要的任务.你想到的任务是哪一个呢?把它写下来, &lt;em&gt;现在就去做&lt;/em&gt; .在这天内,试着用最少三个25分钟(“番茄时间段”)来处理你想到的最重要的一个或几个任务.&lt;/p&gt;
&lt;p&gt;如果我们开始就用专注模式处理新的概念和陌生的问题,很容易止步不前.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是因为刚开始的时候你根本把相关的概念在脑海有一个清晰的轮廓或者想法,对你来说这些新的东西就和一个外星生物一样,你对它一无所知,只有当你对它有个理解和初步认识的时候你才能把它留在你的脑海中,下次才能在一提到这个东西的时候大脑立马就把它提取出来.so,刚开始不要死记硬背,这样效果很差,也就是在专注模式下学习新东西容易起不到效果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想要发掘新点子,解决问题,不仅需要最初的专注,接着也需要给注意力放个假,让它从眼前的问题上溜开一会儿.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android loader相关</title>
    <link href="http://pheobusyy.github.io/2017/02/15/2017/android%20loader%E7%9B%B8%E5%85%B3/"/>
    <id>http://pheobusyy.github.io/2017/02/15/2017/android loader相关/</id>
    <published>2017-02-15T06:16:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-loader相关"><a href="#android-loader相关" class="headerlink" title="android loader相关"></a>android loader相关</h3><p>今天第一次学习使用loader,由于不想要使用CursorLoader,所以自己实现了一个asyncTaskLoader,结果发现不起作用,根本没有调用callBack的 <em>onLoadFinished</em> 方法.这不科学啊,看这官方示例写的呀.</p>
<p>后来发现忽略了一个关键点,就是在自定义loader的 <em>onStartLoading</em> 方法中,有下面几句话:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStartLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mApps != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// If we currently have a result available, deliver it</span></div><div class="line">            <span class="comment">// immediately.</span></div><div class="line">            deliverResult(mApps);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Start watching for changes in the app data.</span></div><div class="line">        <span class="keyword">if</span> (mPackageObserver == <span class="keyword">null</span>) &#123;</div><div class="line">            mPackageObserver = <span class="keyword">new</span> PackageIntentReceiver(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Has something interesting in the configuration changed since we</span></div><div class="line">        <span class="comment">// last built the app list?</span></div><div class="line">        <span class="keyword">boolean</span> configChange = mLastConfig.applyNewConfig(getContext().getResources());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (takeContentChanged() || mApps == <span class="keyword">null</span> || configChange) &#123;</div><div class="line">            <span class="comment">// If the data has changed since the last time it was loaded</span></div><div class="line">            <span class="comment">// or is not currently available, start a load.</span></div><div class="line">            forceLoad();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>逻辑也很简单,就是说如果有数据了,直接通过 <em>deliverResult</em> 返回数据,如果没有,强制调用 <em>forceLoad</em> .<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliverResult</span><span class="params">(D data)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">          mListener.onLoadComplete(<span class="keyword">this</span>, data);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>在 <em>deliverResult</em> 中调用了callback的 <em>onLoadFinished</em> 方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forceLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">      onForceLoad();</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onForceLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onForceLoad();</div><div class="line">        cancelLoad();</div><div class="line">        mTask = <span class="keyword">new</span> LoadTask();</div><div class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Preparing load: mTask="</span> + mTask);</div><div class="line">        executePendingTask();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>forceLoad方法会调用内部AsyncTask发起请求,内部调用 <em>loadInBackground</em> 完成耗时任务.</p>
<p>那为什么 <em>CursorLoader</em> 不需要复写这一堆东西了,是因为在其内部已经帮我们写好了.<br>下面是 <em>CursorLoader</em> 的 <em>onStartLoading</em> 方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStartLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mCursor != <span class="keyword">null</span>) &#123;</div><div class="line">           deliverResult(mCursor);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (takeContentChanged() || mCursor == <span class="keyword">null</span>) &#123;</div><div class="line">           forceLoad();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>对这个方法的处理使我们在第一次使用loader的时候要注意的哦,否者你会发现调用了initloader之后没有反应.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;android-loader相关&quot;&gt;&lt;a href=&quot;#android-loader相关&quot; class=&quot;headerlink&quot; title=&quot;android loader相关&quot;&gt;&lt;/a&gt;android loader相关&lt;/h3&gt;&lt;p&gt;今天第一次学习使用loade
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android view滑动相关</title>
    <link href="http://pheobusyy.github.io/2017/02/15/2017/android%20view%E6%BB%91%E5%8A%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://pheobusyy.github.io/2017/02/15/2017/android view滑动相关/</id>
    <published>2017-02-15T05:50:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-view滑动相关"><a href="#android-view滑动相关" class="headerlink" title="android view滑动相关"></a>android view滑动相关</h2><p>  在学习ViewDragHelper的过程中,用到了scroller来回弹到制定的位置,同时也很好奇scroller和computeScroll方法的关联,还有就是关于view坐标系一些api的学习等等,这些概念在这里说明一下.<br>  <a id="more"></a></p>
<h3 id="view的坐标系"><a href="#view的坐标系" class="headerlink" title="view的坐标系"></a>view的坐标系</h3><p><img src="images/2017/02/android view坐标系.png" alt="android view坐标"></p>
<p>通过上面的图片可以看的很明白了,getLeft,getRight,getTop,getBottom这四个方法是相对于父类边界的距离<br>在触摸事件中,getRawX,getRawY是当前触发点相对与屏幕的距离<br>而event中的getX,getY是当前触摸点相对于view本身的边界的距离.</p>
<p>这里还有个概念就是view本身的getX,getY不要和这个混淆了.<br>view本身的getX,getY是view的滑动距离加上getLeft<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> mLeft + getTranslationX();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mTop + getTranslationY();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="images/2017/02/view移动后坐标.png" alt="view移动后坐标"></p>
<h3 id="scroller的用法"><a href="#scroller的用法" class="headerlink" title="scroller的用法"></a>scroller的用法</h3><p>首先要明白,让一个view从A点自己移动到B点并不是scroller做的,scroller本身只是用来负责计算的,也就是在你调用 <em>scroller.startScroll(int startX,int startY ,int distanceX,int distanceY)</em> 这个方法时候,本身只是在计算.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">       mMode = SCROLL_MODE;</div><div class="line">       mFinished = <span class="keyword">false</span>;</div><div class="line">       mDuration = duration;</div><div class="line">       mStartTime = AnimationUtils.currentAnimationTimeMillis();</div><div class="line">       mStartX = startX;</div><div class="line">       mStartY = startY;</div><div class="line">       mFinalX = startX + dx;</div><div class="line">       mFinalY = startY + dy;</div><div class="line">       mDeltaX = dx;</div><div class="line">       mDeltaY = dy;</div><div class="line">       mDurationReciprocal = <span class="number">1.0f</span> / (<span class="keyword">float</span>) mDuration;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在这个方法里面是没有关于view移动或者刷新的任何相关代码的.那到底scroller是怎么让view发生位移的呢.<br>奥妙就在我们需要在自定义的view中复写 <em>computeScroll</em> 方法.在 <em>computeScroll</em> 方法中通过调用 <em>scroller.computeScrollOffset</em> 方法来获取当前scroller的计算状态,如果该方法返回false,说明scroller仍然在计算,也就是说view可以继续移动还没有移动完成.反之返回ture说明计算完了,也就是这个时候view已经到了制定位置了.这个时候通过对 <em>computeScrollOffset</em> 的返回值判断我们来调用api来对view做真正的移动.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (scroller.computeScrollOffset()) &#123;</div><div class="line">           scrollTo(scroller.getCurrX(),scroller.getCurrY());</div><div class="line">           invalidate();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到,真正发生让view发生移动是这里的 <em>computeScrollOffset</em> 判断中的 <em>scrollTo</em> ,我们可以通过 scroller.getCurrX 和 getCurrY 来获取到当前计算到的坐标.</p>
<p>那另一个问题就是谁去调用的 <em>computeScroll</em> 方法呢?通过查看view的源码,在view的 <em>draw</em> 方法中可以看到调用了 <em>computeScroll</em> 方法,那这样就很容易明白了,为什么每次在调用 <em>scroller.startScroll</em> 方法之后,要紧接着调用 <em>invalid</em> 方法了.通过 <em>invalid</em> 方法来通知view重绘.然后就会调用 <em>computeScroll</em> 方法了.在这里完成改变view的位置的操作.</p>
<p>再说说什么情况下要用到 <em>scroller</em> ,个人理解就是在对view做滑动操作的时候,当你松开手指需要让view自己滚动到指定的位置的时候,可以交给scroller来完成自动滚动.so,一般要在touch事件的 <em>ACTION_UP</em> 中调用 <em>startScroll</em> 方法,紧接着调用 <em>invalid</em> 方法就可以了.</p>
<h3 id="scrollTo-和-scrollBy"><a href="#scrollTo-和-scrollBy" class="headerlink" title="scrollTo 和 scrollBy"></a>scrollTo 和 scrollBy</h3><p>通过 <em>scrollTo</em> 和 <em>scrollBy</em> 方法来是view发生位移是一种常规方式. 其中 <em>scrollTo</em> 是把view移动的绝对坐标的位置,而 <em>scrollBy</em> 是移动相对的位置.在源码中实际上 <em>scrollBy</em> 调用的就是 <em>scrollTo</em> 方法.</p>
<p>注意:这两个方法移动都是view的内容,如果viewGroup就是其内部的view.</p>
<p>getScrollX 和 getScrollY 方法返回对应的滚动距离,在复位的时候可以用到.</p>
<p>注意:在向右下方移动view的时候,应该传入的是负值的坐标</p>
<h3 id="view移动的7个方式"><a href="#view移动的7个方式" class="headerlink" title="view移动的7个方式"></a>view移动的7个方式</h3><ol>
<li>View.offsetLeftAndRight 和View.offsetTopAndBottom</li>
<li>scrollTo 和 ScrollBy</li>
<li>修改Layout</li>
<li>修改LayoutParams</li>
<li>属性动画</li>
<li>位移动画</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-view滑动相关&quot;&gt;&lt;a href=&quot;#android-view滑动相关&quot; class=&quot;headerlink&quot; title=&quot;android view滑动相关&quot;&gt;&lt;/a&gt;android view滑动相关&lt;/h2&gt;&lt;p&gt;  在学习ViewDragHelper的过程中,用到了scroller来回弹到制定的位置,同时也很好奇scroller和computeScroll方法的关联,还有就是关于view坐标系一些api的学习等等,这些概念在这里说明一下.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ViewDragHelper源码分析</title>
    <link href="http://pheobusyy.github.io/2017/02/09/2017/ViewDragHelper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://pheobusyy.github.io/2017/02/09/2017/ViewDragHelper源码分析/</id>
    <published>2017-02-09T08:25:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewDragHelper源码分析"><a href="#ViewDragHelper源码分析" class="headerlink" title="ViewDragHelper源码分析"></a>ViewDragHelper源码分析</h2><p>在学习第三方的一个开源库的时候,发现了系统居然已为viewGroup控制的子view的手势移动提供了相关的组件,就是今天要介绍的 <em>ViewDragHelper</em> ,看了一下发现功能非常的强大,基本满足了我们平时的使用要求,首先我们先讲解一下它的用法,然后再从源码层面来分析一下它的实现思路.</p>
<h3 id="ViewDragHelper的用法"><a href="#ViewDragHelper的用法" class="headerlink" title="ViewDragHelper的用法"></a>ViewDragHelper的用法</h3><p>先通过一个简单的demo来看一下ViewDragHelper的用法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDragLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewDragHelper mViewDragHelper;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> View mDragView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDragLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDragLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDragLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mViewDragHelper = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1f</span>, <span class="keyword">new</span> ViewDragCallBack());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragCallBack</span> <span class="keyword">extends</span> <span class="title">ViewDragHelper</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> mDragView.getId() == child.getId();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 处理水平方向上的拖动</div><div class="line">         *</div><div class="line">         * <span class="doctag">@param</span> child 拖动的View</div><div class="line">         * <span class="doctag">@param</span> left  移动到x轴的距离</div><div class="line">         * <span class="doctag">@param</span> dx    建议的移动的x距离</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">            <span class="comment">//两个if主要是让view在ViewGroup中</span></div><div class="line">            <span class="keyword">if</span> (left &lt; getPaddingLeft()) &#123;</div><div class="line">                <span class="keyword">return</span> getPaddingLeft();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (left &gt; getWidth() - child.getMeasuredWidth()) &#123;</div><div class="line">                <span class="keyword">return</span> getWidth() - child.getMeasuredWidth();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (top &lt; getPaddingTop()) &#123;</div><div class="line">                <span class="keyword">return</span> getPaddingTop();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (top &gt; getHeight() - child.getMeasuredHeight()) &#123;</div><div class="line">                <span class="keyword">return</span> getHeight() - child.getMeasuredHeight();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> top;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mViewDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        mViewDragHelper.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFinishInflate();</div><div class="line">        mDragView = findViewById(R.id.dragview);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先继承一个LinearLayout,然后在构造函数中调用 <em>init</em> 方法,在里面创建 <em>ViewDragHelper</em> 实例.然后在LinearLayout里面放入一个view,这个view就是我们要拖动的mDragView.运行程序,可以看到在布局中的view是可以在里面随便拖动的,同时也不会被拖出边界外面.是不是很简单呢?下面来分析一下使用方法:</p>
<p>使用ViewDragHelper需要三个步骤:</p>
<ol>
<li>创建ViewDragHelper实例</li>
<li>触摸相关的方法调用,主要包括 <em>shouldInterceptTouchEvent(MotionEvent ev)</em> <em>processTouchEvent(MotionEvent ev)</em> 这两个方法</li>
<li>ViewDragHelper.Callback实例的编写,用来完成各种事件的回调</li>
</ol>
<p>(一) 创建ViewDragHelper实例<br>  ViewDragHelper提供了两个创建方法,分别对应:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewDragHelper <span class="title">create</span><span class="params">(ViewGroup forParent, Callback cb)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ViewDragHelper(forParent.getContext(), forParent, cb);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewDragHelper <span class="title">create</span><span class="params">(ViewGroup forParent, <span class="keyword">float</span> sensitivity, Callback cb)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ViewDragHelper helper = create(forParent, cb);</div><div class="line">    helper.mTouchSlop = (<span class="keyword">int</span>) (helper.mTouchSlop * (<span class="number">1</span> / sensitivity));</div><div class="line">    <span class="keyword">return</span> helper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  两个方法的区别在于第二个方法提供了一个 <em>sensitivity</em> 参数,这个参数用来表示拖动触发的灵敏度,越大便是越灵敏.因为这里 <em>helper.mTouchSlop</em> 是通过 <em>ViewConfiguration</em> 来获得当前设备的最小的触发距离的,距离越小表示越灵敏.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">ViewDragHelper</span><span class="params">(Context context, ViewGroup forParent, Callback cb)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (forParent == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parent view may not be null"</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (cb == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Callback may not be null"</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     mParentView = forParent;</div><div class="line">     mCallback = cb;</div><div class="line"></div><div class="line">     <span class="keyword">final</span> ViewConfiguration vc = ViewConfiguration.get(context);</div><div class="line">     <span class="keyword">final</span> <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</div><div class="line">     mEdgeSize = (<span class="keyword">int</span>) (EDGE_SIZE * density + <span class="number">0.5f</span>);</div><div class="line"></div><div class="line">     mTouchSlop = vc.getScaledTouchSlop();</div><div class="line">     mMaxVelocity = vc.getScaledMaximumFlingVelocity();</div><div class="line">     mMinVelocity = vc.getScaledMinimumFlingVelocity();</div><div class="line">     mScroller = ScrollerCompat.create(context, sInterpolator);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>(二) 触摸相关方法调用<br>  可以看到在继承的LinearLayout中,我们复写了两个触摸事件相关的方法:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mViewDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    mViewDragHelper.processTouchEvent(event);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  首先触摸事件会触发 <em>onInterceptTouchEvent</em> 如果该方法返回true,则表明当前的viewGroup要拦截该触摸事件,那么触摸事件就不会传递给下层的子类view.而是交由自己的 <em>onTouchEvent</em> 方法来处理. 而如果 <em>onInterceptTouchEvent</em> 方法返回false,则事件会传递给子类的 <em>onTouchEvent</em> 方法,如果子类view的 <em>onTouchEvent</em> 什么都没做返回false的话,事件会再次回到viewGroup的 <em>onTouchEvent</em> 方法来处理,反之事件被成功消化,不会回到上层的viewGroup了.这是android触摸事件的传递流程.还有一个 <em>dispatchTouchEvent</em> 方法来决定是否要分发触摸事件,事件的传递会先进入这个方法,然后在这个方法中通过判断 <em>onInterceptTouchEvent</em> 来决定是否要分发事件.</p>
<p>  回头来看这里的用到的触摸回调方法,先是在 <em>onInterceptTouchEvent</em> 方法,通过 <em>mViewDragHelper.shouldInterceptTouchEvent(ev)</em> 来决定是否分发事件给子view,如果这里返回true,就会进入 <em>onTouchEvent</em> 在里面调用 <em>mViewDragHelper.processTouchEvent(event)</em> 这个方法就是用来移动view的核心方法了.</p>
<p>  我们先来看 <em>shouldInterceptTouchEvent</em> 方法:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">          <span class="comment">// Reset things for a new event stream, just in case we didn't get</span></div><div class="line">          <span class="comment">// the whole previous stream.</span></div><div class="line">          cancel();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">          mVelocityTracker = VelocityTracker.obtain();</div><div class="line">      &#125;</div><div class="line">      mVelocityTracker.addMovement(ev);</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (action) &#123;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX();</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY();</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(<span class="number">0</span>);</div><div class="line">              saveInitialMotion(x, y, pointerId);</div><div class="line"></div><div class="line">              <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line"></div><div class="line">              <span class="comment">// Catch a settling view if possible.</span></div><div class="line">              <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mDragState == STATE_SETTLING) &#123;</div><div class="line">                  tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">              <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                  mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(actionIndex);</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line"></div><div class="line">              saveInitialMotion(x, y, pointerId);</div><div class="line"></div><div class="line">              <span class="comment">// A ViewDragHelper can only manipulate one view at a time.</span></div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">                  <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                      mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">                  &#125;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDragState == STATE_SETTLING) &#123;</div><div class="line">                  <span class="comment">// Catch a settling view if possible.</span></div><div class="line">                  <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                  <span class="keyword">if</span> (toCapture == mCapturedView) &#123;</div><div class="line">                      tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">              <span class="keyword">if</span> (mInitialMotionX == <span class="keyword">null</span> || mInitialMotionY == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">              <span class="comment">// First to cross a touch slop over a draggable view wins. Also report edge drags.</span></div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = ev.getPointerCount();</div><div class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(i);</div><div class="line"></div><div class="line">                  <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></div><div class="line">                  <span class="keyword">if</span> (!isValidPointerForActionMove(pointerId)) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(i);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(i);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];</div><div class="line"></div><div class="line">                  <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">boolean</span> pastSlop = toCapture != <span class="keyword">null</span> &amp;&amp; checkTouchSlop(toCapture, dx, dy);</div><div class="line">                  <span class="keyword">if</span> (pastSlop) &#123;</div><div class="line">                      <span class="comment">// check the callback's</span></div><div class="line">                      <span class="comment">// getView[Horizontal|Vertical]DragRange methods to know</span></div><div class="line">                      <span class="comment">// if you can move at all along an axis, then see if it</span></div><div class="line">                      <span class="comment">// would clamp to the same value. If you can't move at</span></div><div class="line">                      <span class="comment">// all in every dimension with a nonzero range, bail.</span></div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = toCapture.getLeft();</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> targetLeft = oldLeft + (<span class="keyword">int</span>) dx;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> newLeft = mCallback.clampViewPositionHorizontal(toCapture,</div><div class="line">                              targetLeft, (<span class="keyword">int</span>) dx);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> oldTop = toCapture.getTop();</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> targetTop = oldTop + (<span class="keyword">int</span>) dy;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> newTop = mCallback.clampViewPositionVertical(toCapture, targetTop,</div><div class="line">                              (<span class="keyword">int</span>) dy);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> horizontalDragRange = mCallback.getViewHorizontalDragRange(</div><div class="line">                              toCapture);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> verticalDragRange = mCallback.getViewVerticalDragRange(toCapture);</div><div class="line">                      <span class="keyword">if</span> ((horizontalDragRange == <span class="number">0</span> || horizontalDragRange &gt; <span class="number">0</span></div><div class="line">                              &amp;&amp; newLeft == oldLeft) &amp;&amp; (verticalDragRange == <span class="number">0</span></div><div class="line">                              || verticalDragRange &gt; <span class="number">0</span> &amp;&amp; newTop == oldTop)) &#123;</div><div class="line">                          <span class="keyword">break</span>;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">                  reportNewEdgeDrags(dx, dy, pointerId);</div><div class="line">                  <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                      <span class="comment">// Callback might have started an edge drag</span></div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">                  <span class="keyword">if</span> (pastSlop &amp;&amp; tryCaptureViewForDrag(toCapture, pointerId)) &#123;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              saveLastMotion(ev);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(actionIndex);</div><div class="line">              clearMotionHistory(pointerId);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</div><div class="line">              cancel();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> mDragState == STATE_DRAGGING;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  可以看到里面还是对触摸事件的那几种基本的类型分别做处理,我们知道事件的触发类型对应: ACTION_DOWN –&gt; ACTION_MOVE –&gt; ACTION_MOVE –&gt; ACTION_UP .同时这里加入了对多点触摸的处理.在上面的 ACTION_DOWN 的判断中,如果当前通过 <em>findTopChildUnder</em> 捕获的view就是之前的移动的view,并且处于释放状态,就重新捕获该view并调整状态.这种情况对应快速拖动之后松开后view会自己滑动一些距离的情况.第一次拖动的时候不会触发.</p>
<p>  下面进入 ACTION_MOVE ,在这里看到顺序获取多个触摸点,如果有没有越界,如果没有问题的话就会 调用 <em>tryCaptureViewForDrag</em> 来捕获要滑动的view,并求改其状态.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryCaptureViewForDrag</span><span class="params">(View toCapture, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mActivePointerId == pointerId) &#123;</div><div class="line">           <span class="comment">// Already done!</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (toCapture != <span class="keyword">null</span> &amp;&amp; mCallback.tryCaptureView(toCapture, pointerId)) &#123;</div><div class="line">           mActivePointerId = pointerId;</div><div class="line">           captureChildView(toCapture, pointerId);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>  该方法又会调用 <em>captureChildView</em> 方法:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureChildView</span><span class="params">(View childView, <span class="keyword">int</span> activePointerId)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (childView.getParent() != mParentView) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"captureChildView: parameter must be a descendant "</span></div><div class="line">                 + <span class="string">"of the ViewDragHelper's tracked parent view ("</span> + mParentView + <span class="string">")"</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     mCapturedView = childView;</div><div class="line">     mActivePointerId = activePointerId;</div><div class="line">     mCallback.onViewCaptured(childView, activePointerId);</div><div class="line">     setDragState(STATE_DRAGGING);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  在这个方法中最后修改view的状态为 <em>STATE_DRAGGING</em> .回到上面的 <em>shouldInterceptTouchEvent</em> 看最后一行的返回条件判断 <em>return mDragState == STATE_DRAGGING;</em> 正好对应这里的修改状态.也就是说当我们手势移动的时候,这里就会认为我们在移动触摸点下面的view,并返回true,方法调用就会进入下面要将的 <em>processTouchEvent</em> 方法了.</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">          <span class="comment">// Reset things for a new event stream, just in case we didn't get</span></div><div class="line">          <span class="comment">// the whole previous stream.</span></div><div class="line">          cancel();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">          mVelocityTracker = VelocityTracker.obtain();</div><div class="line">      &#125;</div><div class="line">      mVelocityTracker.addMovement(ev);</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (action) &#123;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX();</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY();</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(<span class="number">0</span>);</div><div class="line">              <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line"></div><div class="line">              saveInitialMotion(x, y, pointerId);</div><div class="line"></div><div class="line">              <span class="comment">// Since the parent is already directly processing this touch event,</span></div><div class="line">              <span class="comment">// there is no reason to delay for a slop before dragging.</span></div><div class="line">              <span class="comment">// Start immediately if possible.</span></div><div class="line">              tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line"></div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">              <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                  mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(actionIndex);</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">              <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line"></div><div class="line">              saveInitialMotion(x, y, pointerId);</div><div class="line"></div><div class="line">              <span class="comment">// A ViewDragHelper can only manipulate one view at a time.</span></div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;</div><div class="line">                  <span class="comment">// If we're idle we can do anything! Treat it like a normal down event.</span></div><div class="line"></div><div class="line">                  <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                  tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line"></div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">                  <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                      mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">                  &#125;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCapturedViewUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</div><div class="line">                  <span class="comment">// We're still tracking a captured view. If the same view is under this</span></div><div class="line">                  <span class="comment">// point, we'll swap to controlling it with this pointer instead.</span></div><div class="line">                  <span class="comment">// (This will still work if we're "catching" a settling view.)</span></div><div class="line"></div><div class="line">                  tryCaptureViewForDrag(mCapturedView, pointerId);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                  <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></div><div class="line">                  <span class="keyword">if</span> (!isValidPointerForActionMove(mActivePointerId)) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> index = ev.findPointerIndex(mActivePointerId);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(index);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(index);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> idx = (<span class="keyword">int</span>) (x - mLastMotionX[mActivePointerId]);</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> idy = (<span class="keyword">int</span>) (y - mLastMotionY[mActivePointerId]);</div><div class="line"></div><div class="line">                  dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);</div><div class="line"></div><div class="line">                  saveLastMotion(ev);</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// Check to see if any pointer is now over a draggable view.</span></div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = ev.getPointerCount();</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(i);</div><div class="line"></div><div class="line">                      <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></div><div class="line">                      <span class="keyword">if</span> (!isValidPointerForActionMove(pointerId)) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(i);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(i);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];</div><div class="line"></div><div class="line">                      reportNewEdgeDrags(dx, dy, pointerId);</div><div class="line">                      <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                          <span class="comment">// Callback might have started an edge drag.</span></div><div class="line">                          <span class="keyword">break</span>;</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                      <span class="keyword">if</span> (checkTouchSlop(toCapture, dx, dy)</div><div class="line">                              &amp;&amp; tryCaptureViewForDrag(toCapture, pointerId)) &#123;</div><div class="line">                          <span class="keyword">break</span>;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">                  saveLastMotion(ev);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</div><div class="line">              <span class="keyword">final</span> <span class="keyword">int</span> pointerId = ev.getPointerId(actionIndex);</div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_DRAGGING &amp;&amp; pointerId == mActivePointerId) &#123;</div><div class="line">                  <span class="comment">// Try to find another pointer that's still holding on to the captured view.</span></div><div class="line">                  <span class="keyword">int</span> newActivePointer = INVALID_POINTER;</div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = ev.getPointerCount();</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">int</span> id = ev.getPointerId(i);</div><div class="line">                      <span class="keyword">if</span> (id == mActivePointerId) &#123;</div><div class="line">                          <span class="comment">// This one's going away, skip.</span></div><div class="line">                          <span class="keyword">continue</span>;</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(i);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(i);</div><div class="line">                      <span class="keyword">if</span> (findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y) == mCapturedView</div><div class="line">                              &amp;&amp; tryCaptureViewForDrag(mCapturedView, id)) &#123;</div><div class="line">                          newActivePointer = mActivePointerId;</div><div class="line">                          <span class="keyword">break</span>;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">                  <span class="keyword">if</span> (newActivePointer == INVALID_POINTER) &#123;</div><div class="line">                      <span class="comment">// We didn't find another pointer still touching the view, release it.</span></div><div class="line">                      releaseViewForPointerUp();</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              clearMotionHistory(pointerId);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                  releaseViewForPointerUp();</div><div class="line">              &#125;</div><div class="line">              cancel();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</div><div class="line">              <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                  dispatchViewReleased(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">              &#125;</div><div class="line">              cancel();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  这个方法中也是对触摸事件情况的处理,其中的down和up和上面的 <em>shouldInterceptTouchEvent</em> 类似,重点就在 ACTION_MOVE 中,可以发现重点就在 <em>dragTo</em> 方法中:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dragTo</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> clampedX = left;</div><div class="line">     <span class="keyword">int</span> clampedY = top;</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = mCapturedView.getLeft();</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> oldTop = mCapturedView.getTop();</div><div class="line">     <span class="keyword">if</span> (dx != <span class="number">0</span>) &#123;</div><div class="line">         clampedX = mCallback.clampViewPositionHorizontal(mCapturedView, left, dx);</div><div class="line">         ViewCompat.offsetLeftAndRight(mCapturedView, clampedX - oldLeft);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (dy != <span class="number">0</span>) &#123;</div><div class="line">         clampedY = mCallback.clampViewPositionVertical(mCapturedView, top, dy);</div><div class="line">         ViewCompat.offsetTopAndBottom(mCapturedView, clampedY - oldTop);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">final</span> <span class="keyword">int</span> clampedDx = clampedX - oldLeft;</div><div class="line">         <span class="keyword">final</span> <span class="keyword">int</span> clampedDy = clampedY - oldTop;</div><div class="line">         mCallback.onViewPositionChanged(mCapturedView, clampedX, clampedY,</div><div class="line">                 clampedDx, clampedDy);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  可以看到,在这里完成了view的位置移动处理.通过 <em>mCallback</em> 中的各个方法来获取移动范围,并且有个 <em>mCallback.onViewPositionChanged</em> 位置移动的回调. 下面讲一下 <em>callback</em> 的用法.</p>
<p>(三) ViewDragHelper.Callback的用法<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the drag state changes. See the &lt;code&gt;STATE_*&lt;/code&gt; constants</div><div class="line">       * for more information.</div><div class="line">       * 当view的拖拽状态改变时触发,对应下面写的三种情况中一种</div><div class="line">       * <span class="doctag">@param</span> state The new drag state</div><div class="line">       *</div><div class="line">       * <span class="doctag">@see</span> #STATE_IDLE 当前没有被拖拽</div><div class="line">       * <span class="doctag">@see</span> #STATE_DRAGGING 正在别拖拽</div><div class="line">       * <span class="doctag">@see</span> #STATE_SETTLING 被拖拽后需要安置到一个位置中的状态</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the captured view's position changes as the result of a drag or settle.</div><div class="line">       * 当view在拖拽时位置发生变化时触发,对应上面的 dragTo 方法</div><div class="line">       * <span class="doctag">@param</span> changedView View whose position changed</div><div class="line">       * <span class="doctag">@param</span> left New X coordinate of the left edge of the view</div><div class="line">       * <span class="doctag">@param</span> top New Y coordinate of the top edge of the view</div><div class="line">       * <span class="doctag">@param</span> dx Change in X position from the last call</div><div class="line">       * <span class="doctag">@param</span> dy Change in Y position from the last call</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when a child view is captured for dragging or settling. The ID of the pointer</div><div class="line">       * currently dragging the captured view is supplied. If activePointerId is</div><div class="line">       * identified as &#123;<span class="doctag">@link</span> #INVALID_POINTER&#125; the capture is programmatic instead of</div><div class="line">       * pointer-initiated.</div><div class="line">       * 当一个view被捕获时触发</div><div class="line">       * <span class="doctag">@param</span> capturedChild Child view that was captured</div><div class="line">       * <span class="doctag">@param</span> activePointerId Pointer id tracking the child capture</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCaptured</span><span class="params">(View capturedChild, <span class="keyword">int</span> activePointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the child view is no longer being actively dragged.</div><div class="line">       * The fling velocity is also supplied, if relevant. The velocity values may</div><div class="line">       * be clamped to system minimums or maximums.</div><div class="line">       * 当拖拽动作释放时触发</div><div class="line">       * &lt;p&gt;Calling code may decide to fling or otherwise release the view to let it</div><div class="line">       * settle into place. It should do so using &#123;<span class="doctag">@link</span> #settleCapturedViewAt(int, int)&#125;</div><div class="line">       * or &#123;<span class="doctag">@link</span> #flingCapturedView(int, int, int, int)&#125;. If the Callback invokes</div><div class="line">       * one of these methods, the ViewDragHelper will enter &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;</div><div class="line">       * and the view capture will not fully end until it comes to a complete stop.</div><div class="line">       * If neither of these methods is invoked before &lt;code&gt;onViewReleased&lt;/code&gt; returns,</div><div class="line">       * the view will stop in place and the ViewDragHelper will return to</div><div class="line">       * &#123;<span class="doctag">@link</span> #STATE_IDLE&#125;.&lt;/p&gt;</div><div class="line">       *</div><div class="line">       * <span class="doctag">@param</span> releasedChild The captured child view now being released</div><div class="line">       * <span class="doctag">@param</span> xvel X velocity of the pointer as it left the screen in pixels per second.</div><div class="line">       * <span class="doctag">@param</span> yvel Y velocity of the pointer as it left the screen in pixels per second.</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when one of the subscribed edges in the parent view has been touched</div><div class="line">       * by the user while no child view is currently captured.</div><div class="line">       * 当触发了viewGroup的边缘时触发</div><div class="line">       * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) currently touched</div><div class="line">       * <span class="doctag">@param</span> pointerId ID of the pointer touching the described edge(s)</div><div class="line">       * <span class="doctag">@see</span> #EDGE_LEFT</div><div class="line">       * <span class="doctag">@see</span> #EDGE_TOP</div><div class="line">       * <span class="doctag">@see</span> #EDGE_RIGHT</div><div class="line">       * <span class="doctag">@see</span> #EDGE_BOTTOM</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeTouched</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the given edge may become locked. This can happen if an edge drag</div><div class="line">       * was preliminarily rejected before beginning, but after &#123;<span class="doctag">@link</span> #onEdgeTouched(int, int)&#125;</div><div class="line">       * was called. This method should return true to lock this edge or false to leave it</div><div class="line">       * unlocked. The default behavior is to leave edges unlocked.</div><div class="line">       * 是否锁定边缘的触摸</div><div class="line">       * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) locked</div><div class="line">       * <span class="doctag">@return</span> true to lock the edge, false to leave it unlocked</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEdgeLock</span><span class="params">(<span class="keyword">int</span> edgeFlags)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the user has started a deliberate drag away from one</div><div class="line">       * of the subscribed edges in the parent view while no child view is currently captured.</div><div class="line">       * 边缘触摸开始时触发</div><div class="line">       * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) dragged</div><div class="line">       * <span class="doctag">@param</span> pointerId ID of the pointer touching the described edge(s)</div><div class="line">       * <span class="doctag">@see</span> #EDGE_LEFT</div><div class="line">       * <span class="doctag">@see</span> #EDGE_TOP</div><div class="line">       * <span class="doctag">@see</span> #EDGE_RIGHT</div><div class="line">       * <span class="doctag">@see</span> #EDGE_BOTTOM</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called to determine the Z-order of child views.</div><div class="line">       * 在寻找当前的触摸点下的view时会调用这个方法,比如两个子view叠加在一起之后,如果你想获得下面的那个时,可以改写这个方法.</div><div class="line">       * <span class="doctag">@param</span> index the ordered position to query for</div><div class="line">       * <span class="doctag">@return</span> index of the view that should be ordered at position &lt;code&gt;index&lt;/code&gt;</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderedChildIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> index;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Return the magnitude of a draggable child view's horizontal range of motion in pixels.</div><div class="line">       * This method should return 0 for views that cannot move horizontally.</div><div class="line">       * 获取被拖拽view的水平移动范围</div><div class="line">       * <span class="doctag">@param</span> child Child view to check</div><div class="line">       * <span class="doctag">@return</span> range of horizontal motion in pixels</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Return the magnitude of a draggable child view's vertical range of motion in pixels.</div><div class="line">       * This method should return 0 for views that cannot move vertically.</div><div class="line">       * 获取被拖拽view的垂直移动范围</div><div class="line">       * <span class="doctag">@param</span> child Child view to check</div><div class="line">       * <span class="doctag">@return</span> range of vertical motion in pixels</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Called when the user's input indicates that they want to capture the given child view</div><div class="line">       * with the pointer indicated by pointerId. The callback should return true if the user</div><div class="line">       * is permitted to drag the given view with the indicated pointer.</div><div class="line">       *</div><div class="line">       * &lt;p&gt;ViewDragHelper may call this method multiple times for the same view even if</div><div class="line">       * the view is already captured; this indicates that a new pointer is trying to take</div><div class="line">       * control of the view.&lt;/p&gt;</div><div class="line">       * 尝试捕获当前触摸的view</div><div class="line">       * &lt;p&gt;If this method returns true, a call to &#123;<span class="doctag">@link</span> #onViewCaptured(android.view.View, int)&#125;</div><div class="line">       * will follow if the capture is successful.&lt;/p&gt;</div><div class="line">       *</div><div class="line">       * <span class="doctag">@param</span> child Child the user is attempting to capture</div><div class="line">       * <span class="doctag">@param</span> pointerId ID of the pointer attempting the capture</div><div class="line">       * <span class="doctag">@return</span> true if capture should be allowed, false otherwise</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Restrict the motion of the dragged child view along the horizontal axis.</div><div class="line">       * The default implementation does not allow horizontal motion; the extending</div><div class="line">       * class must override this method and provide the desired clamping.</div><div class="line">       * 限制水平方向的移动范围</div><div class="line">       *</div><div class="line">       * <span class="doctag">@param</span> child Child view being dragged</div><div class="line">       * <span class="doctag">@param</span> left Attempted motion along the X axis</div><div class="line">       * <span class="doctag">@param</span> dx Proposed change in position for left</div><div class="line">       * <span class="doctag">@return</span> The new clamped position for left</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Restrict the motion of the dragged child view along the vertical axis.</div><div class="line">       * The default implementation does not allow vertical motion; the extending</div><div class="line">       * class must override this method and provide the desired clamping.</div><div class="line">       * 限制垂直方向的移动范围</div><div class="line">       *</div><div class="line">       * <span class="doctag">@param</span> child Child view being dragged</div><div class="line">       * <span class="doctag">@param</span> top Attempted motion along the Y axis</div><div class="line">       * <span class="doctag">@param</span> dy Proposed change in position for top</div><div class="line">       * <span class="doctag">@return</span> The new clamped position for top</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>  ViewDragHelper的内部流程实现就讲完了,有些细节这里就不展开了,感兴趣的同学可以读一下源码.在额外补充ViewDragHelper的常用方法 <em>settleCapturedViewAt</em> :<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">settleCapturedViewAt</span><span class="params">(<span class="keyword">int</span> finalLeft, <span class="keyword">int</span> finalTop)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!mReleaseInProgress) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot settleCapturedViewAt outside of a call to "</span></div><div class="line">                   + <span class="string">"Callback#onViewReleased"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> forceSettleCapturedViewAt(finalLeft, finalTop,</div><div class="line">               (<span class="keyword">int</span>) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),</div><div class="line">               (<span class="keyword">int</span>) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>  这个方法,用来直接把拖动的view放在指定的位置上.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">forceSettleCapturedViewAt</span><span class="params">(<span class="keyword">int</span> finalLeft, <span class="keyword">int</span> finalTop, <span class="keyword">int</span> xvel, <span class="keyword">int</span> yvel)</span> </span>&#123;</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> startLeft = mCapturedView.getLeft();</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> startTop = mCapturedView.getTop();</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> dx = finalLeft - startLeft;</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> dy = finalTop - startTop;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">0</span>) &#123;</div><div class="line">         <span class="comment">// Nothing to do. Send callbacks, be done.</span></div><div class="line">         mScroller.abortAnimation();</div><div class="line">         setDragState(STATE_IDLE);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);</div><div class="line">     mScroller.startScroll(startLeft, startTop, dx, dy, duration);</div><div class="line"></div><div class="line">     setDragState(STATE_SETTLING);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  可以看到这里通过Scroller来完成view的平滑移动的.这个方法 <em>settleCapturedViewAt</em> 在拖动view释放之后让view进入指定位置的时候会非常有用.<br>  注意:一定要在viewGroup调用如下方法来完成view的平滑移动,在调用 <em>settleCapturedViewAt</em> 方法的时候.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.computeScroll();</div><div class="line">    <span class="keyword">if</span> (mDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</div><div class="line">        ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ViewDragHelper源码分析&quot;&gt;&lt;a href=&quot;#ViewDragHelper源码分析&quot; class=&quot;headerlink&quot; title=&quot;ViewDragHelper源码分析&quot;&gt;&lt;/a&gt;ViewDragHelper源码分析&lt;/h2&gt;&lt;p&gt;在学习第三方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;刻意练习&gt;读书笔记</title>
    <link href="http://pheobusyy.github.io/2017/02/06/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%3C%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%3E%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://pheobusyy.github.io/2017/02/06/2017/读书笔记/&lt;刻意练习&gt;读书笔记/</id>
    <published>2017-02-06T08:09:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-刻意练习-gt-读书笔记"><a href="#lt-刻意练习-gt-读书笔记" class="headerlink" title="&lt;刻意练习&gt;读书笔记"></a>&lt;刻意练习&gt;读书笔记</h2><p>刻意练习的难度要适中,能收到反馈,有足够的次数重复练习,学习者能纠正自己的错误.</p>
<ul>
<li>输入-解码-处理-编码-输出-反馈-输入</li>
</ul>
<p>人们的学习受到情景的制约或促进.你要学习的东西将实际运用在什么情景中,那么你就应该在什么样的情境中学习这些东西.</p>
<ul>
<li>要学有所用,不能脱离实际</li>
</ul>
<p>学习科学大量研究表明,成人的最佳学习方式并非独自学习,而是在情景中学习.</p>
<ul>
<li>要明白学习的目的是什么,带着要解决的问题学习</li>
</ul>
<h3 id="有目的的练习"><a href="#有目的的练习" class="headerlink" title="有目的的练习"></a>有目的的练习</h3><p>有目的练习的四个特点:</p>
<ol>
<li>有目的练习具有定义明确的特定目标</li>
<li>有目的的练习是专注的</li>
<li>有目的的练习包含反馈<br>不论你在努力做什么事情,都需要反馈来准确辨别你在哪些方面还有不足,以及怎么会存在这些不足</li>
<li>有目的的练习需要走出舒适区<br>对于任何类型的练习,这是一条基本的真理:如果你从不迫使你走出舒适区,便永远无法进步.</li>
</ol>
<ul>
<li>两个很重要的关键词,一个是 <em>反馈</em> 一个是 <em>舒适区</em> .前者用来衡量练习效果并加以校正,后者是保证练习效果持续进步的必要条件  </li>
</ul>
<h3 id="遇到瓶颈怎么办"><a href="#遇到瓶颈怎么办" class="headerlink" title="遇到瓶颈怎么办"></a>遇到瓶颈怎么办</h3><ol>
<li>试着做不同的事情,而非更难的事情<br>通常情况下,逾越障碍的方法并不是”试着做更难的事情”,而是”试着做不同的事情”.</li>
</ol>
<ul>
<li><p>遇到困难的时候要讲究不同的策略,不要一直正面突破</p>
<p>不管遇到什么障碍,越过它的最好办法是从不同的方向想办法,这也是这种方法需要导师或者教练的一个原因.有些人已经熟悉你可能遇到的障碍,于是可以为你提供克服障碍的方法.</p>
</li>
<li><p>师傅或者教练的重要性,毕竟经历过的人知道正确的或者失败处理方式.</p>
</li>
</ul>
<ol>
<li><p>并非达到极限,而是动机不足</p>
<p>要想有动机,需要两个因素:一个是报酬,一个是勇于自我挑战</p>
</li>
</ol>
<p>我们在这里简单地总结有目的的练习:走出你的舒适区,但要以专注的方式制定明确的目标,未达到那些目标制定一个计划,并且想出检测你进步的方法.哦,还要想办法保持你的动机.</p>
<ul>
<li>上面讲的就是练习的基本要求,带着目的或者问题,明白标准在哪里,给自己压力.不断的保持前进</li>
</ul>
<h3 id="为什么要走出舒适区"><a href="#为什么要走出舒适区" class="headerlink" title="为什么要走出舒适区"></a>为什么要走出舒适区</h3><p>这就是体育锻炼制造身体变化的一般模式.当身体的系统(比如某些肌肉,心血管系统或者其他系统)感受到压力,一直与原来的体内平衡无法继续保持下去时,身体便会开始响应那些变化,目的是重新建立体内平衡.</p>
<p>足够努力的锻炼,并且保持足够长的时间,那么,身体将以各种方式来改变,使得那种努力更容易.</p>
<p>要是改变不断进行下去,你必须不断的加码:跑的更远一些,更快一些,并且爬坡跑.</p>
<ul>
<li>肌肉在压力下不断的撕裂不断重塑,身体在不断适应锻炼的强度,这样才会变得更加健康.</li>
</ul>
<h3 id="大脑的适应能力"><a href="#大脑的适应能力" class="headerlink" title="大脑的适应能力"></a>大脑的适应能力</h3><p>三个重要细节:</p>
<ol>
<li>训练对大脑的影响(越早训练越容易改变)</li>
<li>通过超长时间的训练来发展大脑中的某些部位,可能得付出一些代价.(一方面的增强就会又另一方面的减弱)</li>
<li>由训练引起的认知和生理变化需要继续保持(如果停止训练,他们便开始消失)</li>
</ol>
<p>传统的方法并不是专门用于挑战体内平衡的.</p>
<p>对于刻意练习,我们的目标不仅仅是发觉自己的潜能,而是要构筑它,以便从前不可能做到的事情变得可能做到.这要求挑战体内平衡,也就是走出你的舒适区,并迫使你的大脑或身体来适应.一点你做到这一点,学习便不再只是执行某些遗传命运的方式;它变成一种控制你自己命运的方式,就是一种按照你选择的方法构筑潜力的方式.</p>
<h3 id="心理表征是是什么-非常重要"><a href="#心理表征是是什么-非常重要" class="headerlink" title="心理表征是是什么(非常重要)"></a>心理表征是是什么(非常重要)</h3><p>心理表征是一种与我们大脑正在思考的某个物体,某个观点,某些信息后者其他任何事物相对应的心里结构,或具体或抽象.</p>
<ul>
<li>我个人理解的心理表征是指对某个东西的内在影像,也就是一个东西在你大脑中是什么样子的.如果是不太熟悉的东西应该是大概轮廓,如果是熟悉的东西应该它的各种属性,使用方法等等相关的维度分析.如果是概念的话应该是语言描述或个人看法.</li>
</ul>
<p>刻意练习包括创建心理表征</p>
<ul>
<li>刻意练习包括创建事物在脑海中概念,也包括调整优化脑海中对东西的使用方式</li>
</ul>
<p>将杰出人物与其他人区分开来的因素,正式前者的心理表征的质量与数量</p>
<p>心理表征有助于解释信息,心理表征的一个重要好处在于,可以帮助我们处理信息:理解和解读它,把它保存在记忆之中,组织它,分析它,并用它来决策.</p>
<p>精心创建的心理表征的一个主要优势是:你可以立即吸收和考虑更多的信息.</p>
<p>在对杰出人物的研究之中,出色地组织信息是反复出现的主题.</p>
<p>刻意练习的主要目的是创建有效的心理表征,心理表征反过来再刻意练习中发挥着重要的作用.</p>
<p>他们检测并评估自己的技能水平,在必要时调整心理表征,使之更加有效.心理表征越有效,水平也越优异.</p>
<p>学生之间的差别,在很大程度上最有可能取决于他们能有多敏锐地察觉自己所犯的错误,也就是说,他们对音乐作品的心理表征有多么有效.</p>
<ul>
<li>与高手招式之间的差距</li>
</ul>
<p>磨砺了技能,可以改善心理表征;而更变心理表征,也有助于磨砺技能.</p>
<p>这类似于一遍盘爬楼梯,一遍搭建新的阶梯.你攀爬的每一步阶梯,都让你来到了需要搭建新阶梯的地方.然后,你搭建了新的阶梯,爬上去之后,你有得准备搭建下一步阶梯了.</p>
<h3 id="黄金标准"><a href="#黄金标准" class="headerlink" title="黄金标准"></a>黄金标准</h3><p>最杰出的人是那些在各种有目的的联系中花了最多时间的人</p>
<p>首先辨别出杰出人物,然后推测是什么使他们变得如此杰出,接着再提出训练方法,这些方法使你也能像他们那样表现卓越.</p>
<p>在任何一个有着悠久历史的行业或领域,要想成就一番事业,致力于变成业内的杰出人士,需要付出多年艰苦卓绝的努力.</p>
<h3 id="在工作中运用刻意练习原则"><a href="#在工作中运用刻意练习原则" class="headerlink" title="在工作中运用刻意练习原则"></a>在工作中运用刻意练习原则</h3><p>如果你没有进步,并不是你缺少天赋,而是因为你没有用正确的方法练习.</p>
<p>传统的方法一直是先找出关于正确方法的信息,然后让学生运用那些知识.刻意学习则只聚焦于绩效和表现,以及怎样提高绩效和表现.</p>
<h3 id="在生活中运用刻意练习原则"><a href="#在生活中运用刻意练习原则" class="headerlink" title="在生活中运用刻意练习原则"></a>在生活中运用刻意练习原则</h3><p>如果你在走神,或者你很放松,并且只是为了好玩,你可能不会进步.</p>
<p>学会以这种方式投入,即有意地提升和精进你的技能,是提高训练效果的最强大的方式.</p>
<p>制定明确的目标,把练习课程的时间缩的更短,是更加迅速地提升新的技能水平的最佳方式.</p>
<p>反复做一件事情,目的是找出你在哪些方面存在不足,并且聚焦于在那些方面取得进步,试着采用不同的方法来提高,知道你最终找到适合自己的方法.</p>
<p>专注(focus),反馈(feedback)以及纠正(fix).将技能分解成一些组成部分,一边反复的练习,并且有效的分析,确定你的不足之处,然后想出各种方法来解决它们.</p>
<h4 id="保持动机的两个组成部分"><a href="#保持动机的两个组成部分" class="headerlink" title="保持动机的两个组成部分"></a>保持动机的两个组成部分</h4><p>保持这种推行此类体制运行下去的动机,包括两个组成部分:继续前进的理解和停下脚步的理由.</p>
<p>你要保持动机,要么强化继续前进的理由,要么弱化停止脚步的理由.</p>
<ol>
<li><p>弱化停下脚步的理由<br>人们可以采用多种方式来弱化停下脚步的理由.其中最有效的一种是留出固定时间来练习,不收所有其他义务和分析的事情所干扰.<br>要找出那些可能干扰你练习的事情,并想办法将影响控制在最小.</p>
<p>杰出人物往往做两件有益的事情,他们看起来视乎与动机无关.第一件事一般的身体保养:保证充足的睡眠并保持健康.如果你疲倦了或生病了,就更难保持专注,更易分心走神.<br>第二件是讲练习课的时间限制在1小时左右.如果比那个时间长的多,你将无法保持高度的专注.</p>
</li>
<li><p>增强继续前行的倾向<br>一旦你已经练习了一段时间,并且可以看到结果了,这种技能本身就可以成为你动机的一部分.</p>
</li>
</ol>
<p>外部动机的一种最强烈的方式是社会动机.这可能以几种表现出来.最简单最有效的是其他人的认可和崇拜.</p>
<p>将对同一件事情感兴趣的所有人聚集起来,或者吸引他们加入一个现有的团体,并且将团体的同志情谊和共同的目标作为打到你自己目标的额外动力.</p>
<ol>
<li><p>精心设置目标</p>
<p>将漫长的旅程分解为一系列可控的目标,并且每次只关注他们中的一个,甚至可以在每次达到一个目标时,给自己小小的奖励.</p>
</li>
</ol>
<h3 id="成为杰出人物路线图"><a href="#成为杰出人物路线图" class="headerlink" title="成为杰出人物路线图"></a>成为杰出人物路线图</h3><p>第一阶段:产生兴趣<br>第二阶段:变得认真<br>第三阶段:全力投入<br>第四阶段:开拓创新</p>
<h3 id="怎样解释天生才华"><a href="#怎样解释天生才华" class="headerlink" title="怎样解释天生才华"></a>怎样解释天生才华</h3><p>从长远来看,占上风的是那些练习更加勤奋的人,而不是那些一开始在智商或者其他才华方面稍有优势的人.</p>
<h3 id="用刻意练习创造全新的世界"><a href="#用刻意练习创造全新的世界" class="headerlink" title="用刻意练习创造全新的世界"></a>用刻意练习创造全新的世界</h3><p>所谓”练习人”,是反映人在一生之中能够通过练习掌握自己的命运,使得人生充满各种可能.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-刻意练习-gt-读书笔记&quot;&gt;&lt;a href=&quot;#lt-刻意练习-gt-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;刻意练习&amp;gt;读书笔记&quot;&gt;&lt;/a&gt;&amp;lt;刻意练习&amp;gt;读书笔记&lt;/h2&gt;&lt;p&gt;刻意练习的难度要适中,能收到反馈
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;小狗钱钱&gt;读书笔记</title>
    <link href="http://pheobusyy.github.io/2017/02/06/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%3C%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1%3E%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://pheobusyy.github.io/2017/02/06/2017/读书笔记/&lt;小狗钱钱&gt;读书笔记/</id>
    <published>2017-02-06T07:14:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-小狗钱钱-gt-读书笔记"><a href="#lt-小狗钱钱-gt-读书笔记" class="headerlink" title="&lt;小狗钱钱&gt;读书笔记"></a>&lt;小狗钱钱&gt;读书笔记</h2><p>“并非困难使我们放弃,而是因为我们放弃,才显得如此困难.”</p>
<p>“天下难事,必作于易;天下大事,必作于细.” - 老子</p>
<p>“大多数人并不清楚自己想要什么,他们只知道,自己想得到更多的东西.你可以把自己的生活想象成一家很大的邮购公司.如果你给一家邮购公司写信说’请给我寄一些好东西来’,你肯定什么也得不到.我们的愿望也是一样的.我们必须确切知道自己内心渴望的是什么才行.”</p>
<ul>
<li>目标的明确性很重要,如果只是一个空洞的概念或愿景,是很难有动力去实现的,也无法明确的知道如何去实现,以及最终的实现的效果是什么样的.</li>
</ul>
<p>“不要试试看,而是去切实行动!如果你只是抱着试试看的心态,那么你只会以失败而告终,你会一事无成.’尝试’纯粹是一种借口,你还没有做,就已经给自己想好了退路.不能实验,你只有两个选择—做或者不做.”</p>
<ul>
<li>‘试试’是一种不自信的表现,是自我推脱的借口,意味着自己并没有准备好全力以赴.要么不做,要做就要尽全力.做人要活的洒脱大气</li>
</ul>
<p>“学习就是认识新观念和新想法的工程.假如人们始终以同一种思维方式来思考问题的话,那么始终只会得到同样的结果.因为我对你讲述的许多内容是你以前从未接触过的,所以我建议你,在你还没有做之前,不要轻易的下结论.没有想象力的人很难成就大事的.我们对一件事投入的精力越多,成功的可能性越大.可是大多数人把精力放在自己并不喜欢的事情上,而不去想象自己希望得到的东西.”</p>
<ul>
<li><p>大多数人甚至都不知道自己真正喜欢的是什么.没有尝试过,没有走出去舒适圈,你永远不知道外面的世界是什么样的.走出去意味着可能,原地踏步只会困死在原地.做一辈子平凡的人.回想自己之前不敢换工作,就是不敢迈出那一步而已,虽然到现在也不知道自己到底喜欢的是什么,但是最起码意识到了这个问题,并且在通过读书学习来慢慢的找到喜欢的东西,这就是最大的进步.</p>
</li>
<li><p>在没有做之前不要一概否定,不试试怎么知道行不行呢?</p>
</li>
<li><p>对一件事投入的精力越大,越有可能成功</p>
</li>
</ul>
<p>“有一只海鸥曾经对我说过’在你展翅飞翔之前,你就必须相信自己能够到达目的地.’你必须设想自己拥有了这些东西,这样你的一个小愿望才会变成一种强烈的渴望.你想象的越多,你的愿望就越强烈,那么你就会开始寻找机会来实现自己的梦想.吉娅,机会到处都是,但是只有在你寻找它的时候,你才能看见它.只有当你心中有了强烈的渴望,你才会去寻觅机会.而当你想象的时候,强烈的渴望就产生了.”</p>
<ul>
<li>要自信,相信自己可以得到自己想要的.对未来想象的越清晰,越有动力和激情去实现.</li>
</ul>
<p>“你的自信程度决定了你是否相信自己的能力,是否相信你自己.假如你根本不相信你能做到的话,那么你就根本不会动手去做,而加入你不开始去做,那么你就什么也得不到.”</p>
<ul>
<li>相信自己可以,就一定可以.自我的不断催眠,可以让自己更加的自信强大</li>
</ul>
<p>“你去准备一个本子,给它取名叫’成功日记’,然后把所有做成功的事情记录进去.你最好每天都做这件事,每次都写至少5条你的个人成功,任何小事都可以.开始的时候你觉得不太容易,可能会问自己,这件或那件事情是否真的可以算作成果.在这种情况下,你的回答应该是肯定的.过于自信比不够自信要好得多.”</p>
<ul>
<li>修改一下每日总结的模板,把下面的那个每天三件事改成成功日记.记录自己每天做成功的事情.</li>
</ul>
<p>“商人给了他两个重要的建议:第一,为别人解决一个难题,那么你就可以赚很多的钱;第二,把精力集中在你知道的,能做的和拥有的东西上.”</p>
<ul>
<li>致富的秘诀就在于帮别人解决问题,从自己拥有的技能思想或者身边的资源入手.利用信息不对等法则.</li>
</ul>
<p>“但是,我想提醒你两件重要的事情.第一,无论什么时候都不要把希望只寄托在一份工作上,它持续的时间不会像你设想的那么长,所以你要立即寻找另一份替代的工作.第二,你肯定会遇到一些困难,这些困难是你现在还难以预料的.”</p>
<ul>
<li>鸡蛋不要放在同一个篮子里,要有不同的求胜技能.增加适应风险的能力,墨菲定律,比如车子被剐蹭不可避免,要做好应对措施.</li>
</ul>
<p>“我要告诉你三件很重要的事情.首先,在遇到困难的时候,仍然要坚持自己的想法.一些正常的时候,每个人都能做到这一点.只有当真正困难出现时才能见分晓.只有少数人能坚定不移地贯彻自己的计划.那么非常成功的人,甚至有能力在他们最困难的时候作出最杰出的表现.第二点,在一切进展顺利的情况下,你也应该做这些事情.每天记录自己的成功.最后,当你决定做一件事情的时候,你必须在72小时之内完成,否则你很可能永远不会再做了.”</p>
<ul>
<li>“风生水起才知天高云淡,沧海横流方显英雄本色”</li>
<li>遭遇挫折时要坚持自己的想法,顺利更要坚持自己的想法.宠辱不惊</li>
<li>72小时完成</li>
</ul>
<p>“所有的消费贷款都是不明智的.聪明的做法只把以前积累起来的财富用于支出.”</p>
<ul>
<li><p>对应&lt;穷爸爸,富爸爸&gt;里面的资产和负债的区别.只有用利息购买的东西才是真正的支出.</p>
</li>
<li><p>在购买东西之前,认真的问问自己”这真的有必要吗?”</p>
</li>
</ul>
<p>“金钱能成为我们生活中非常强大的推理.金钱可以在一定程度上提高我们的生活水平-生活的许多方面都是以钱为基础的.有了钱,我们更容易的实现我们的目标和梦想-当然,包括好的目标和梦想,也包括坏的目标和梦想.”</p>
<ul>
<li>很多人都把金钱和梦想的关系给颠倒了.是先有钱再去实现梦想才对.而不是把梦想和钱挂钩.好比工作只是用来养家糊口的,事业才是真正实现梦想的途径.</li>
</ul>
<p>“我生命中出现了最美好的东西,是因为我做了原本不敢做的事.”<br>“最珍贵的礼物是我们争取来的.克服了丢面子的恐惧,世界就会向你敞开大门.”</p>
<ul>
<li>勇敢的迈出那一步,会收获很多惊喜</li>
</ul>
<p>“成功会使人骄傲.如果你骄傲自大,你就会停止学习.不学习,人就不会再进步.”</p>
<ul>
<li>永远要不断的学习,不断的进步.</li>
</ul>
<p>“恐惧总是出现在我们设想事情会如何不顺利的时候.我们的失败的可能性想的越多,就会越害怕.而当你看着自己的成功日记的时,你就会注意到那些成功的事情,自然而然也就会想到应该怎样去做.”<br>“当你朝着积极地目标去思考的时候,就不会心生畏惧.”</p>
<ul>
<li>我们唯一恐惧就是恐惧本身.回头想想大多数我们担心的事情都没有发生过.同时即使失败了后果也没有我们想到那么严重.</li>
</ul>
<p>“我们的咒语是:</p>
<ol>
<li>确定自己希望获得财务上的成功.</li>
<li>自信,有想法,做自己喜欢的事.</li>
<li>把钱分为日常开销,梦想目标和金鹅账户三部分.</li>
<li>进行明智的投资</li>
<li>享受生活.<br>“</li>
</ol>
<ul>
<li>对待财富的态度和处理方法就是上面说的5个方式.</li>
</ul>
<p>“不要为失去的东西而忧伤,而要对拥有它的时光心存感激.对我来说,这句话的意思是:从现在开始,我再也得不到钱钱的建议了,但我还是必须应对各种情况.”</p>
<ul>
<li>要学会感恩,感谢现在自己拥有的一切.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-小狗钱钱-gt-读书笔记&quot;&gt;&lt;a href=&quot;#lt-小狗钱钱-gt-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;小狗钱钱&amp;gt;读书笔记&quot;&gt;&lt;/a&gt;&amp;lt;小狗钱钱&amp;gt;读书笔记&lt;/h2&gt;&lt;p&gt;“并非困难使我们放弃,而是因为我
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>启示录-打造用户喜爱的产品</title>
    <link href="http://pheobusyy.github.io/2017/01/24/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%90%AF%E7%A4%BA%E5%BD%95-%E6%89%93%E9%80%A0%E7%94%A8%E6%88%B7%E5%96%9C%E7%88%B1%E7%9A%84%E4%BA%A7%E5%93%81/"/>
    <id>http://pheobusyy.github.io/2017/01/24/2017/读书笔记/启示录-打造用户喜爱的产品/</id>
    <published>2017-01-24T06:03:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启示录-打造用户喜爱的产品-读书笔记"><a href="#启示录-打造用户喜爱的产品-读书笔记" class="headerlink" title="启示录-打造用户喜爱的产品 读书笔记"></a>启示录-打造用户喜爱的产品 读书笔记</h2><p>我的日常工作明确分为三个部分: 人员,流程,产品</p>
<ul>
<li>人员是指负责定义和开发产品的团队成员的角色和职责</li>
<li>流程是指探索,开发富有创意的产品时,反复应用的步骤和成功的实践经验</li>
<li>产品是指富有创意的产品具有的鲜明特性</li>
</ul>
<h3 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h3><p>产品经理的主要职责分为两项: 评估产品机会;定义要开发的产品</p>
<p>现代软件的产品团队组成:</p>
<ul>
<li>产品经理</li>
<li>用户体验设计师</li>
<li>项目管理人员</li>
<li>开发团队</li>
<li>运维团队</li>
<li>产品营销人员</li>
</ul>
<p>必须清晰的界定产品经理和产品营销人员的职责.产品经理负责详细定义待开发的产品,让真实的用户测试产品.产品营销人员负责向外界宣传和推广产品,负责产品发布,为拓展市场销售渠道,组织重点营销活动(如在线营销),促进产品销售提供支持.</p>
<p>产品管理通常使用了 <em>并行开发</em> 和 <em>火车模型发布模式</em></p>
<p>优秀产品经理身上的7个特点:</p>
<ol>
<li>工作紧迫感</li>
<li>善于捕捉问题</li>
<li>思路清晰</li>
<li>用数据说话</li>
<li>果断</li>
<li>判断力</li>
<li>态度</li>
</ol>
<p>用户体验设计包含的方面:</p>
<ul>
<li>用户研究</li>
<li>交互设计</li>
<li>视觉设计</li>
<li>原型制作</li>
</ul>
<p>如果产品没有市场价值,那么无论开发团队多么优秀也无济于事.很多优秀的产品是程序员抓住用户需求,自己创业研发出来的.放宽眼界不仅仅有利于开发人员自己的职业发展,也有利于产品,顾客和公司.</p>
<p>关于留出时间调整代码的参考建议:</p>
<ol>
<li>针对开发团队确定的产品修改目标制定切实可行的计划和时间表</li>
<li>只要有可能,最好把重写目标分成几大块,实现递增修改,让用户感受到产品的改进,哪怕会因此把九个月的工作时间延长到两年,也一定要采用这种方式.</li>
<li>由于开发用户可见功能的资源有限,必须谨慎悬着正确的产品特性,确保产品定义的正确性</li>
</ol>
<p>产品经理应该有的特质:</p>
<ol>
<li>对产品的热情</li>
<li>用户立场</li>
<li>智力</li>
<li>职业操守</li>
<li>正直</li>
<li>信心</li>
<li>态度</li>
<li>技能</li>
<li>运用技术的能力</li>
<li>注意力</li>
<li>时间管理</li>
<li>沟通技能</li>
<li>商业技能</li>
</ol>
<p>产品总监的关键职责有两个方面.第一,组建优秀的产品经理团队.第二,规划公司的全局产品战略.</p>
<p><em>永远不要告诉别人怎么做,告诉他们做什么,他们自然会发挥天赋,给你惊喜. -巴顿</em></p>
<p>一定问明白客户”要做什么?” 而不是 “怎么做?”</p>
<p>管理上司的十条经验</p>
<ol>
<li>为项目波动做好准备</li>
<li>注意沟通的方式和频率</li>
<li>会前沟通</li>
<li>多用建议,少提问题</li>
<li>向上司借力</li>
<li>充分准备</li>
<li>缩短邮件篇幅</li>
<li>多用数据和事实说话</li>
<li>内部宣传</li>
<li>做让领导省心的员工</li>
</ol>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>  为了评估产品机会,我要求产品经理回答如下是个问题:</p>
<ol>
<li>产品要解决什么问题? (产品价值)</li>
<li>为谁解决这个问题? (目标市场)</li>
<li>成功的机会有多大? (市场规模)</li>
<li>怎样判断产品成功与否? (度量指标)</li>
<li>有哪些同类产品? (竞品格局)</li>
<li>为什么我们最适合做这个产品? (竞争优势)</li>
<li>时机合适吗? (市场时机)</li>
<li>如何把产品推向市场? (营销组合策略)</li>
<li>成功的必要条件是什么? (解决方案要满足的条件)</li>
<li><p>根据以上问题,给出评估结论. (继续或放弃)</p>
<p>产品探索:采用流水线方式并行开发产品.也就是说,一点1.0产品进入项目执行阶段,就开始定义2.0版本的产品.</p>
</li>
</ol>
<h4 id="产品原则-确定什么最重要"><a href="#产品原则-确定什么最重要" class="headerlink" title="产品原则:确定什么最重要"></a>产品原则:确定什么最重要</h4><p>  每次加入新团队,我要做的第一件事就是制定产品原则.制定产品原则意味着决定什么重要,什么不重要,哪些原则是根本的,战略性的,哪些是临时的,战术性的.</p>
<p>  制定产品原则时容易出现两类错误.第一类是原则过于空泛,失去了指导作用.第二类是把设计原则误当成产品原则,比如,为用户提供清晰的导航路径(方便用户完成下一步操作)属于常见的设计原则,不是产品原则.</p>
<p>  在作产品决策之前,应该先确定决策要解决什么问题,让大家在一下几个要点上达成共识:</p>
<ol>
<li>究竟要解决什么问题</li>
<li>要为哪类人物角色解决这个问题</li>
<li>产品要达到什么目标</li>
<li>每项目标的优先级是什么</li>
</ol>
<h4 id="市场调研的工具和方法"><a href="#市场调研的工具和方法" class="headerlink" title="市场调研的工具和方法"></a>市场调研的工具和方法</h4><ul>
<li>用户调查</li>
<li>产品使用分析</li>
<li>数据挖掘</li>
<li>拜访用户</li>
<li>人物角色</li>
<li>可用性测试</li>
<li>同类产品分析</li>
</ul>
<p>合理的利用市场调研工具和方法可以回答一下几个关键问题:</p>
<ol>
<li>谁是目标用户?</li>
<li>用户会怎样使用产品?</li>
<li>用户能想明白怎样使用产品吗?障碍在哪里?</li>
<li>用户为什么选用你的产品?</li>
<li>用户喜欢产品的哪些特点?</li>
<li>用户希望如何改进产品,增加哪些功能?</li>
</ol>
<p>成功的产品基于以下两点认识:深入理解用户需求,以及明白什么样的解决方案在现阶段是可行的.</p>
<p>基本产品:定义最满足基本要求(价值,可用性,可行性)的产品.</p>
<p>设计产品时一定要考虑哪些功能是最重要的,争取设计出只满足基本要求的,不可删减的产品.</p>
<h4 id="改进现有产品"><a href="#改进现有产品" class="headerlink" title="改进现有产品"></a>改进现有产品</h4><p>能提高指标的功能才是你关注的重点.你应该找准方向,分析关键指标,有正对性的改进产品.</p>
<h4 id="快速响应阶段"><a href="#快速响应阶段" class="headerlink" title="快速响应阶段"></a>快速响应阶段</h4><p>关键不在于是否会出现问题,而在于能 <em>多快</em> 解决问题.</p>
<h4 id="在大公司施展拳脚"><a href="#在大公司施展拳脚" class="headerlink" title="在大公司施展拳脚"></a>在大公司施展拳脚</h4><ol>
<li>了解公司制定决策的方式</li>
<li>建立人脉网络</li>
<li>臭鼬工程</li>
<li>自己顶上</li>
<li>有选择的据理力争</li>
<li>会前沟通,形成默契</li>
<li>合理分配时间</li>
<li>分享信息</li>
<li>向上司借力</li>
<li>传播你的产品理念</li>
</ol>
<h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><h4 id="新技术层出不穷"><a href="#新技术层出不穷" class="headerlink" title="新技术层出不穷"></a>新技术层出不穷</h4><p>成功的产品往往不是新鲜事物,只是新瓶装老酒,之所以成功,是因为这个”新瓶”做的更好,更方便,更便宜,改变了消费者对”老酒”的印象.</p>
<p>现在成熟的市场上抢占一席之地,精明的公司至少要手握2两件”法宝”:</p>
<ol>
<li>对目标市场的了如指掌,对现有产品的缺陷洞若观火.</li>
<li>跟踪最新的技术趋势</li>
</ol>
<h4 id="情感接纳曲线"><a href="#情感接纳曲线" class="headerlink" title="情感接纳曲线"></a>情感接纳曲线</h4><p>根据消费者的情感特征,把他们分为技术爱好者,非理性消费者,理性消费者,超理性消费者和观望者.</p>
<p>非理性消费者最值得产品经理注意.</p>
<p>如果你带着新生的感觉去发掘每天折磨着大众的感情-孤独,恐惧,挫折,不满,你离发现新产品的日子就不远了.</p>
<h4 id="最佳实践经验"><a href="#最佳实践经验" class="headerlink" title="最佳实践经验"></a>最佳实践经验</h4><p>大大要点:</p>
<ol>
<li>产品管理的职责</li>
<li>用户体验</li>
<li>机会评估</li>
<li>特约用户</li>
<li>产品原则</li>
<li>任务角色</li>
<li>探索(定义)产品</li>
<li>使用原型</li>
<li>用户参与原型测试</li>
<li>根据数据改进产品</li>
</ol>
<h4 id="产品经理的反省清单"><a href="#产品经理的反省清单" class="headerlink" title="产品经理的反省清单"></a>产品经理的反省清单</h4><p>十大问题:</p>
<ol>
<li>产品能吸引目标消费者的关注吗?</li>
<li>产品的设计是否人性化,是否易于操作?</li>
<li>产品能在竞争中取胜吗?即使是面对未来风云变化的市场,依旧有取胜的把握吗?</li>
<li>我了解目标用户吗?产品(不是理性的产品,而是开发出来的产品)是否能得到他们的认可?</li>
<li>产品是否有别于市场上的其他产品?我能在两分钟内向公司高管清楚的阐明这些差别吗?能在一分钟内向客户解释清楚吗?能在半分钟内向经验丰富的行业分析师解释清楚吗?</li>
<li>产品能正产运行吗?</li>
<li>产品是否完整?用户对产品的印象如何?销售业绩如何?销售任务能否顺利完成?</li>
<li>产品的特设首付与目标用户的需求一致?产品特色是否鲜明?</li>
<li>产品值钱吗?值多少钱?为什么值这么多钱?用户会选择更便宜的产品吗?</li>
<li>我了解其他团队成员对产品的看法吗?他们觉得产品好在哪里?他们的看法是否与我的观点一致?</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;启示录-打造用户喜爱的产品-读书笔记&quot;&gt;&lt;a href=&quot;#启示录-打造用户喜爱的产品-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;启示录-打造用户喜爱的产品 读书笔记&quot;&gt;&lt;/a&gt;启示录-打造用户喜爱的产品 读书笔记&lt;/h2&gt;&lt;p&gt;我的日常工作
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>androidSwipeLayout源码分析</title>
    <link href="http://pheobusyy.github.io/2017/01/23/2017/androidSwipeLayout%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://pheobusyy.github.io/2017/01/23/2017/androidSwipeLayout源码分析/</id>
    <published>2017-01-23T07:19:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-SwipeLayout源码分析"><a href="#android-SwipeLayout源码分析" class="headerlink" title="android SwipeLayout源码分析"></a>android SwipeLayout源码分析</h2><p>swipeLayout是代码家写的一个支持手势滑动的开源库,初看的时候感觉特别惊艳,用户体验也非常的棒,特别好奇是怎么实现的,故抽时间研究了下.<br>通过分析代码结构得出swipeLayout主要分为三大部分:</p>
<ol>
<li>内部view初始设置</li>
<li>内部ViewDragHelper的callback实现</li>
<li>冲突解决与注意事项</li>
</ol>
<a id="more"></a>
<h3 id="内部view设置"><a href="#内部view设置" class="headerlink" title="内部view设置"></a>内部view设置</h3><p>这里说的内部各个view实际上指的是swipeLayout的子view,查看源码第一行发现swipeLayout继承的是FrameLayout,我们知道,如果在FrameLayout中你不设置子view的gravity的话,它们会全部叠放在一起,其中在xml中最底部声明的view是在顶层展现,依次类推.咱们这里指的就是这些个view.</p>
<h4 id="内部view的类型"><a href="#内部view的类型" class="headerlink" title="内部view的类型"></a>内部view的类型</h4><p>在swipeLayout中,作者把view分为两大类,顶层默认展示的view叫做 <em>surfaceView</em> ,通过滑动显示的下层的方向的4个view叫做 <em>bottomView</em> .滑动支持上下左右4个方向,所以这里bottomView放入一个view集合.对应下面的枚举和map集合:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DragEdge &#123;</div><div class="line">       Left,</div><div class="line">       Top,</div><div class="line">       Right,</div><div class="line">       Bottom</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> LinkedHashMap&lt;DragEdge, View&gt; mDragEdges = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div></pre></td></tr></table></figure>
<p>可以看到,这里通过 <em>DragEdge</em> 来对应上下左右4个方向的滑动,然后通过 <em>mDragEdges</em> 来存放4个方向对应的 <em>bottomView</em> .</p>
<h4 id="内部view的位置放置"><a href="#内部view的位置放置" class="headerlink" title="内部view的位置放置"></a>内部view的位置放置</h4><p>我们知道关于ViewGroup中child的位置放置是在 <em>onLayout</em> 方法中配置的.so,这里我们看一下swipeLayout的 <em>onLayout</em> 方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        updateBottomViews();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mOnLayoutListeners != <span class="keyword">null</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mOnLayoutListeners.size(); i++) &#123;</div><div class="line">            mOnLayoutListeners.get(i).onLayout(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里重点进入 <em>updateBottomViews</em> 方法,下面的那个位置回调先不用考虑:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateBottomViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        View currentBottomView = getCurrentBottomView();</div><div class="line">        <span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left || mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">                mDragDistance = currentBottomView.getMeasuredWidth() - dp2px(getCurrentOffset());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mDragDistance = currentBottomView.getMeasuredHeight() - dp2px(getCurrentOffset());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//在这里对覆盖着的view做重新排列,按照需要</span></div><div class="line">        <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">            layoutPullOut();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mShowMode == ShowMode.LayDown) &#123;</div><div class="line">            layoutLayDown();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        safeBottomView();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个 <em>updateBottomViews</em> 方法是swipeLayout中非常重要的一个方法,一定要明白其中的含义.下面来挨个说明一下:</p>
<ol>
<li><p>首先是获取 <em>currentBottomView</em> 也就是当前滑动方式要显示的下层view.进入 <em>getCurrentBottomView</em> 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getCurrentBottomView</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;View&gt; bottoms = getBottomViews();</div><div class="line">    <span class="keyword">if</span> (mCurrentDragEdge.ordinal() &lt; bottoms.size()) &#123;</div><div class="line">        <span class="keyword">return</span> bottoms.get(mCurrentDragEdge.ordinal());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法中,通过 <em>mCurrentDragEdge</em> 来获取到当前的滑动类型,然后从 <em>bottomView</em> 的集合中找到对应滑动类型的 <em>bottomView</em> .那么 <em>mCurrentDragEdge</em> 是在哪里配置的呢?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DragEdge DefaultDragEdge = DragEdge.Right;</div><div class="line"></div><div class="line"><span class="keyword">private</span> DragEdge mCurrentDragEdge = DefaultDragEdge;</div></pre></td></tr></table></figure>
<p>可以看到默认的 <em>mCurrentDragEdge</em> 是右侧滑动,除了初始化设置 <em>mCurrentDragEdge</em> 外,我们在代码中还可以发现一个方法 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCurrentDragEdge</span><span class="params">(DragEdge dragEdge)</span> </span>&#123;</div><div class="line">   mCurrentDragEdge = dragEdge;</div><div class="line">   updateBottomViews();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法用来设置滑动方式,再追踪这个方法可以发现是在touch方法中来根据touch的event参数来设置滑动方式的,这个后续讲到touch事件处理的时候再说.</p>
<p>再来看如何通过 <em>getBottomViews</em> 方法来获取所有的 <em>bottomView</em> 的.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;View&gt; <span class="title">getBottomViews</span><span class="params">()</span> </span>&#123;</div><div class="line">  ArrayList&lt;View&gt; bottoms = <span class="keyword">new</span> ArrayList&lt;View&gt;();</div><div class="line">  <span class="keyword">for</span> (DragEdge dragEdge : DragEdge.values()) &#123;</div><div class="line">      bottoms.add(mDragEdges.get(dragEdge));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bottoms;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面通过遍历上面提到的 <em>mDragEdges</em> 来获取所有的 <em>bottomView</em>.那这个 <em>mDragEdges</em> 又是在哪里设置的呢.通过查看代码调用我们在 <em>addView</em> 方法中找到了下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child, <span class="keyword">int</span> index, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> gravity = Gravity.NO_GRAVITY;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        gravity = (Integer) params.getClass().getField(<span class="string">"gravity"</span>).get(params);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (gravity &gt; <span class="number">0</span>) &#123;</div><div class="line">        gravity = GravityCompat.getAbsoluteGravity(gravity, ViewCompat.getLayoutDirection(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.LEFT) == Gravity.LEFT) &#123;</div><div class="line">            mDragEdges.put(DragEdge.Left, child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.RIGHT) == Gravity.RIGHT) &#123;</div><div class="line">            mDragEdges.put(DragEdge.Right, child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.TOP) == Gravity.TOP) &#123;</div><div class="line">            mDragEdges.put(DragEdge.Top, child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((gravity &amp; Gravity.BOTTOM) == Gravity.BOTTOM) &#123;</div><div class="line">            mDragEdges.put(DragEdge.Bottom, child);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;DragEdge, View&gt; entry : mDragEdges.entrySet()) &#123;</div><div class="line">            <span class="keyword">if</span> (entry.getValue() == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//means used the drag_edge attr, the no gravity child should be use set</span></div><div class="line">                mDragEdges.put(entry.getKey(), child);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (child.getParent() == <span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.addView(child, index, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>addView是所有的viewGroup都要调用的方法,在这里我们可以看到是通过 <em>gravity</em> 属性来配置到对应的滑动类型的.如果没有配置 <em>gravity</em> 属性,就会遍历 <em>mDragEdges</em> 依次塞入不同的滑动类型中,那 <em>mDragEdges</em> 的默认值又是在哪里配置的呢?通过作者的注释我们看到应该和xml中声明的属性有关,进入构造方法中找到了答案:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">SwipeLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    mDragHelper = ViewDragHelper.create(<span class="keyword">this</span>, mDragHelperCallback);</div><div class="line">    mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</div><div class="line"></div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SwipeLayout);</div><div class="line">    <span class="keyword">int</span> dragEdgeChoices = a.getInt(R.styleable.SwipeLayout_drag_edge, DRAG_RIGHT);</div><div class="line">    mEdgeSwipesOffset[DragEdge.Left.ordinal()] = a.getDimension(R.styleable.SwipeLayout_leftEdgeSwipeOffset, <span class="number">0</span>);</div><div class="line">    mEdgeSwipesOffset[DragEdge.Right.ordinal()] = a.getDimension(R.styleable.SwipeLayout_rightEdgeSwipeOffset, <span class="number">0</span>);</div><div class="line">    mEdgeSwipesOffset[DragEdge.Top.ordinal()] = a.getDimension(R.styleable.SwipeLayout_topEdgeSwipeOffset, <span class="number">0</span>);</div><div class="line">    mEdgeSwipesOffset[DragEdge.Bottom.ordinal()] = a.getDimension(R.styleable.SwipeLayout_bottomEdgeSwipeOffset, <span class="number">0</span>);</div><div class="line">    setClickToClose(a.getBoolean(R.styleable.SwipeLayout_clickToClose, mClickToClose));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((dragEdgeChoices &amp; DRAG_LEFT) == DRAG_LEFT) &#123;</div><div class="line">        mDragEdges.put(DragEdge.Left, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((dragEdgeChoices &amp; DRAG_TOP) == DRAG_TOP) &#123;</div><div class="line">        mDragEdges.put(DragEdge.Top, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((dragEdgeChoices &amp; DRAG_RIGHT) == DRAG_RIGHT) &#123;</div><div class="line">        mDragEdges.put(DragEdge.Right, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((dragEdgeChoices &amp; DRAG_BOTTOM) == DRAG_BOTTOM) &#123;</div><div class="line">        mDragEdges.put(DragEdge.Bottom, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ordinal = a.getInt(R.styleable.SwipeLayout_show_mode, ShowMode.PullOut.ordinal());</div><div class="line">    mShowMode = ShowMode.values()[ordinal];</div><div class="line">    a.recycle();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这里,通过获取 <em>SwipeLayout_drag_edge</em> 属性来获取在xml中定义的drag类型,然后分别把对应的滑动类型放入 <em>mDragEdges</em> 中.如果在xml中没有声明,使用默认的滑动方式 <em>DRAG_RIGHT</em> 也就是从右侧滑动.</p>
</li>
<li><p>再来看 <em>updateBottomViews</em> 方法下面的部分,如何获取滑动的最大距离 <em>mDragDistance</em> :</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left || mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">        mDragDistance = currentBottomView.getMeasuredWidth() - dp2px(getCurrentOffset());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mDragDistance = currentBottomView.getMeasuredHeight() - dp2px(getCurrentOffset());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这个 <em>mDragDistance</em> 关系到顶层surfaceView可以滑动的最大距离是多少.实际上就是 <em>currentBottomView</em> 的宽度或者高度加上偏移量.</p>
</li>
<li><p>再来看如何调整各个view的位置的</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在这里对覆盖着的view做重新排列,按照需要</span></div><div class="line"><span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">    layoutPullOut();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mShowMode == ShowMode.LayDown) &#123;</div><div class="line">    layoutLayDown();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里对两种showMode做一下说明:<br> a) pullout: 字面理解是拉出的意思,也就是说在拖拉上层view的时候,下层view是跟着拖拽出现的,比如你从左往右拖动上层的view,那下层的view也是通过从左往右出现的,也就是所谓的联动状态<br> b) laydown: 字面解释是沉积和搁置的意思,也就是说在拖拽上层view的时候,下层view是不动的,下层view在上层拖动的时候慢慢展示.</p>
<p> 两种展示方式对应两种bottomView的放置方法, <em>layoutPullOut</em> 和 <em>layoutLayDown</em> 方法内部实现类似,这里只是讲一下第一个方法 :</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutPullOut</span><span class="params">()</span> </span>&#123;</div><div class="line">  View surfaceView = getSurfaceView();</div><div class="line">  Rect surfaceRect = mViewBoundCache.get(surfaceView);</div><div class="line">  <span class="keyword">if</span>(surfaceRect == <span class="keyword">null</span>) surfaceRect = computeSurfaceLayoutArea(<span class="keyword">false</span>);</div><div class="line">  <span class="keyword">if</span> (surfaceView != <span class="keyword">null</span>) &#123;</div><div class="line">      surfaceView.layout(surfaceRect.left, surfaceRect.top, surfaceRect.right, surfaceRect.bottom);</div><div class="line">      <span class="comment">//把这个view放在最前面</span></div><div class="line">      bringChildToFront(surfaceView);</div><div class="line">  &#125;</div><div class="line">  View currentBottomView = getCurrentBottomView();</div><div class="line">  Rect bottomViewRect = mViewBoundCache.get(currentBottomView);</div><div class="line">  <span class="comment">//计算下层view的位置</span></div><div class="line">  <span class="keyword">if</span>(bottomViewRect == <span class="keyword">null</span>) bottomViewRect = computeBottomLayoutAreaViaSurface(ShowMode.PullOut, surfaceRect);</div><div class="line">  <span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">      currentBottomView.layout(bottomViewRect.left, bottomViewRect.top, bottomViewRect.right, bottomViewRect.bottom);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这个方法分成两部分,一部分是设置 <em>surfaceView</em> 的位置,一部分是设置 <em>currentBottomView</em> 的位置.同时把设置的位置参数存入缓存集合 <em>mViewBoundCache</em> 中.<br> 来看配置surfaceView位置的方法 <em>computeSurfaceLayoutArea</em> :</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Rect <span class="title">computeSurfaceLayoutArea</span><span class="params">(<span class="keyword">boolean</span> open)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> l = getPaddingLeft(), t = getPaddingTop();</div><div class="line">  <span class="keyword">if</span> (open) &#123;</div><div class="line">      <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left)</div><div class="line">          l = getPaddingLeft() + mDragDistance;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right)</div><div class="line">          l = getPaddingLeft() - mDragDistance;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top)</div><div class="line">          t = getPaddingTop() + mDragDistance;</div><div class="line">      <span class="keyword">else</span> t = getPaddingTop() - mDragDistance;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Rect(l, t, l + getMeasuredWidth(), t + getMeasuredHeight());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如果是覆盖状态,那么顶层view的上下左右应该和swipeLayout的上下左右相同.<br> 如果是打开状态,那么根据上下左右的滑动情况结合 <em>mDragDistance</em> 来调整位置,非常容易理解,如果看不明白代码的话可以在纸上划一下就明白了.</p>
<p> 再来看设置 <em>bottomView</em> 位置的方法 <em>computeBottomLayoutAreaViaSurface</em> :</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Rect <span class="title">computeBottomLayoutAreaViaSurface</span><span class="params">(ShowMode mode, Rect surfaceArea)</span> </span>&#123;</div><div class="line"> Rect rect = surfaceArea;</div><div class="line"> View bottomView = getCurrentBottomView();</div><div class="line"></div><div class="line"> <span class="keyword">int</span> bl = rect.left, bt = rect.top, br = rect.right, bb = rect.bottom;</div><div class="line"> <span class="keyword">if</span> (mode == ShowMode.PullOut) &#123;</div><div class="line">     <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left)</div><div class="line">         bl = rect.left - mDragDistance;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right)</div><div class="line">         bl = rect.right;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top)</div><div class="line">         bt = rect.top - mDragDistance;</div><div class="line">     <span class="keyword">else</span> bt = rect.bottom;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left || mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">         bb = rect.bottom;</div><div class="line">         br = bl + (bottomView == <span class="keyword">null</span> ? <span class="number">0</span> : bottomView.getMeasuredWidth());</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         bb = bt + (bottomView == <span class="keyword">null</span> ? <span class="number">0</span> : bottomView.getMeasuredHeight());</div><div class="line">         br = rect.right;</div><div class="line">     &#125;</div><div class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == ShowMode.LayDown) &#123;</div><div class="line">     <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left)</div><div class="line">         br = bl + mDragDistance;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right)</div><div class="line">         bl = br - mDragDistance;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top)</div><div class="line">         bb = bt + mDragDistance;</div><div class="line">     <span class="keyword">else</span> bt = bb - mDragDistance;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Rect(bl, bt, br, bb);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这个方法直接根据不同的showMode来设置 <em>bottomView</em> 的位置.其实很好理解,如果是 <em>PullOut</em> 的话bottomView是在SwipeLayout的外部4个方向上,然后跟着滑动再慢慢进入swipeLayout中展示;而 <em>LayDown</em> 是bottomView本来就在swipeLayout中对应要显示的位置上,只是被上层view给盖住了而已.</p>
</li>
<li><p>最后来看 <em>safeBottomView</em> 方法:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeBottomView</span><span class="params">()</span> </span>&#123;</div><div class="line">  Status status = getOpenStatus();</div><div class="line">  List&lt;View&gt; bottoms = getBottomViews();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (status == Status.Close) &#123;</div><div class="line">      <span class="keyword">for</span> (View bottom : bottoms) &#123;</div><div class="line">          <span class="keyword">if</span> (bottom != <span class="keyword">null</span> &amp;&amp; bottom.getVisibility() != INVISIBLE) &#123;</div><div class="line">              bottom.setVisibility(INVISIBLE);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">      View currentBottomView = getCurrentBottomView();</div><div class="line">      <span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span> &amp;&amp; currentBottomView.getVisibility() != VISIBLE) &#123;</div><div class="line">          currentBottomView.setVisibility(VISIBLE);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 通过判断当前顶层surfaceView的状态来控制bottomView的隐藏显示,如果是 <em>close</em> 状态,所有的bottomView都隐藏,反之显示当前滑动状态对应的bottomView.</p>
</li>
</ol>
<h4 id="ViewDragHelper相关配置"><a href="#ViewDragHelper相关配置" class="headerlink" title="ViewDragHelper相关配置"></a>ViewDragHelper相关配置</h4><pre><code>进过上面的各类view的配置完成后,就进入view滑动的核心控制类ViewDragHelper的配置了,进过之前讲解 *ViewDragHelper的用法与源码分析* 我们明白想要让View可以被拖动的核心是实现ViewDragHelper中callback的各个接口方法.下面就来看一下swipeLayout中callback的实现.
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ViewDragHelper.Callback mDragHelperCallback = <span class="keyword">new</span> ViewDragHelper.Callback() &#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (child == getSurfaceView()) &#123;</div><div class="line">           <span class="comment">//顶层view可以滑动的最大横向距离</span></div><div class="line">           <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">               <span class="keyword">case</span> Top:</div><div class="line">               <span class="keyword">case</span> Bottom:</div><div class="line">                   <span class="keyword">return</span> getPaddingLeft();</div><div class="line">               <span class="keyword">case</span> Left:</div><div class="line">                   <span class="keyword">if</span> (left &lt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                   <span class="keyword">if</span> (left &gt; getPaddingLeft() + mDragDistance)</div><div class="line">                       <span class="keyword">return</span> getPaddingLeft() + mDragDistance;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> Right:</div><div class="line">                   <span class="keyword">if</span> (left &gt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                   <span class="keyword">if</span> (left &lt; getPaddingLeft() - mDragDistance)</div><div class="line">                       <span class="keyword">return</span> getPaddingLeft() - mDragDistance;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getCurrentBottomView() == child) &#123;</div><div class="line"></div><div class="line">           <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">               <span class="keyword">case</span> Top:</div><div class="line">               <span class="keyword">case</span> Bottom:</div><div class="line">                   <span class="keyword">return</span> getPaddingLeft();</div><div class="line">               <span class="keyword">case</span> Left:</div><div class="line">                   <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                       <span class="keyword">if</span> (left &gt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> Right:</div><div class="line">                   <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                       <span class="keyword">if</span> (left &lt; getMeasuredWidth() - mDragDistance) &#123;</div><div class="line">                           <span class="keyword">return</span> getMeasuredWidth() - mDragDistance;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> left;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (child == getSurfaceView()) &#123;</div><div class="line">           <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">               <span class="keyword">case</span> Left:</div><div class="line">               <span class="keyword">case</span> Right:</div><div class="line">                   <span class="keyword">return</span> getPaddingTop();</div><div class="line">               <span class="keyword">case</span> Top:</div><div class="line">                   <span class="keyword">if</span> (top &lt; getPaddingTop()) <span class="keyword">return</span> getPaddingTop();</div><div class="line">                   <span class="keyword">if</span> (top &gt; getPaddingTop() + mDragDistance)</div><div class="line">                       <span class="keyword">return</span> getPaddingTop() + mDragDistance;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> Bottom:</div><div class="line">                   <span class="keyword">if</span> (top &lt; getPaddingTop() - mDragDistance) &#123;</div><div class="line">                       <span class="keyword">return</span> getPaddingTop() - mDragDistance;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">if</span> (top &gt; getPaddingTop()) &#123;</div><div class="line">                       <span class="keyword">return</span> getPaddingTop();</div><div class="line">                   &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           View surfaceView = getSurfaceView();</div><div class="line">           <span class="keyword">int</span> surfaceViewTop = surfaceView == <span class="keyword">null</span> ? <span class="number">0</span> : surfaceView.getTop();</div><div class="line">           <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">               <span class="keyword">case</span> Left:</div><div class="line">               <span class="keyword">case</span> Right:</div><div class="line">                   <span class="keyword">return</span> getPaddingTop();</div><div class="line">               <span class="keyword">case</span> Top:</div><div class="line">                   <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                       <span class="keyword">if</span> (top &gt; getPaddingTop()) <span class="keyword">return</span> getPaddingTop();</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">if</span> (surfaceViewTop + dy &lt; getPaddingTop())</div><div class="line">                           <span class="keyword">return</span> getPaddingTop();</div><div class="line">                       <span class="keyword">if</span> (surfaceViewTop + dy &gt; getPaddingTop() + mDragDistance)</div><div class="line">                           <span class="keyword">return</span> getPaddingTop() + mDragDistance;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> Bottom:</div><div class="line">                   <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                       <span class="keyword">if</span> (top &lt; getMeasuredHeight() - mDragDistance)</div><div class="line">                           <span class="keyword">return</span> getMeasuredHeight() - mDragDistance;</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">if</span> (surfaceViewTop + dy &gt;= getPaddingTop())</div><div class="line">                           <span class="keyword">return</span> getPaddingTop();</div><div class="line">                       <span class="keyword">if</span> (surfaceViewTop + dy &lt;= getPaddingTop() - mDragDistance)</div><div class="line">                           <span class="keyword">return</span> getPaddingTop() - mDragDistance;</div><div class="line">                   &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> top;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">       <span class="comment">//这里相当于所有的子view都可以被滑动</span></div><div class="line">       <span class="keyword">boolean</span> result = child == getSurfaceView() || getBottomViews().contains(child);</div><div class="line">       <span class="keyword">if</span> (result) &#123;</div><div class="line">           isCloseBeforeDrag = getOpenStatus() == Status.Close;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mDragDistance;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> mDragDistance;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">boolean</span> isCloseBeforeDrag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onViewReleased(releasedChild, xvel, yvel);</div><div class="line">       processHandRelease(xvel, yvel, isCloseBeforeDrag);</div><div class="line">       <span class="keyword">for</span> (SwipeListener l : mSwipeListeners) &#123;</div><div class="line">           l.onHandRelease(SwipeLayout.<span class="keyword">this</span>, xvel, yvel);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       invalidate();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">       View surfaceView = getSurfaceView();</div><div class="line">       <span class="keyword">if</span> (surfaceView == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">       View currentBottomView = getCurrentBottomView();</div><div class="line">       <span class="keyword">int</span> evLeft = surfaceView.getLeft(),</div><div class="line">               evRight = surfaceView.getRight(),</div><div class="line">               evTop = surfaceView.getTop(),</div><div class="line">               evBottom = surfaceView.getBottom();</div><div class="line">       <span class="keyword">if</span> (changedView == surfaceView) &#123;</div><div class="line">           <span class="comment">//通知下层的view也移动对应的距离,因为你拖动上层view的时候,下层view是不会自己动的</span></div><div class="line">           <span class="keyword">if</span> (mShowMode == ShowMode.PullOut &amp;&amp; currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left || mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">                   currentBottomView.offsetLeftAndRight(dx);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   currentBottomView.offsetTopAndBottom(dy);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBottomViews().contains(changedView)) &#123;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">               surfaceView.offsetLeftAndRight(dx);</div><div class="line">               surfaceView.offsetTopAndBottom(dy);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               Rect rect = computeBottomLayDown(mCurrentDragEdge);</div><div class="line">               <span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">//下层view保持不变</span></div><div class="line">                   currentBottomView.layout(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="keyword">int</span> newLeft = surfaceView.getLeft() + dx, newTop = surfaceView.getTop() + dy;</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left &amp;&amp; newLeft &lt; getPaddingLeft())</div><div class="line">                   newLeft = getPaddingLeft();</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right &amp;&amp; newLeft &gt; getPaddingLeft())</div><div class="line">                   newLeft = getPaddingLeft();</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top &amp;&amp; newTop &lt; getPaddingTop())</div><div class="line">                   newTop = getPaddingTop();</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Bottom &amp;&amp; newTop &gt; getPaddingTop())</div><div class="line">                   newTop = getPaddingTop();</div><div class="line">               <span class="comment">//上层的view移动</span></div><div class="line">               surfaceView.layout(newLeft, newTop, newLeft + getMeasuredWidth(), newTop + getMeasuredHeight());</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//回调</span></div><div class="line">       dispatchRevealEvent(evLeft, evTop, evRight, evBottom);</div><div class="line">       <span class="comment">//回调</span></div><div class="line">       dispatchSwipeEvent(evLeft, evTop, dx, dy);</div><div class="line"></div><div class="line">       invalidate();</div><div class="line">       <span class="comment">//保持一下下层view的位置,方便layout的时候直接调用</span></div><div class="line">       captureChildrenBound();</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>

我们来按照实现顺序重点讲解一下这几个接口方法:
1. *tryCaptureView(View child, int pointerId)*
    这个方法用来判断当前手势滑动的view是否是我们允许滑动的view,如果返回false说明当前不允许这个view滑动,true的话是运行滑动.
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">    <span class="comment">//这里相当于所有的子view都可以被滑动</span></div><div class="line">    <span class="keyword">boolean</span> result = child == getSurfaceView() || getBottomViews().contains(child);</div><div class="line">    <span class="keyword">if</span> (result) &#123;</div><div class="line">        isCloseBeforeDrag = getOpenStatus() == Status.Close;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>

    在这里可以看到,所有的bottomView和surfaceView都是可以滑动的.
2. *getViewHorizontalDragRange* 和 *getViewVerticalDragRange*
    这两个方法用来配置横向和纵向可以滑动的最大距离,这里统一用的就是上面计算出的 *mDragDistance*
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDragDistance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDragDistance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

3. *clampViewPositionHorizontal* 和 *clampViewPositionVertical*
    这个方法用来控制横向和纵向允许滑动的最大距离,防止滑动越界.这里讲解一下横向的计算方式,纵向和这个类似就不重复了.
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (child == getSurfaceView()) &#123;</div><div class="line">        <span class="comment">//顶层view可以滑动的最大横向距离</span></div><div class="line">        <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">            <span class="keyword">case</span> Top:</div><div class="line">            <span class="keyword">case</span> Bottom:</div><div class="line">                <span class="keyword">return</span> getPaddingLeft();</div><div class="line">            <span class="keyword">case</span> Left:</div><div class="line">                <span class="keyword">if</span> (left &lt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                <span class="keyword">if</span> (left &gt; getPaddingLeft() + mDragDistance)</div><div class="line">                    <span class="keyword">return</span> getPaddingLeft() + mDragDistance;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Right:</div><div class="line">                <span class="keyword">if</span> (left &gt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                <span class="keyword">if</span> (left &lt; getPaddingLeft() - mDragDistance)</div><div class="line">                    <span class="keyword">return</span> getPaddingLeft() - mDragDistance;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getCurrentBottomView() == child) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (mCurrentDragEdge) &#123;</div><div class="line">            <span class="keyword">case</span> Top:</div><div class="line">            <span class="keyword">case</span> Bottom:</div><div class="line">                <span class="keyword">return</span> getPaddingLeft();</div><div class="line">            <span class="keyword">case</span> Left:</div><div class="line">                <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                    <span class="keyword">if</span> (left &gt; getPaddingLeft()) <span class="keyword">return</span> getPaddingLeft();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Right:</div><div class="line">                <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">                    <span class="keyword">if</span> (left &lt; getMeasuredWidth() - mDragDistance) &#123;</div><div class="line">                        <span class="keyword">return</span> getMeasuredWidth() - mDragDistance;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

    分两部分来看,首先是surfaceView
    如果是上下两个方向的滑动,那么相当于在横向上是不允许移动的,这里不设置为0是因为要考虑padding,所以返回left只能是getPaddingLeft.
    如果是横向滑动的话,又分为左右两个方向处理.
    如果drag类型是 *left* ,说明是向右滑动露出左边,这个left只能大于 *getPaddingLeft* 小于  *getPaddingLeft + mDragDistance* (正值).
    如果是 *right* ,说明向左拉动,露出右边,这个时候left只能是小于 *getPaddingLeft* 大于 *getPaddingLeft - mDragDistance* (负值).

    再来看bottomView
    上下两个方向不允许滑动,所以返回 *getPaddingLeft* .
    如果drag类型是 *left*
    a) pullout 这个时候bottomView是在swipeLayout的左侧外部,所以它可以滑动到的最大left只能是从负的到正的 *getPaddingLeft*
    如果drag类型是 *right*
    a) pullout 这个时候bottomView是在swipeLayout的右侧外部,所以它最多可以划进来自己本身宽度那么大的距离,所以这里用的 *getMeasuredWidth() - mDragDistance* ,用SwipeLayout的宽度减去bottomView的宽度,就是距离左边的距离.
4. *onViewPositionChanged*
    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">    View surfaceView = getSurfaceView();</div><div class="line">    <span class="keyword">if</span> (surfaceView == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    View currentBottomView = getCurrentBottomView();</div><div class="line">    <span class="keyword">int</span> evLeft = surfaceView.getLeft(),</div><div class="line">            evRight = surfaceView.getRight(),</div><div class="line">            evTop = surfaceView.getTop(),</div><div class="line">            evBottom = surfaceView.getBottom();</div><div class="line">    <span class="keyword">if</span> (changedView == surfaceView) &#123;</div><div class="line">        <span class="comment">//通知下层的view也移动对应的距离,因为你拖动上层view的时候,下层view是不会自己动的</span></div><div class="line">        <span class="keyword">if</span> (mShowMode == ShowMode.PullOut &amp;&amp; currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left || mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">                currentBottomView.offsetLeftAndRight(dx);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                currentBottomView.offsetTopAndBottom(dy);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBottomViews().contains(changedView)) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mShowMode == ShowMode.PullOut) &#123;</div><div class="line">            surfaceView.offsetLeftAndRight(dx);</div><div class="line">            surfaceView.offsetTopAndBottom(dy);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Rect rect = computeBottomLayDown(mCurrentDragEdge);</div><div class="line">            <span class="keyword">if</span> (currentBottomView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//下层view保持不变</span></div><div class="line">                currentBottomView.layout(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> newLeft = surfaceView.getLeft() + dx, newTop = surfaceView.getTop() + dy;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left &amp;&amp; newLeft &lt; getPaddingLeft())</div><div class="line">                newLeft = getPaddingLeft();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right &amp;&amp; newLeft &gt; getPaddingLeft())</div><div class="line">                newLeft = getPaddingLeft();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top &amp;&amp; newTop &lt; getPaddingTop())</div><div class="line">                newTop = getPaddingTop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Bottom &amp;&amp; newTop &gt; getPaddingTop())</div><div class="line">                newTop = getPaddingTop();</div><div class="line">            <span class="comment">//上层的view移动</span></div><div class="line">            surfaceView.layout(newLeft, newTop, newLeft + getMeasuredWidth(), newTop + getMeasuredHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//回调</span></div><div class="line">    dispatchRevealEvent(evLeft, evTop, evRight, evBottom);</div><div class="line">    <span class="comment">//回调</span></div><div class="line">    dispatchSwipeEvent(evLeft, evTop, dx, dy);</div><div class="line"></div><div class="line">    invalidate();</div><div class="line">    <span class="comment">//保持一下下层view的位置,方便layout的时候直接调用</span></div><div class="line">    captureChildrenBound();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>

    这个方法是在滑动view的时候位置发生变化的回调方法,也是我们实现view滑动效果的关键.
    重点是对应 *pullout* 这种方式,因为是如果是这种显示模式的话,是要两个view联动,一个是ViewDragHelper帮我们滑动的那个view,另一个是要联动的另一个view.这个是联动的关键.
    先来看if判断第一部分,如果滑动的是surfaceView,让 *currentBottomView* 跟着surfaceView一起滑动相应的距离.
    再来看if判断的第二部分,如果滑动的是bottomView,这个时候要判断是否是pullout方式
      a) 是,那么也要保证在滑动bottomView的时候,surfaceView也要跟着移动对应的距离
      b) 不是,那么保证bottomView不要动也就是一直设置bottomView的固定位置,同时让surfaceView反向移动.
    最后来看剩下的几个方法:
      a) *dispatchRevealEvent* 和 *dispatchSwipeEvent* 这两个方法用来做滑动事件的回调,这里不做展开
      b) *invalidate* 重新要求swipeLayout绘制,实现滑动的关键方法
      c) *captureChildrenBound* 保存一下surfaceView和bottomView的位置信息,节省下次计算时间.

5. onViewReleased
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onViewReleased(releasedChild, xvel, yvel);</div><div class="line">     processHandRelease(xvel, yvel, isCloseBeforeDrag);</div><div class="line">     <span class="keyword">for</span> (SwipeListener l : mSwipeListeners) &#123;</div><div class="line">         l.onHandRelease(SwipeLayout.<span class="keyword">this</span>, xvel, yvel);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     invalidate();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>

  根据方法名称可以知道是用来处理手指松开之后的事件处理的.核心处理在 *processHandRelease* 方法.
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processHandRelease</span><span class="params">(<span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel, <span class="keyword">boolean</span> isCloseBeforeDragged)</span> </span>&#123;</div><div class="line">    <span class="keyword">float</span> minVelocity = mDragHelper.getMinVelocity();</div><div class="line">    View surfaceView = getSurfaceView();</div><div class="line">    DragEdge currentDragEdge = mCurrentDragEdge;</div><div class="line">    <span class="keyword">if</span> (currentDragEdge == <span class="keyword">null</span> || surfaceView == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">float</span> willOpenPercent = (isCloseBeforeDragged ? mWillOpenPercentAfterClose : mWillOpenPercentAfterOpen);</div><div class="line">    <span class="keyword">if</span> (currentDragEdge == DragEdge.Left) &#123;</div><div class="line">        <span class="keyword">if</span> (xvel &gt; minVelocity) open();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (xvel &lt; -minVelocity) close();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> openPercent = <span class="number">1f</span> * getSurfaceView().getLeft() / mDragDistance;</div><div class="line">            <span class="keyword">if</span> (openPercent &gt; willOpenPercent) open();</div><div class="line">            <span class="keyword">else</span> close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDragEdge == DragEdge.Right) &#123;</div><div class="line">        <span class="keyword">if</span> (xvel &gt; minVelocity) close();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (xvel &lt; -minVelocity) open();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> openPercent = <span class="number">1f</span> * (-getSurfaceView().getLeft()) / mDragDistance;</div><div class="line">            <span class="keyword">if</span> (openPercent &gt; willOpenPercent) open();</div><div class="line">            <span class="keyword">else</span> close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDragEdge == DragEdge.Top) &#123;</div><div class="line">        <span class="keyword">if</span> (yvel &gt; minVelocity) open();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (yvel &lt; -minVelocity) close();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> openPercent = <span class="number">1f</span> * getSurfaceView().getTop() / mDragDistance;</div><div class="line">            <span class="keyword">if</span> (openPercent &gt; willOpenPercent) open();</div><div class="line">            <span class="keyword">else</span> close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentDragEdge == DragEdge.Bottom) &#123;</div><div class="line">        <span class="keyword">if</span> (yvel &gt; minVelocity) close();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (yvel &lt; -minVelocity) open();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">float</span> openPercent = <span class="number">1f</span> * (-getSurfaceView().getTop()) / mDragDistance;</div><div class="line">            <span class="keyword">if</span> (openPercent &gt; willOpenPercent) open();</div><div class="line">            <span class="keyword">else</span> close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

里面是大量的临界判断,比如当你拖拽的距离超过最大距离一半时松手时,那么应该进入到展开状态,反之就进入关闭状态,这是良好用户体验的基础.坐标判断就不展开了,来看最终的状态处理 *open* 和 *close* 方法.

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">boolean</span> smooth, <span class="keyword">boolean</span> notify)</span> </span>&#123;</div><div class="line">    View surface = getSurfaceView();</div><div class="line">    <span class="keyword">if</span> (surface == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> dx, dy;</div><div class="line">    <span class="keyword">if</span> (smooth)</div><div class="line">        mDragHelper.smoothSlideViewTo(getSurfaceView(), getPaddingLeft(), getPaddingTop());</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Rect rect = computeSurfaceLayoutArea(<span class="keyword">false</span>);</div><div class="line">        dx = rect.left - surface.getLeft();</div><div class="line">        dy = rect.top - surface.getTop();</div><div class="line">        surface.layout(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">        <span class="keyword">if</span> (notify) &#123;</div><div class="line">            dispatchRevealEvent(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">            dispatchSwipeEvent(rect.left, rect.top, dx, dy);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            safeBottomView();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>

可以看到这里用到了 *smoothSlideViewTo* 这个方法,让surfaceView来复位,最后再重回swipeLayout.这里关于ViewDragHelper的 *smoothSlideViewTo* 方法有个关键点,在后面的注意事项中我们再说.
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">boolean</span> smooth, <span class="keyword">boolean</span> notify)</span> </span>&#123;</div><div class="line">   View surface = getSurfaceView(), bottom = getCurrentBottomView();</div><div class="line">   <span class="keyword">if</span> (surface == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> dx, dy;</div><div class="line">   Rect rect = computeSurfaceLayoutArea(<span class="keyword">true</span>);</div><div class="line">   <span class="keyword">if</span> (smooth) &#123;</div><div class="line">       mDragHelper.smoothSlideViewTo(surface, rect.left, rect.top);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       dx = rect.left - surface.getLeft();</div><div class="line">       dy = rect.top - surface.getTop();</div><div class="line">       surface.layout(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">       <span class="keyword">if</span> (getShowMode() == ShowMode.PullOut) &#123;</div><div class="line">           Rect bRect = computeBottomLayoutAreaViaSurface(ShowMode.PullOut, rect);</div><div class="line">           <span class="keyword">if</span> (bottom != <span class="keyword">null</span>) &#123;</div><div class="line">               bottom.layout(bRect.left, bRect.top, bRect.right, bRect.bottom);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (notify) &#123;</div><div class="line">           dispatchRevealEvent(rect.left, rect.top, rect.right, rect.bottom);</div><div class="line">           dispatchSwipeEvent(rect.left, rect.top, dx, dy);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           safeBottomView();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>

open方法和close方法类似,也是通过 *smoothSlideViewTo* 来完成最终的展开的.
</code></pre><p>  到这里,callback的核心接口方法就讲完了,实际上swipeLayout的主要流程到这里就基本讲完了,可以看到主要实现就是callback中的逻辑处理.剩下的就是关于swipeLayout的一些注意事项和容易忽略的地方讲解.</p>
<h4 id="冲突解决与注意事项"><a href="#冲突解决与注意事项" class="headerlink" title="冲突解决与注意事项"></a>冲突解决与注意事项</h4><p>  到这里,你可能很好奇,为什么没有找到ViewDragHelper的调用地方,那是因为这里有两个关键点容易以往,在这里来重点讲解一下.先来看swipeLayout的触摸拦截方法 <em>onInterceptTouchEvent</em><br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!isSwipeEnabled()) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (mClickToClose &amp;&amp; getOpenStatus() == Status.Open &amp;&amp; isTouchOnSurface(ev)) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span> (SwipeDenier denier : mSwipeDeniers) &#123;</div><div class="line">          <span class="keyword">if</span> (denier != <span class="keyword">null</span> &amp;&amp; denier.shouldDenySwipe(ev)) &#123;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (ev.getAction()) &#123;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">              mDragHelper.processTouchEvent(ev);</div><div class="line">              mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">              sX = ev.getRawX();</div><div class="line">              sY = ev.getRawY();</div><div class="line">              <span class="comment">//if the swipe is in middle state(scrolling), should intercept the touch</span></div><div class="line">              <span class="keyword">if</span> (getOpenStatus() == Status.Middle) &#123;</div><div class="line">                  mIsBeingDragged = <span class="keyword">true</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">              <span class="keyword">boolean</span> beforeCheck = mIsBeingDragged;</div><div class="line">              checkCanDrag(ev);</div><div class="line">              <span class="keyword">if</span> (mIsBeingDragged) &#123;</div><div class="line">                  <span class="comment">//向父类申请不要拦截触摸事件,注意这里是viewGroup向它的父类申请不要拦截触摸事件</span></div><div class="line">                  ViewParent parent = getParent();</div><div class="line">                  <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                      parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (!beforeCheck &amp;&amp; mIsBeingDragged) &#123;</div><div class="line">                  <span class="comment">//let children has one chance to catch the touch, and request the swipe not intercept</span></div><div class="line">                  <span class="comment">//useful when swipeLayout wrap a swipeLayout or other gestural layout</span></div><div class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line"></div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">              mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">              mDragHelper.processTouchEvent(ev);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>:<span class="comment">//handle other action, such as ACTION_POINTER_DOWN/UP</span></div><div class="line">              mDragHelper.processTouchEvent(ev);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> mIsBeingDragged;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>  在这里主要目的是为了解决如果和父类滑动事件冲突的时候如何处理呢,比如把swipeLayout放入listView,如果你沿着斜上方来滑动listView,很容易对swipeLayout造成影响,这个时候我们在 <em>ACTION_MOVE</em> 方法中,通过一个变量 <em>mIsBeingDragged</em> 判断是否要求父类不要拦截我们的swipeLayout的滑动事件.要求父类不要拦截滑动事件可以调用<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ViewParent parent = getParent();</div><div class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">    parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  <em>mIsBeingDragged</em> 是通过 <em>checkCanDrag</em> 方法来赋值的.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据滑动的方式来判断是哪一种类型的drag方式</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkCanDrag</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (mIsBeingDragged) <span class="keyword">return</span>;</div><div class="line">      <span class="keyword">if</span> (getOpenStatus() == Status.Middle) &#123;</div><div class="line">          mIsBeingDragged = <span class="keyword">true</span>;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      Status status = getOpenStatus();</div><div class="line">      <span class="keyword">float</span> distanceX = ev.getRawX() - sX;</div><div class="line">      <span class="keyword">float</span> distanceY = ev.getRawY() - sY;</div><div class="line">      <span class="keyword">float</span> angle = Math.abs(distanceY / distanceX);</div><div class="line">      angle = (<span class="keyword">float</span>) Math.toDegrees(Math.atan(angle));</div><div class="line">      <span class="keyword">if</span> (getOpenStatus() == Status.Close) &#123;</div><div class="line">          <span class="comment">//通过角度判断滑动的方向</span></div><div class="line">          DragEdge dragEdge;</div><div class="line">          <span class="keyword">if</span> (angle &lt; <span class="number">45</span>) &#123;</div><div class="line">              <span class="keyword">if</span> (distanceX &gt; <span class="number">0</span> &amp;&amp; isLeftSwipeEnabled()) &#123;</div><div class="line">                  dragEdge = DragEdge.Left;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distanceX &lt; <span class="number">0</span> &amp;&amp; isRightSwipeEnabled()) &#123;</div><div class="line">                  dragEdge = DragEdge.Right;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">return</span>;</div><div class="line"></div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">if</span> (distanceY &gt; <span class="number">0</span> &amp;&amp; isTopSwipeEnabled()) &#123;</div><div class="line">                  dragEdge = DragEdge.Top;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distanceY &lt; <span class="number">0</span> &amp;&amp; isBottomSwipeEnabled()) &#123;</div><div class="line">                  dragEdge = DragEdge.Bottom;</div><div class="line">              &#125; <span class="keyword">else</span> <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          setCurrentDragEdge(dragEdge);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">boolean</span> doNothing = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Right) &#123;</div><div class="line">          <span class="keyword">boolean</span> suitable = (status == Status.Open &amp;&amp; distanceX &gt; mTouchSlop)</div><div class="line">                  || (status == Status.Close &amp;&amp; distanceX &lt; -mTouchSlop);</div><div class="line">          suitable = suitable || (status == Status.Middle);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (angle &gt; <span class="number">30</span> || !suitable) &#123;</div><div class="line">              doNothing = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Left) &#123;</div><div class="line">          <span class="keyword">boolean</span> suitable = (status == Status.Open &amp;&amp; distanceX &lt; -mTouchSlop)</div><div class="line">                  || (status == Status.Close &amp;&amp; distanceX &gt; mTouchSlop);</div><div class="line">          suitable = suitable || status == Status.Middle;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (angle &gt; <span class="number">30</span> || !suitable) &#123;</div><div class="line">              doNothing = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Top) &#123;</div><div class="line">          <span class="keyword">boolean</span> suitable = (status == Status.Open &amp;&amp; distanceY &lt; -mTouchSlop)</div><div class="line">                  || (status == Status.Close &amp;&amp; distanceY &gt; mTouchSlop);</div><div class="line">          suitable = suitable || status == Status.Middle;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (angle &lt; <span class="number">60</span> || !suitable) &#123;</div><div class="line">              doNothing = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mCurrentDragEdge == DragEdge.Bottom) &#123;</div><div class="line">          <span class="keyword">boolean</span> suitable = (status == Status.Open &amp;&amp; distanceY &gt; mTouchSlop)</div><div class="line">                  || (status == Status.Close &amp;&amp; distanceY &lt; -mTouchSlop);</div><div class="line">          suitable = suitable || status == Status.Middle;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (angle &lt; <span class="number">60</span> || !suitable) &#123;</div><div class="line">              doNothing = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      mIsBeingDragged = !doNothing;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>  抛开滑动方式,展示方式之后,这个方法就是通过判断滑动角度来判断是否满足swipeLayout的滑动条件.如果满足就返回 true,通知父类不要拦截事件,反之,就任由父类来拦截处理了.</p>
<p>  最后来看下 <em>onTouchEvent</em> 方法.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (!isSwipeEnabled()) <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line"></div><div class="line">     <span class="keyword">int</span> action = event.getActionMasked();</div><div class="line">     gestureDetector.onTouchEvent(event);</div><div class="line"></div><div class="line">     <span class="keyword">switch</span> (action) &#123;</div><div class="line">         <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">             mDragHelper.processTouchEvent(event);</div><div class="line">             sX = event.getRawX();</div><div class="line">             sY = event.getRawY();</div><div class="line"></div><div class="line"></div><div class="line">         <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">             <span class="comment">//the drag state and the direction are already judged at onInterceptTouchEvent</span></div><div class="line">             checkCanDrag(event);</div><div class="line">             <span class="keyword">if</span> (mIsBeingDragged) &#123;</div><div class="line">                 <span class="comment">//向父类申请不要拦截触摸事件,注意这里是viewGroup向它的父类申请不要拦截触摸事件</span></div><div class="line">                 getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                 mDragHelper.processTouchEvent(event);</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">         <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">             mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">             mDragHelper.processTouchEvent(event);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line"></div><div class="line">         <span class="keyword">default</span>:<span class="comment">//handle other action, such as ACTION_POINTER_DOWN/UP</span></div><div class="line">             mDragHelper.processTouchEvent(event);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event) || mIsBeingDragged || action == MotionEvent.ACTION_DOWN;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>  这个方法与 <em>onInterceptTouchEvent</em> 方法一样,也是要判断滑动的条件是否满足才通知父类是否拦截事件.</p>
<p>  最后的最后,我自己在照着swipeLayout自己实现一个简单的侧滑viewGroup的时候,发现调用 <em>smoothSlideViewTo</em> 不起作用,开始以为是像网上说的 <em>invalidate</em> 在不同手机上无效的问题,后来发现是没有好好理解ViewDragHelper的 <em>smoothSlideViewTo</em> 方法原理.<br>  看下 <em>smoothSlideViewTo</em> 方法,我们可以发现内部是通过 <em>scroller</em> 来实现的view的移动的,如果我们不继承实现 <em>computeScroll</em> 是无法让view移动的.<br>  最后在swipeLayout中发现了方法 <em>computeScroll</em> .<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.computeScroll();</div><div class="line">    <span class="keyword">if</span> (mDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</div><div class="line">        ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里,swipeLayout的主要实现就讲完了,回头看一下核心点就是在ViewDragHelper的使用上面,所以还是感觉有以为的同学可以看一下之前写的的一篇 <em>ViewDragHelper源码分析</em> 讲解来对照学习.就到这里吧 .</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0911/1680.html" title="ViewDragHelper详解" target="_blank" rel="external">ViewDragHelper详解</a></p>
<p><a href="https://github.com/daimajia/AndroidSwipeLayout" title="github androidSwipeLayout" target="_blank" rel="external">github androidSwipeLayout</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-SwipeLayout源码分析&quot;&gt;&lt;a href=&quot;#android-SwipeLayout源码分析&quot; class=&quot;headerlink&quot; title=&quot;android SwipeLayout源码分析&quot;&gt;&lt;/a&gt;android SwipeLayout源码分析&lt;/h2&gt;&lt;p&gt;swipeLayout是代码家写的一个支持手势滑动的开源库,初看的时候感觉特别惊艳,用户体验也非常的棒,特别好奇是怎么实现的,故抽时间研究了下.&lt;br&gt;通过分析代码结构得出swipeLayout主要分为三大部分:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内部view初始设置&lt;/li&gt;
&lt;li&gt;内部ViewDragHelper的callback实现&lt;/li&gt;
&lt;li&gt;冲突解决与注意事项&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android自定义gradle插件</title>
    <link href="http://pheobusyy.github.io/2017/01/23/2017/android%E8%87%AA%E5%AE%9A%E4%B9%89gradle%E6%8F%92%E4%BB%B6/"/>
    <id>http://pheobusyy.github.io/2017/01/23/2017/android自定义gradle插件/</id>
    <published>2017-01-23T05:31:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android自定义gradle插件"><a href="#android自定义gradle插件" class="headerlink" title="android自定义gradle插件"></a>android自定义gradle插件</h2><p>  在android学习过程中,理解gradle的编译过程是非常重要的,我们可以通过自定义gradle插件来达到在编译打包的过程中人工参与其中的一部分工作,这样可以满足我们的各种需求,比如在编译之前要对所有的class做统一处理,比如打包完成之后要输出到指定的目录,这些都可以通过自定义的gradle插件来完成.</p>
<p>  下面讲解下如何在android studio中实现自定义的gradle插件</p>
<h2 id="在当前工程的gradle文件中实现插件"><a href="#在当前工程的gradle文件中实现插件" class="headerlink" title="在当前工程的gradle文件中实现插件"></a>在当前工程的gradle文件中实现插件</h2><p>  gradle插件理论上就是通过groovy语法实现的类,内部可以制定一些流程task来完成相应的工作.最简单的肯定是在当前工程的 <em>build.gradle</em> 文件中直接实现插件内容.因为实际上 <em>build.gralde</em> 就是一个groovy文件.</p>
<p>  在我们的android主工程目录中输入一下代码:</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="keyword">void</span> apply(Project project) &#123;</div><div class="line">       project.extensions.create(<span class="string">"greeting"</span>, GreetingPluginExtension)</div><div class="line">       project.task(<span class="string">'hello'</span>) &#123;</div><div class="line">           doLast &#123;</div><div class="line">               println <span class="string">"$&#123;project.greeting.message&#125; from $&#123;project.greeting.greeter&#125;"</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPluginExtension</span> &#123;</span></div><div class="line">   String message = <span class="string">'Hello from GreetingPlugin'</span></div><div class="line">   String greeter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里首先是实现一个plugin接口,这个接口是所有的自定义插件的必须实现的.完成里面的 <em>apply</em> 方法,这里用到了一个 <em>extensions</em> 的概念,这个 <em>extensions</em> 是用来给工程project设置一些额外属性的对象.比如我们在android的 <em>build.gradle</em> 文件中经常看到的<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这个 <em>android{}</em> 内部就是给工程中设置的一些参数.在咱们这里的设置的是 <em>extensions</em> 叫 <em>GreetingPluginExtension</em> ,内部定义了两个参数 <em>message</em> 和 <em>greeter</em> 这里前一个参数有默认值,后一个没有,其实groovy和java的语法基本上一样的,只不过groovy是动态的java.</p>
<p>接着看plugin中的 <em>apply</em> 方法,非常的简单就是定义一个名叫 <em>hello</em> 的 <em>task</em> ,然后在里面打印一下  <em>GreetingPluginExtension</em> 中的两个参数.那在 <em>build.gradle</em> 中如何设置对应的参数呢?看下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">greeting &#123;</div><div class="line">    message  &apos;Hi from gradle&apos;</div><div class="line">    greeter  &apos;Gradle&apos;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line">就是这么简单直白.定义完成之后,我们直接在主目录下终端运行一下命令:</div></pre></td></tr></table></figure></p>
<p>./gradlew -q hello<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以看到在终端中输出:</div></pre></td></tr></table></figure></p>
<p>Hi from gradle from Gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">是不是非常的简单呢.在当前工程中定义的插件只能自己用,如果要给别人用的话就需要通过一个单独的工程来生成插件了.</div><div class="line"></div><div class="line">### 在单独工程中创建自定义gradle插件</div><div class="line"></div><div class="line">首先在当前的工程中随便创建一个android module ,然后src/main目录下所有文件夹全部删除掉.然后先创建一个groovy文件夹,里面用来存放我们的插件groovy代码,一个是 *GreetingPluginExtension* ,一个是 *MyGradlePlugin* 内部代码分别对应上面的两个class.</div><div class="line"></div><div class="line">然后再创建一个 *resources* 文件夹,里面放入一个 *META-INFO* 文件夹,然后继续在 *META-INFO* 文件夹下创建 *gradle-pulgins* ,在 *gradle-pulgins* 下创建文件</div><div class="line">*com.justyan.gradle.properties* 文件,文件内容为:</div></pre></td></tr></table></figure></p>
<p>implementation-class = com.justyan.gradleplugin.MyGradlePlugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这里的 *com.justyan.gradle.properties* 文件的 *com.justyan.gradle* 就是你以后要给其他工程引用的的 gradle ID.比如这样:</div></pre></td></tr></table></figure></p>
<p>apply plugin: ‘com.justyan.gradle’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">这个名称你可以随便起,只要在引用的时候引用对了就ok.文件中内容的目的是指定了插件的类路径,这里就是groovy文件下的那两个groovy文件.</div><div class="line"></div><div class="line">最后的文件目录应该是这样的:</div><div class="line">![插件工程的目录结构](images/2017/01/android自定义gradle插件的目录结构.png)</div><div class="line"></div><div class="line">这里的 *META-INFO* 和 *gradle-pulgins* 是android studio给合并显示了,实际上是一个层级关系.</div><div class="line"></div><div class="line">这样插件代码就完成了,剩下的就是如果打包发布的问题了.</div><div class="line"></div><div class="line">在创建的插件的module工程中的 *build.gradle* 文件中输入一下内容:</div></pre></td></tr></table></figure></p>
<p>apply plugin: ‘groovy’<br>apply plugin: ‘maven’</p>
<p>version = ‘1.0.0’<br>group = ‘com.justyan’<br>archivesBaseName = ‘mygradleplugin’<br>repositories {<br>    mavenCentral()<br>}</p>
<p>dependencies {<br>    compile gradleApi()<br>    compile localGroovy()<br>}<br>// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target<br>compileGroovy {<br>    sourceCompatibility = 1.7<br>    targetCompatibility = 1.7<br>    options.encoding = “UTF-8”<br>}<br>uploadArchives {<br>    repositories {<br>        mavenDeployer {<br>            repository(url: “file:////Users/justyan/Downloads/repo”)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">version用来表示maven生成的jar包版本号,group表示属于哪个组织, *archivesBaseName* 表示生成的java的名称.最后在 *uploadArchives* 中指定了生成的maven目录在哪里.这个目录你可以随意指定,只要后续引用的时候前后一致就可以.</div><div class="line"></div><div class="line">完成这个之后,我们调用这个工程的 *uploadArchives* task:</div></pre></td></tr></table></figure>
<p>./gradlew -q uploadArchives<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">然后就会在上面的指定目录下生成对应的maven文件了.</div><div class="line"></div><div class="line">最后,来看下如何在其他工程中引用.</div><div class="line"></div><div class="line">在要引用的工程的顶层目录的 *build.gralde* 文件中输入:</div></pre></td></tr></table></figure></p>
<p>buildscript {<br>    repositories {<br>        jcenter()<br>        maven {<br>            url uri(‘file:////Users/justyan/Downloads/repo’)<br>        }<br>    }<br>    dependencies {<br>        classpath ‘com.android.tools.build:gradle:2.2.2’<br>        classpath group: ‘com.justyan’, name: ‘mygradleplugin’,<br>                version: ‘1.0.0’<br>        // NOTE: Do not place your application dependencies here; they belong<br>        // in the individual module build.gradle files<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">首先指定maven文件目录,和上面的对应,然后在 *dependencies* 中输入组名,插件名,版本号.这样对插件的引用就完成了.最后在要使用的工程中的 *build.gralde* 文件中顶部输入:</div></pre></td></tr></table></figure>
<p>apply plugin: ‘com.justyan.gradle’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">然后用android studio同步一下gradle就可以了.这个时候在旁边的gradle project中是可以看到 *hello* 这个task的,表明插件加载成功.</div><div class="line">![task列表](images/2017/01/gradle project中的新增的task.png)</div><div class="line"></div><div class="line">最后如果我们要使用这个task和上面的方法一样,在终端中输入:</div></pre></td></tr></table></figure></p>
<p>./gradlew -q hello<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以看到在终端中输出:</div></pre></td></tr></table></figure></p>
<p>Hi from gradle from Gradle<br>```<br>这样自定义插件就全部搞定了,后续可以根据需求来自己实现插件中的内容了.</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.gradle.org/current/userguide/custom_plugins.html" title="cutom_plugin" target="_blank" rel="external">cutom_plugin</a></p>
<p><a href="https://gold.xitu.io/entry/577bc26e165abd005530ead8" title="在 Android Studio 中自定义 Gradle 插件" target="_blank" rel="external">在 Android Studio 中自定义 Gradle 插件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android自定义gradle插件&quot;&gt;&lt;a href=&quot;#android自定义gradle插件&quot; class=&quot;headerlink&quot; title=&quot;android自定义gradle插件&quot;&gt;&lt;/a&gt;android自定义gradle插件&lt;/h2&gt;&lt;p&gt;  在and
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>富爸爸 穷爸爸 读书笔记</title>
    <link href="http://pheobusyy.github.io/2017/01/23/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AF%8C%E7%88%B8%E7%88%B8%20%E7%A9%B7%E7%88%B8%E7%88%B8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://pheobusyy.github.io/2017/01/23/2017/读书笔记/富爸爸 穷爸爸读书笔记/</id>
    <published>2017-01-23T00:47:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="富爸爸-穷爸爸-读书笔记"><a href="#富爸爸-穷爸爸-读书笔记" class="headerlink" title="富爸爸 穷爸爸 读书笔记"></a>富爸爸 穷爸爸 读书笔记</h2><p> 我一个爸爸总是习惯对说”我可付不起”,而另一个爸爸则禁止我们说这样的话,他坚持让我们说:”我怎样才能付得起?” 这两句话,一句是陈述句,一句是疑问句.一句让你放弃,而另一句则促使你去想办法.我那个在不久之后就富起来的爸爸解释,当你下意识的说出”我付不起”的时候,你的大脑就会停止思考,而如果你自问”我怎么才能付得起”,则会让你的大脑动起来.</p>
<p> 富爸爸说:”我的大脑越用越活,大脑越活,我挣点钱就越多”.他认为,下意识的说”我可付不起”意味着精神上的懒惰.</p>
<p> 在遇到钱的问题时,一个爸爸习惯于逃避,另一个爸爸则总是想办法解决问题.长此以往,其结果就是,一个爸爸的理财能力越来越弱,而另一个爸爸的理财能力越来越强.这种结果类似于一个经常去健身房锻炼的人与一个总坐在沙发上看电视的人在体质上的不同变化.适当的体育锻炼可以增加获得健康的机会,同时,适当的脑力训练可以增加获得财富的机会.懒惰必定会让你的体质变弱,财富减少.</p>
<p> 我得说生活才是最好的老师.大多数的时候,生活不会和你说什么,只会推着你转,每一次推,它都像是在说: “喂,醒一醒,我要让你学点东西.”<br><a id="more"></a><br> 人们通常会做两件事,一些人在生活推着他转的同时,抓住生活赐予的每个机会;而另一些人则非常生气,去与生活抗争.他们与老板抗争,与工作抗争,甚至与自己的配偶抗争,他们不知道生活同时也给了他们机会.</p>
<p> “生活推着我们所有的人,有的人放弃了,有些人在抗争.少数人学会儿了这门课程,取得了进步,他们欢迎生活来推动他们,对他们来说,这种推动意味着他们需要并愿意去学习一些东西,他们学习,然后取得进步.但大多数人放弃了,还有一部分人像你一样在抗争.”</p>
<p> “你最好改变一下观点,停止责备我,不要认为是我的问题.如果你认为是我的问题,你就会想改变我;如果你认为问题在你那儿,你就会儿改变自己,学习一些东西让自己变得更聪明.大多数人认为世界上除了自己之外,其他人都应该改变.让我告诉你吧,改变自己比改变他人更容易.”</p>
<p> 你看,真正的学习需要精力,激情和热切的愿望.愤怒是其中一个重要的组成部分,因为激情正是愤怒和热爱的结合体.说到钱,大多数人都希望稳稳妥妥地挣钱,这样他们才能感到安全,关于钱,他们没有激情,有的只是恐惧.</p>
<p> 生活从此被这两种感觉所控制: 恐惧和贪婪.给他们更多的钱,他们就会以更高的开支重复这种循环.</p>
<p> “他们并不清楚自己真正的感觉,只是做出反应,而不去思考.他们感到恐惧,于是就去工作,希望钱能消除恐惧,但没有奏效.于是,恐惧追逐着他们,他们只好又去工作,再一次期望钱能平复这种恐惧,但还没有成功.恐惧使他们落入工作的陷阱,挣钱-工作-挣钱,希望恐惧就此烟消云散.但每天他们起床时,就会发现恐惧又与他们一起醒来了.恐惧使成千上万的人彻夜难眠,忧心忡忡.所以他们又起床去工作了,希望薪水能消除噬咬他们灵魂的恐惧.钱主宰着他们的生活,他们拒绝去分辨真想,钱控制了他们的情感和灵魂.”</p>
<p> “我遇到过很多人,他们说’我对钱没兴趣’,可他们却每天工作8小时,这只能说明他们并没有说出真想,如果他们对钱没兴趣,又何必工作呢?这种人比敛财的人病的更重.”</p>
<p> “造成贫困和财务问题的主要原因是恐惧和无知,而不是经济环境,政府或者富人.人们自身的恐惧和无知使他们困在陷阱里,所以你们应该去上学,接受高等教育,而让我来教你们怎样不落入陷阱.”</p>
<p> 从现在开始,对你们来说最重要的是,运用感情作长远打算,别让感情控制了思想.大多数人让恐惧和贪婪来支配自己,这是无知的开始.</p>
<p> 他说一个人一旦停止了了解有关自己的知识和信息,就会变得无知.这种斗争实际上就是你时刻都要做的一种决定:是通过不断学习打开自己的心扉,还是封闭自己的头脑.</p>
<p> “对许多人来说,离开学校是学习的终点而不是起点.”</p>
<p> “要学会让感情跟随你的思想,而不是让思想跟随的感情.”</p>
<p> “所谓的荆棘之路就是指我们的恐惧和贪婪.走进我们的恐惧,直面我们的贪婪,弱点和缺陷是唯一的出路.这条路需要你用心去确定你的思想.”</p>
<p> 你要花时间去思考这个问题:更努力工作是解决问题的最好方法吗? 大多数人都害怕知道真相-他们被恐惧所支配-不敢去思考,就出门去找工作了.</p>
<p> “记住我之前说过的haunted,工作只是面对长期问题的一种暂时的解决方法.”</p>
<p> 大多数人没有意识到,在生活中你挣了多少钱并不重要,重要的是你留下多少钱.</p>
<p> <em>你必须明白资产和负债的区别,并且购买资产.如果你想致富,这一点你必须知道.这就是第一条规则,也是唯一一条规则.</em></p>
<p> <em>富人获得资产,而穷人和中产阶级获得负债,只不过他们以为那些负债就是资产.</em></p>
<p> <em>资产就是你把钱放进你口袋的东西.</em></p>
<p><img src="images/2017/01/富爸爸穷爸爸资产负债图.jpg" alt=" 资产负债图"></p>
<p>日本人注重3中力量:剑,宝石和镜子</p>
<ol>
<li>剑象征着武器的力量</li>
<li>宝石象征金钱的力量</li>
<li>镜子象征 <em>自知</em> 的力量 (自问,”这有意义吗?”)</li>
</ol>
<p>财富就是将资产项产生的现金与支出项流出的现金进行比较而定的.</p>
<blockquote>
<p>富人买入资产<br>穷人只有支出<br>中产阶级购买自以为是资产的负债</p>
</blockquote>
<p>第三个秘诀是: “关注自己的事业.” 存在财务问题的经常耗费医生为别人工作,其中许多人在他们不能工作时就变得一无所有.</p>
<p>真正的资产可以分为以下几类:</p>
<ol>
<li>不需要我到场就可以正常运作的业务.我拥有它们,但有别人经营和管理. <em>如果我必须在那儿工作,那它就不是我的事业而是我的职业了.</em></li>
<li>股票</li>
<li>债券</li>
<li>共同基金</li>
<li>能够产生收入的房地产</li>
<li>票据(借据)</li>
<li>版税,如音乐,手稿,专利</li>
<li>其他任何有价值,可产生收入或者增值潜力并且具有很好销路的东西</li>
</ol>
<p>富人最后才买奢侈品.</p>
<p>真正的奢侈品是对投资和积累真正资产的奖励</p>
<p>富人通过创办公司来限制其每次航行的风险.他们吧资金注入一间公司,这间公司则雇一批船员去”新世界”寻宝.一旦船沉了,船员会丧生,但富人损失的仅限于他投资这次航行的资金.</p>
<p>学习让钱为我工作而不是我为钱工作的第一课,关系到力量,如果你为钱工作,你就把力量给了你的老板,如果让钱为你工作,你就能控制这种力量</p>
<p>我的受过高等教育的爸爸总是鼓励我去一家大公司找个好工作.它的价值观是:”顺着公司的梯子,一步步往上爬.” 他不知道,如果只靠雇主的工资,我永远只能是一头乖乖待挤的奶牛.</p>
<p>当我对富爸爸讲了我爸爸的建议时,他笑了.”为什么不当梯子的主人?”这是他的回答.</p>
<p>财商是由个方面的专门知识构成的:</p>
<ol>
<li>会计</li>
<li>投资</li>
<li>了解市场</li>
<li>法律</li>
</ol>
<p>投资者分为两类:</p>
<ol>
<li>第一类也是最普遍的一类,即进行一揽子投资的人.</li>
<li>第二类是自己创造投资机会的投资者.</li>
</ol>
<p>如果要成为第二类投资者,你还必须具备3种技能:</p>
<ol>
<li>如何寻找其他人都忽视的机会.</li>
<li>如何增加资金.</li>
<li>怎样把精明的人组织起来.</li>
</ol>
<p>“工作(job)一词就是’比破产强一点’(just over broke).”</p>
<p>“工人付出最大的努力以免于被解雇,而雇主提供最低工资以防止工人辞职.”</p>
<p>成功锁必需的管理技能包括:</p>
<ol>
<li>对现金流的管理.</li>
<li>对系统(包括本人,时间,家庭)的管理</li>
<li>对人员的管理</li>
</ol>
<p>他们(德州人)驾驭生活的方式,他们获得很大气,不像这儿的大部分人在碰到金钱问题时,就变得像斜齿鳊一样.斜齿鳊在被光照时会非常害怕,而这种人在杂货店店员少找两毛五分钱时,便会抱怨不停.</p>
<p>富爸爸经常跟我和迈克说,大部分人在财务上不成功的最大原因是他们的做法过于安全. “因为太害怕失败,所以才会失败.”他常这么说.</p>
<p>“胜利意味着不害怕失败”.</p>
<p>“忙碌的人常常是最懒惰的人”</p>
<p>怎样才能治疗这种惰性呢?答案就是要”贪婪”一点.</p>
<p>“我可付不起”带来的悲哀和无助感会使人们失望,迟钝,以至于意志消沉.”我怎样才能付得起”则打开了充满可能性的快乐和梦想之门.</p>
<p>没有强有力的理由和目标,任务事都会变得非常困难.</p>
<p>每天作出自己的选择-选择的力量</p>
<p>阻碍人们去思考两件事情:第一是时间,这是你最珍贵的资产;第二是学习,正因为你没有钱,就更要去学习.事实上我们每天都应该作出一个选择,这个选择就是利用自己的时间,金钱和头脑里学到的东西作出的.</p>
<p>在今天这个快速变化的社会中,你学到的东西再多都不算多,因为当你学到时往往就已经过时了.问题在于 <em>你学得有多快</em> ,这种技能是无价之宝.如果你想赚钱,寻找一条捷径是非常关键的.</p>
<p>首先支付自己-自律的力量 .如果你控制不了自己,就别想着致富.</p>
<p>能否自律是讲富人,穷人和中产阶级区分开来的首要因素.</p>
<p>开创事业所必备的最重要的3种管理技能是:</p>
<ol>
<li>现金流管理</li>
<li>人事管理</li>
<li>个人时间管理</li>
</ol>
<p>金钱是一种观念,如果你想要更多的钱,只需改变你的思想.任何一个白手起家的人都是在某种思想的指导下,从小生意做起,然后不断做大.投资也是如此,起初只需要一点钱,最后增长到大数额.</p>
<p>上天赐予我们每个人两样伟大的礼物: 思想和时间.你可以运用这两件礼物去做你愿意做的事情.美一美元钞票到你手中,你,且只有你,才有权决定自己的前途.愚蠢的用掉他,你就选择了贫困;把钱用在负债项上,你就会成为中产阶级;投资于你的头脑,学习如何获取资产,富有将成为你的目标和你的未来.选择只能由你作出.每一天,面对每一美元,你都在作出自己是成为一个富人,穷人还是中产阶级的抉择.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;富爸爸-穷爸爸-读书笔记&quot;&gt;&lt;a href=&quot;#富爸爸-穷爸爸-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;富爸爸 穷爸爸 读书笔记&quot;&gt;&lt;/a&gt;富爸爸 穷爸爸 读书笔记&lt;/h2&gt;&lt;p&gt; 我一个爸爸总是习惯对说”我可付不起”,而另一个爸爸则禁止我们说这样的话,他坚持让我们说:”我怎样才能付得起?” 这两句话,一句是陈述句,一句是疑问句.一句让你放弃,而另一句则促使你去想办法.我那个在不久之后就富起来的爸爸解释,当你下意识的说出”我付不起”的时候,你的大脑就会停止思考,而如果你自问”我怎么才能付得起”,则会让你的大脑动起来.&lt;/p&gt;
&lt;p&gt; 富爸爸说:”我的大脑越用越活,大脑越活,我挣点钱就越多”.他认为,下意识的说”我可付不起”意味着精神上的懒惰.&lt;/p&gt;
&lt;p&gt; 在遇到钱的问题时,一个爸爸习惯于逃避,另一个爸爸则总是想办法解决问题.长此以往,其结果就是,一个爸爸的理财能力越来越弱,而另一个爸爸的理财能力越来越强.这种结果类似于一个经常去健身房锻炼的人与一个总坐在沙发上看电视的人在体质上的不同变化.适当的体育锻炼可以增加获得健康的机会,同时,适当的脑力训练可以增加获得财富的机会.懒惰必定会让你的体质变弱,财富减少.&lt;/p&gt;
&lt;p&gt; 我得说生活才是最好的老师.大多数的时候,生活不会和你说什么,只会推着你转,每一次推,它都像是在说: “喂,醒一醒,我要让你学点东西.”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;搞定-无压工作的艺术&gt;</title>
    <link href="http://pheobusyy.github.io/2017/01/21/2017/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%3C%E6%90%9E%E5%AE%9A-%E6%97%A0%E5%8E%8B%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%89%BA%E6%9C%AF%3E/"/>
    <id>http://pheobusyy.github.io/2017/01/21/2017/读书笔记/&lt;搞定-无压工作的艺术&gt;/</id>
    <published>2017-01-21T04:06:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搞定-无压工作的艺术"><a href="#搞定-无压工作的艺术" class="headerlink" title="搞定-无压工作的艺术"></a>搞定-无压工作的艺术</h2><h3 id="原则-有效处理内心的承诺"><a href="#原则-有效处理内心的承诺" class="headerlink" title="原则:有效处理内心的承诺"></a>原则:有效处理内心的承诺</h3><blockquote>
<p>任何事情如果没有找到应有的位置和恰当存在方式的事物,都会pa盘踞在我们的脑海中,成为悬而未决的问题</p>
</blockquote>
<p>为了能够高效应对这一问题,首先,你必须明确并收集所有那些”进场唤醒你模糊记忆”的事情,搞定他们对你而言的真正意义,然后决定如何推动它们.</p>
<h3 id="管理承诺时的基本要求"><a href="#管理承诺时的基本要求" class="headerlink" title="管理承诺时的基本要求"></a>管理承诺时的基本要求</h3><p>如果希望出色地管理好所有的工作,那么,你需要做到以下几点:</p>
<ol>
<li>如果这件事总是占据你的大脑,你的思维就会受阻.任何一件你认为还没有完成的事情,都必须被置于一个客观,可靠地体系中,后者是我成为”文件夹”的工具之中–必须经常回访并予以清理.</li>
<li>在明白你的工作到底是什么后,你还必须做出判断:需要采取什么行动来推动工作进程</li>
<li>一旦决定了需要采取的行动方案,你必须在某一个你经常查阅的系统中保存好与这些行动相关的提示信息.</li>
</ol>
<h3 id="检验这种模式的一个重要训练"><a href="#检验这种模式的一个重要训练" class="headerlink" title="检验这种模式的一个重要训练"></a>检验这种模式的一个重要训练</h3><blockquote>
<p>像实干家一样思考,像思想家一样行动</p>
</blockquote>
<p>思考,需要构建以结果和行动为导向的思维方式.</p>
<h3 id="为什么有些事总是萦绕在我们的心头"><a href="#为什么有些事总是萦绕在我们的心头" class="headerlink" title="为什么有些事总是萦绕在我们的心头"></a>为什么有些事总是萦绕在我们的心头</h3><p>通常情况下,你对一些事情总是念念不忘,这是因为你希望他们的情况能有所改善,另外:</p>
<ul>
<li>你还没有明确的认定它们的预期结果是什么.</li>
<li>你还没有确定你下一步的具体行动是什么.</li>
<li>你还没有把关于预期结果和即将采取行动的提示信息存入你所依赖的系统中去.</li>
</ul>
<h3 id="“材料”的转化"><a href="#“材料”的转化" class="headerlink" title="“材料”的转化"></a>“材料”的转化</h3><p>“材料(stuff)”的定义:进入你的精神或现实世界中但尚未找到归属的任何事情,你尚未确定他对你的真正意义,预期结果和下一步具体行动的所有事情.</p>
<blockquote>
<p>我们需要把收集和积累的所有”材料”都转化成包含重要行动,项目和有用信息的明确清单.<br>当想法对行动具有推动作用的时候,它就是有益的;当想法成为行动的替代时,它就会成为行动的障碍.</p>
</blockquote>
<h3 id="过程-管理你的行动"><a href="#过程-管理你的行动" class="headerlink" title="过程:管理你的行动"></a>过程:管理你的行动</h3><p>你首先要养成一个习惯:清空你的大脑中的所有事物.</p>
<h3 id="管理行动的重要性"><a href="#管理行动的重要性" class="headerlink" title="管理行动的重要性"></a>管理行动的重要性</h3><p>问题的关键在于,他们无法断定到底要干些什么,下一步需要采取哪些行动.</p>
<h3 id="对行动的横向管理和纵向管理"><a href="#对行动的横向管理和纵向管理" class="headerlink" title="对行动的横向管理和纵向管理"></a>对行动的横向管理和纵向管理</h3><p>横向控制和纵向控制的目标是一致的:解除你的心理负担,并把事情做好.</p>
<h3 id="最重要的技巧-把一切事物赶出大脑"><a href="#最重要的技巧-把一切事物赶出大脑" class="headerlink" title="最重要的技巧:把一切事物赶出大脑"></a>最重要的技巧:把一切事物赶出大脑</h3><blockquote>
<p>通常,盘踞在你脑中问题的数量与解决问题的效率成反比<br>对一件事情不需要进行两次相同的思考,除非你喜欢重复思考<br>任何仅存于内心的”将会,可能或应该”性质的承诺,都会造成非理性和无法排解的全天候压力<br>思想上开小差,将是你最难战胜的敌人.</p>
</blockquote>
<h3 id="横向管理-横向管理工作流程的5个步骤"><a href="#横向管理-横向管理工作流程的5个步骤" class="headerlink" title="横向管理:横向管理工作流程的5个步骤"></a>横向管理:横向管理工作流程的5个步骤</h3><p>我们:(1)收集引起我们注意的事务和信息;(2)理清每个项目的意义和相关措施;(3)组织整理结果,提出选项;(4)进行思考回顾;(5)选择行动.这些阶段共同构成了我们生活中的横向管理系统,而且我们还可以随时向其中添加所需要考虑的新事项.</p>
<h3 id="收集阶段"><a href="#收集阶段" class="headerlink" title="收集阶段"></a>收集阶段</h3><h4 id="影响收集成功的因素"><a href="#影响收集成功的因素" class="headerlink" title="影响收集成功的因素"></a>影响收集成功的因素</h4><p>成功收集的三个必要条件:</p>
<ol>
<li>每一件悬而未决的事情都必须存储在你的收集系统中,而不是在你的大脑里</li>
<li>你应该尽可能地控制收集工具的数量,越少越好,够用即可</li>
<li>你必须定期清理这些设备</li>
</ol>
<h3 id="理清阶段"><a href="#理清阶段" class="headerlink" title="理清阶段"></a>理清阶段</h3><p>流程如下:</p>
<ol>
<li>它是什么?</li>
<li>是否需要采取行动?<ul>
<li>否<ol>
<li>无用的垃圾,根本没有必要保留</li>
<li>目前不需要,但日后可能需要处理(孵化)</li>
<li>项目具有潜在有用信息,日后可能会排上用场(参考)</li>
</ol>
</li>
<li>是<ol>
<li>你承诺完成哪些工作?达成哪些目标?(项目)</li>
<li>下一步需要采取什么行动?<ul>
<li>立即执行</li>
<li>指派他人<ol>
<li>等待别人完成</li>
</ol>
</li>
<li>延迟处理<ol>
<li>日程表(指定时间完成)</li>
<li>下一步行动(需要尽快完成的行动)<h3 id="组织整理阶段"><a href="#组织整理阶段" class="headerlink" title="组织整理阶段"></a>组织整理阶段</h3>对你那些可以付诸行动的事物,你需要:一个项目清单,一个保存项目规划和资料的存储系统,一个日程表,一个下一步行动清单,以及一个等待清单(清单中包含的内容是那些等待别人完成的任务)</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p>项目就是任何一个需要多个步骤才能完成的任务.<br>我们可以将项目视为一系列未尽之事.</p>
<h4 id="下一步行动的归类"><a href="#下一步行动的归类" class="headerlink" title="下一步行动的归类"></a>下一步行动的归类</h4><h5 id="日程表"><a href="#日程表" class="headerlink" title="日程表"></a>日程表</h5><p>你的日程表上应该标注三种情况:</p>
<ul>
<li>需要在指定时间执行的行动</li>
<li>需要在制定日期执行的行动</li>
<li>需要在指定日期获取的信息</li>
</ul>
<h3 id="回顾阶段"><a href="#回顾阶段" class="headerlink" title="回顾阶段"></a>回顾阶段</h3><p>如果你按照我所推荐的方法建立起个人的组织整理系统,那么拥有一个”项目”清单,一个日程表,”下一步行动”清单(一个或多个)和一个”等待处理”清单就是回顾的全部内容.<br>成功的关键因素:每周回顾<br>每周回顾应该完成以下任务:</p>
<ul>
<li>收集和加工处理所有的”材料”</li>
<li>回顾整个系统</li>
<li>更新各种清单</li>
<li>做到彻底,清楚,实时和完整</li>
</ul>
<h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><h4 id="确定某一个时刻具体行动的”四标准法”"><a href="#确定某一个时刻具体行动的”四标准法”" class="headerlink" title="确定某一个时刻具体行动的”四标准法”"></a>确定某一个时刻具体行动的”四标准法”</h4><ol>
<li>情景</li>
<li>有多少时间</li>
<li>有多少精力</li>
<li>重要性</li>
</ol>
<h3 id="确认每日工作的”三分类法”"><a href="#确认每日工作的”三分类法”" class="headerlink" title="确认每日工作的”三分类法”"></a>确认每日工作的”三分类法”</h3><ol>
<li>执行实现安排好的工作</li>
<li>处理突发事件</li>
<li>安排自己的工作</li>
</ol>
<h3 id="总体检视工作的-“六层分发”"><a href="#总体检视工作的-“六层分发”" class="headerlink" title="总体检视工作的 “六层分发”"></a>总体检视工作的 “六层分发”</h3><ul>
<li>5楼视野:目的和原则</li>
<li>4楼视野:愿景</li>
<li>3楼视野:目标</li>
<li>2楼视野:关注点及责任范围</li>
<li>1楼视野:当前项目</li>
<li>地面:当前行动</li>
</ul>
<h3 id="控制项目-纵向管理项目的5个阶段"><a href="#控制项目-纵向管理项目的5个阶段" class="headerlink" title="控制项目:纵向管理项目的5个阶段"></a>控制项目:纵向管理项目的5个阶段</h3><p>轻松自如的控制一切的关键是:(1) 明确判定工作的预期结果(目标)以及为实现目标所需要执行的下一步具体行动.(2) 把一切尚未解决的工作的提示信息安置在一个完善可靠的系统中,并定期回顾和审阅.</p>
<p>人的大脑在面对任何一项任务的时候,都要经过5个步骤:</p>
<ol>
<li>定义目标和原则</li>
<li>展望结果</li>
<li>头脑风暴/集思广益</li>
<li>组织整理</li>
<li>明确下一步的行动方案</li>
</ol>
<p>重视原则的另一个重要原因:它能为我们的行为提供清晰明确地指导</p>
<h4 id="头脑风暴的关键技巧"><a href="#头脑风暴的关键技巧" class="headerlink" title="头脑风暴的关键技巧"></a>头脑风暴的关键技巧</h4><p>这些基本的原则可以归纳为以下3点:</p>
<ul>
<li>不判断,不质疑,不评估,不批判</li>
<li>追求数量,不求质量</li>
<li>把分析组织工作置于次要的地位</li>
</ul>
<h4 id="组织整理的基本要点"><a href="#组织整理的基本要点" class="headerlink" title="组织整理的基本要点"></a>组织整理的基本要点</h4><p>组织整理的关键步骤如下:</p>
<ul>
<li>明确事件的重要组成部分</li>
<li>整理分类(按照下面一个或多个标准)<ul>
<li>构成因素</li>
<li>先后顺序</li>
<li>重要程度</li>
</ul>
</li>
<li>足够详细的描述</li>
</ul>
<p>这两个基本层面就是:我们要执行的行动和我们正在推进的项目(折现项目催动了行动).<br>这些模式有一些基本原则- 你必须收集生活中所有悬而未决的问题;然后对这些问题进行预判和处理,并确定下一步行动;接着对这些行动进行组织整理,回顾,最后付诸实施.</p>
<p>处理阶段的方法指导<br>学习的最佳途径是实践.但是,在开始之前,我还要强调几个基本原则:</p>
<ol>
<li>首先要处理工作篮中最上面的事务</li>
<li>一次一事</li>
<li>永远不要把事务再次放回工作篮</li>
</ol>
<p>下一步行动必须是可执行的具体行动</p>
<p>如果某个”下一步行动”的用时不会超过两分钟,那么不要犹豫,立刻动手完成它.</p>
<h4 id="为你创造性的想象力创建一个清单"><a href="#为你创造性的想象力创建一个清单" class="headerlink" title="为你创造性的想象力创建一个清单"></a>为你创造性的想象力创建一个清单</h4><p>典型的事情包括有:</p>
<ul>
<li>为你的家庭购买或者建造房屋</li>
<li>开始从事的业余爱好</li>
<li>想要学习的技能</li>
<li>想要表达的创意</li>
<li>需要购买的服装和饰品</li>
<li>想要得到的玩物(高科技或其他类型的玩具!)</li>
<li>计划中的旅行</li>
<li>打算参与的公益性活动</li>
<li>想了解的事情,想做的事情</li>
</ul>
<h4 id="每周回顾"><a href="#每周回顾" class="headerlink" title="每周回顾"></a>每周回顾</h4><p>如果你拥有自己独立的工作空间,你就可以让自己免于外界的干扰;如果你的工作是周一至周五的标准五天制,那么我建议你在最后工作日下午留出两个小时的时间,专门用于每周回顾.</p>
<h3 id="大局的回顾"><a href="#大局的回顾" class="headerlink" title="大局的回顾"></a>大局的回顾</h3><p>无论是在生活还是工作中,如何找出合适的范围,如果做出合适的决定,如何确定合理的时间间隔,都只有一个标准,就是让你自己感到一切清清楚楚就可以了.这是对你的终身邀约,也是你的终生义务,旨在让你实现所有未竟使命或者意向.</p>
<h3 id="检视工作"><a href="#检视工作" class="headerlink" title="检视工作"></a>检视工作</h3><p>你就有必要考虑一下,要做些什么才能让自己在这条路上走的更远,更好.因此,你应该对自己提出的问题是:</p>
<ol>
<li>我们机构的长期目标和目的是什么?为了履行我的责任,我需要完成哪些相关的项目?</li>
<li>我为自己设定的长期目标和目的是什么?为达成此目标,我改执行哪些项目?</li>
<li>还发生了哪些可能影响到我的行动的重大事情?</li>
</ol>
<h3 id="哪些项目需要你进行计划"><a href="#哪些项目需要你进行计划" class="headerlink" title="哪些项目需要你进行计划?"></a>哪些项目需要你进行计划?</h3><ol>
<li>那些你已经决定了下一步行动,却依然吸引你注意力的事务</li>
<li>那些意外冒出的新点子或临时出现新细节的项目</li>
</ol>
<h3 id="找出需要执行的”下一步行动”"><a href="#找出需要执行的”下一步行动”" class="headerlink" title="找出需要执行的”下一步行动”"></a>找出需要执行的”下一步行动”</h3><p>从最基础的层面入手,定义出行动的具体计划,并将行动提示信息有效地组织和管理起来,这是我们提高工作效率,营造轻松内循环境的关键.</p>
<h3 id="学会关注结果"><a href="#学会关注结果" class="headerlink" title="学会关注结果"></a>学会关注结果</h3><p>处理日常事务时一个重要的技巧就是:学会在脑海中对结果做出正面的预期,并以此影响实践.</p>
<h3 id="预期结果的重要性"><a href="#预期结果的重要性" class="headerlink" title="预期结果的重要性"></a>预期结果的重要性</h3><p>生活中只存在两个问题:(1) 你知道你想要达成的目标,但是不知道如何达成它; (2) 你不知道你的目标到底是上面.<br>也就存在两种解决方法:</p>
<ul>
<li>找到你的目标(结果)</li>
<li>找到具体的方法(行动)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搞定-无压工作的艺术&quot;&gt;&lt;a href=&quot;#搞定-无压工作的艺术&quot; class=&quot;headerlink&quot; title=&quot;搞定-无压工作的艺术&quot;&gt;&lt;/a&gt;搞定-无压工作的艺术&lt;/h2&gt;&lt;h3 id=&quot;原则-有效处理内心的承诺&quot;&gt;&lt;a href=&quot;#原则-有效处理内心
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java反射相关知识</title>
    <link href="http://pheobusyy.github.io/2017/01/19/2017/java%E5%8F%8D%E5%B0%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://pheobusyy.github.io/2017/01/19/2017/java反射相关知识/</id>
    <published>2017-01-19T07:16:00.000Z</published>
    <updated>2017-02-25T01:12:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java反射相关知识"><a href="#java反射相关知识" class="headerlink" title="java反射相关知识"></a>java反射相关知识</h2><h3 id="Class-getDeclaringClass-和-Class-getEnclosingClass的区别"><a href="#Class-getDeclaringClass-和-Class-getEnclosingClass的区别" class="headerlink" title="Class.getDeclaringClass 和 Class.getEnclosingClass的区别"></a>Class.getDeclaringClass 和 Class.getEnclosingClass的区别</h3><p>getDeclaringClass表示这个内的声明类是那个,常用于获取在当前中声明的内部类<br>getEnclosingClass表示获取当前类的外部调用类,也可以用于在内部类中获取外部类.<br>二者的区别在于匿名内部类,如果这个类不是在当前类中声明,那么getDeclaringClass返回null,而getEnclosingClass返回外层类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClassReflection</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</div><div class="line">         <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                 Class&lt;? extends Runnable&gt; aClass = <span class="keyword">this</span>.getClass();</div><div class="line">                 Class&lt;?&gt; declaringClass2 = aClass.getDeclaringClass();</div><div class="line">                 Class&lt;?&gt; enclosingClass1 = aClass.getEnclosingClass();</div><div class="line">                 System.out.println(<span class="string">"declaringClass2 = "</span>+declaringClass2);</div><div class="line">                 System.out.println(<span class="string">"enclosingClass1 = "</span>+enclosingClass1);</div><div class="line">             &#125;</div><div class="line">         &#125;).start();</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">declaringClass2 = null</div><div class="line">enclosingClass1 = class com.justyan.reflection.TestClassReflection</div></pre></td></tr></table></figure>
<h3 id="打印出继承关系"><a href="#打印出继承关系" class="headerlink" title="打印出继承关系"></a>打印出继承关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAncestor</span><span class="params">(Class aclass, ArrayList&lt;Class&gt; list)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (aclass != <span class="keyword">null</span>) &#123;</div><div class="line">           Class superclass = aclass.getSuperclass();</div><div class="line">           <span class="keyword">if</span> (superclass != <span class="keyword">null</span>) &#123;</div><div class="line">               list.add(superclass);</div><div class="line">               printAncestor(superclass, list);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>最后把所有的父类都在list中.</p>
<h3 id="Class-getGenericInterfaces方法和Class-getInterfaces方法的区别"><a href="#Class-getGenericInterfaces方法和Class-getInterfaces方法的区别" class="headerlink" title="Class.getGenericInterfaces方法和Class.getInterfaces方法的区别"></a>Class.getGenericInterfaces方法和Class.getInterfaces方法的区别</h3><p>getGenericInterfaces返回所有的实现接口,包含接口的泛型<br>getInterfaces返回所有的接口class对象,不包含泛型信息</p>
<h3 id="Class-getTypeParameters-方法"><a href="#Class-getTypeParameters-方法" class="headerlink" title="Class.getTypeParameters 方法"></a>Class.getTypeParameters 方法</h3><p>getTypeParameters返回类的泛型信息</p>
<h3 id="Class-getDeclaredMethods-和-Class-getMethods-区别"><a href="#Class-getDeclaredMethods-和-Class-getMethods-区别" class="headerlink" title="Class.getDeclaredMethods 和 Class.getMethods 区别"></a>Class.getDeclaredMethods 和 Class.getMethods 区别</h3><p>这类前面加了 <em>Declared</em> 的方法,只是获取当前类的成员,不包含父类的相关成员<br>而getMethods会获取所有的方法</p>
<h3 id="Class-getFields和Class-getDeclaredFields"><a href="#Class-getFields和Class-getDeclaredFields" class="headerlink" title="Class.getFields和Class.getDeclaredFields"></a>Class.getFields和Class.getDeclaredFields</h3><p>getFields获取当前类所有的 <em>public</em> 属性<br>getDeclaredFields返回当前类所有的属性<br>下面的话摘自官方教程</p>
<blockquote>
<p>Tip: The Class.getField() and Class.getFields() methods return the public member field(s) of the class, enum, or interface represented by &gt;the Class object. To retrieve all fields declared (but not inherited) in the Class, use the Class.getDeclaredFields() method.</p>
</blockquote>
<h3 id="反射中获取method参数的相关属性"><a href="#反射中获取method参数的相关属性" class="headerlink" title="反射中获取method参数的相关属性"></a>反射中获取method参数的相关属性</h3><p>method.getParameters用来获取该方法的所有参数.返回一个 <em>Parameter[]</em> 数组.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printParam</span><span class="params">(Method declaredMethod)</span> </span>&#123;</div><div class="line">    Parameter[] parameters = declaredMethod.getParameters();</div><div class="line">    <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</div><div class="line">        System.out.println(parameter.getType());</div><div class="line">        System.out.println(parameter.getName());</div><div class="line">        System.out.println(parameter.getModifiers());</div><div class="line">        System.out.println(parameter.isImplicit());</div><div class="line">        System.out.println(parameter.isNamePresent());</div><div class="line">        System.out.println(parameter.isSynthetic());</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"-------------------------"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分别来解释下这几个方法的用法:</p>
<ol>
<li><em>getType</em> 获取参数类型,比如int,java.lang.String等</li>
<li><em>getName</em> 获取参数名称,这里有个问题要注意,默认情况下获取到的参数都是 <em>arg0</em> ,<em>arg1</em> 等这样的系统生成的参数名称,是获取不到原始的命名的,这样做的目的是为了节约class文件的空间.如果想要获取到原始参数名称,需要在编译的 <em>javac</em> 后面加上 <em>-parameters</em> 参数.</li>
<li><p><em>getModifiers</em> 是一个int值,是把下面要3种情况相加得出的.<br><img src="/images/2017/01/method的modifiers属性说明.png" alt="modifiers属性说明"></p>
</li>
<li><p><em>isImplicit</em> 和 <em>isSynthetic</em> 下面重点来讲一下</p>
</li>
<li><em>isNamePresent</em> 对应上面的 <em>getName</em> 的情况,如果是从显示的原始的class中参数命名就是true,如果是编译器生成的 <em>arg0</em> 这种方式就是 false.</li>
</ol>
<h4 id="isImplicit-和-isSynthetic"><a href="#isImplicit-和-isSynthetic" class="headerlink" title="isImplicit 和 isSynthetic"></a><em>isImplicit</em> 和 <em>isSynthetic</em></h4><p>先来看 <em>isImplicit</em> 通过字面理解就是 <em>含蓄的,隐式的</em> ,也就是说这个方法并没有在代码中直接声明,确实是存在的.对应的正常情景就是内部类对外部类的引用.我们都知道 <em>非静态</em> 内部类是对外部类有一个引用的.那么编译器在编译的时候生成的内部类的构造方法中是会有一个外部类的对象引用的.就想下面这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterExamples</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterExamples</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> MethodParameterExamples parent;</div><div class="line">        InnerClass(<span class="keyword">final</span> MethodParameterExamples <span class="keyword">this</span>$<span class="number">0</span>) &#123;</div><div class="line">            parent = <span class="keyword">this</span>$<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>innerClass的默认构造函数其实是对外部的MethodParameterExamples有一个引用的,那么innerClass这个默认的构造方法的 <em>isImplicit</em> 属性就是true.</p>
<p>再来看,如果一个方法既不是显式的也不是隐式的而是通过编译器生成的,那么这个 <em>isSynthetic</em> 属性就为true.经典的用在枚举类型中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterExamples</span> </span>&#123;</div><div class="line">    <span class="keyword">enum</span> Colors &#123;</div><div class="line">        RED, WHITE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果答应这里Colors类对象的话,会发现其内部是这样的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Colors</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;<span class="title">Colors</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Colors RED = <span class="keyword">new</span> Colors(<span class="string">"RED"</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Colors BLUE = <span class="keyword">new</span> Colors(<span class="string">"WHITE"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> values = <span class="keyword">new</span> Colors[]&#123; RED, BLUE &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Colors</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, ordinal);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Colors[] values()&#123;</div><div class="line">        <span class="keyword">return</span> values;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Colors <span class="title">valueOf</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (Colors)java.lang.Enum.valueOf(Colors.class, name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里面的构造函数 <em>Colors(String name , ind ordinal)</em> 是隐式声明的,其中的参数是编译器给生成的,那么参数的 <em>isSynthetic</em> 属性就是true.其中的 <em>valueOf</em> 方法中的参数是 <em>isImplicit</em> 的.<br><a href="https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html" target="_blank" rel="external">implicit and synthetic</a></p>
<h3 id="Method-isVarArgs"><a href="#Method-isVarArgs" class="headerlink" title="Method.isVarArgs()"></a>Method.isVarArgs()</h3><p> Method.isVarArgs() 表明方法的参数是不是隐式数组这种格式,比如main方法中的 <em>String… args</em></p>
<h3 id="Method的isSynthetic和isBridge"><a href="#Method的isSynthetic和isBridge" class="headerlink" title="Method的isSynthetic和isBridge"></a>Method的isSynthetic和isBridge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethodModifiers</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Method[] methods = Integer.class.getMethods();</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">"compareTo"</span>)) &#123;</div><div class="line">                System.out.println(method.toGenericString());</div><div class="line">                System.out.println(method.isSynthetic());</div><div class="line">                System.out.println(method.isBridge());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public int java.lang.Integer.compareTo(java.lang.Integer)</div><div class="line">false</div><div class="line">false</div><div class="line">public int java.lang.Integer.compareTo(java.lang.Object)</div><div class="line">true</div><div class="line">true</div></pre></td></tr></table></figure>
<p>编译器会帮助生成一个 <em>compareTo(Object object)</em> 的中间方法,这个方法就是一个中间方法,用来解决 <em>泛型擦除?</em> 这里我也不是很明白.</p>
<h3 id="method反射调用注意事项"><a href="#method反射调用注意事项" class="headerlink" title="method反射调用注意事项"></a>method反射调用注意事项</h3><ol>
<li><p>如果要反射的方法需要传入的参数是一个数组,就像这样的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(String... arr)</span> </span>&#123;</div><div class="line">       System.out.println(<span class="string">"Iam test!!!!------"</span> +arr);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如果你直接这样调用是不行的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] mainArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;;</div><div class="line">method.invoke(TestMethodBean2.class.newInstance(), mainArgs);</div></pre></td></tr></table></figure>
<p>虽然你传入的确实是一个数组,但是invoke方法会认为你要调用的方法是参数个数为数组容量的方法,也就是说这里认为你想调用的是包含两个参数的test方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(String a,String b)</span> </span>&#123;</div><div class="line">       System.out.println(<span class="string">"Iam test!!!!------"</span> +arr);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如果要正确调用,应该把数组对象转换为Object对象,这样就可以了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] mainArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;;</div><div class="line">method.invoke(TestMethodBean2.class.newInstance(), (Object) mainArgs);</div></pre></td></tr></table></figure>
</li>
<li><p>如果要反射一个带有泛型的方法,就像这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMethodBean2</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"it is generic"</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> TestMethodBean2&lt;Integer&gt;().getClass().getDeclaredMethod(<span class="string">"test"</span>,Integer.class);</div></pre></td></tr></table></figure>
<p>是不行的,会找不到这个方法,因为泛型在编译之后是会被擦除的,这个时候应该找的是最顶上的对象object才可以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> TestMethodBean2&lt;Integer&gt;().getClass().getDeclaredMethod(<span class="string">"test"</span>,Object.class);</div></pre></td></tr></table></figure>
</li>
<li><p>对private方法的反射调用<br>要在获取到方法对象之后设置 <em>method.setAccessible(true);</em> 就可以了</p>
</li>
<li><p>如果要反射的方法没有参数,那么调用invoke方法的时候一定要注意</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  public class MethodTrouble &#123;</div><div class="line">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</div><div class="line">        MethodTroubleBean bean = new MethodTroubleBean();</div><div class="line">        Method test = bean.getClass().getDeclaredMethod("test");</div><div class="line">        test.invoke(bean);  //success</div><div class="line">        test.invoke(bean, null); //success ,但是有警告</div><div class="line">        test.invoke(bean, new Object[0]); //success</div><div class="line">        Object o = new Object[0];</div><div class="line">        test.invoke(bean, o);  //wrong IllegalArgumentException</div><div class="line">        Object n = null;</div><div class="line">        test.invoke(bean, n);  //wrong IllegalArgumentException</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MethodTroubleBean &#123;</div><div class="line">    void test() &#123;</div><div class="line">        System.out.println("test");</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">```  </div><div class="line">一定要注意对参数的传入.</div><div class="line"></div><div class="line">### Class.newInstance 和Construction.newInstance的区别</div><div class="line">Class.newInstance只能调用默认的构造函数(没有参数的那个),而且必须是可见的</div><div class="line">Construction.newInstance可以调用所有的构造函数,不管是否是可见的,也不管有多少个参数</div><div class="line">推荐使用后面这个</div><div class="line"></div><div class="line">### 反射创建数组</div><div class="line">```java</div><div class="line">Object o = Array.newInstance(int.class, 3);</div><div class="line">        Array.set(o,0,1);</div><div class="line">        Array.set(o,1,2);</div><div class="line">        Array.set(o,2,3);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.oracle.com/javase/tutorial/reflect/TOC.html" title="java reflect tutorial" target="_blank" rel="external">java reflect tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java反射相关知识&quot;&gt;&lt;a href=&quot;#java反射相关知识&quot; class=&quot;headerlink&quot; title=&quot;java反射相关知识&quot;&gt;&lt;/a&gt;java反射相关知识&lt;/h2&gt;&lt;h3 id=&quot;Class-getDeclaringClass-和-Class-g
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android asyncTask源码分析</title>
    <link href="http://pheobusyy.github.io/2017/01/19/2017/android%20asyncTask%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://pheobusyy.github.io/2017/01/19/2017/android asyncTask源码分析/</id>
    <published>2017-01-19T01:25:00.000Z</published>
    <updated>2017-03-03T08:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-AsyncTask源码分析-android7-0"><a href="#android-AsyncTask源码分析-android7-0" class="headerlink" title="android AsyncTask源码分析(android7.0)"></a>android AsyncTask源码分析(android7.0)</h2><p>  说道AsyncTask相信大家并不陌生,每当涉及到异步线程的的任务处理的时候,我们第一时间就会想到AsyncTask或者Handler.这里AsyncTask主要是android给我们封装了一层异步任务处理流程,方便使用,所以平时大家在UI中执行异步线程的时候会优先使用AsyncTask,今天就通过源码讲解一下AsyncTask的实现原理和注意事项.</p>
<h3 id="AsyncTask的用法"><a href="#AsyncTask的用法" class="headerlink" title="AsyncTask的用法"></a>AsyncTask的用法</h3><p>` <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">`	class MainAsyncTask extends AsyncTask&lt;Object,Object,Object&gt;&#123;`</div><div class="line">	 </div><div class="line">	       @Override</div><div class="line">	       protected void onPreExecute() &#123;</div><div class="line">	           super.onPreExecute();</div><div class="line">	       &#125;</div><div class="line">	 </div><div class="line">	       @Override</div><div class="line">	       protected void onPostExecute(Object o) &#123;</div><div class="line">	           super.onPostExecute(o);</div><div class="line">	       &#125;</div><div class="line">	 </div><div class="line">	       @Override</div><div class="line">	       protected Object doInBackground(Object... params) &#123;</div><div class="line">	           return null;</div><div class="line">	       &#125;</div><div class="line">	   &#125;</div><div class="line">` `</div></pre></td></tr></table></figure></p>
<p>`上面这个自定义AsyncTask就是我们平时的用法,可以看到主要用到3个方法,其中 <em>onPreExecute</em> 和 <em>onPostExecute</em> 分别表示任务开始前后的准备和收尾工作,注意这里这两个方法是在UI主线程中执行的.后面的 <em>doInBackground</em> 是任务的执行的代码,耗时的任务执行代码放在这里.注意这个方法是在异步线程中执行的.</p>
<p>当我们要使用AsyncTask的时候,通常是直接创建AsyncTask对象,然后调用execute方法,这样AsyncTask会先调用 <em>onPreExecute</em> 方法,然后开始执行 <em>doInBackground</em> 方法啊,最后任务完成之后回调 <em>onPostExecute</em> 方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> MainAsyncTask().execute();</div></pre></td></tr></table></figure></p>
<h3 id="AsyncTask源码"><a href="#AsyncTask源码" class="headerlink" title="AsyncTask源码"></a>AsyncTask源码</h3><p>先说结论,AsyncTask的内部实际上维护了一个线程池来调配异步任务(FutureTask)的执行,当异步任务执行完成之后就把结果交给内部的 <em>Handler</em> 来回调到UI主线程中.<br>就这么简单,我们要注意的细节有这么几点:</p>
<ol>
<li>内部线程池的结构类型</li>
<li>3个常用回调方法的调用时机</li>
<li>任务完成之后为什么不能再次调用这个AsyncTask对象重复执行.</li>
</ol>
<p>我们先从常用的 <em>execute</em> 方法入手:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MainThread</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里execute内部又会调用 <em>executeOnExecutor</em> 方法,这里的 <em>sDefaultExecutor</em> 后面再做解释,只要明白其就是一个线程池就可以:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MainThread</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">           Params... params) &#123;</div><div class="line">       <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">           <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">               <span class="keyword">case</span> RUNNING:</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                           + <span class="string">" the task is already running."</span>);</div><div class="line">               <span class="keyword">case</span> FINISHED:</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                           + <span class="string">" the task has already been executed "</span></div><div class="line">                           + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       mStatus = Status.RUNNING;</div><div class="line"></div><div class="line">       onPreExecute();</div><div class="line"></div><div class="line">       mWorker.mParams = params;</div><div class="line">       exec.execute(mFuture);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到,这个代码非常非常的简单,就是判断一下 AsyncTask 对象的状态,如果不是 <em>PENDING</em> 状态就抛出异常.如果是 <em>PENDING</em> 状态就设置为 <em>RUNNING</em> 状态,同时调用 <em>onPreExecute</em> 方法,最后交给线程池的 <em>execute</em> 方法.是不是很清晰.同时在这里发现了我们的第一个回调方法 <em>onPreExecute</em> ,注意这里通过方法上面的注解我们发现是运行在主线程中的.</p>
<p>这里传入线程池的是一个 <em>FutureTask</em> 对象 <em>mFuture</em> ,里面包含了一个 <em>mWorker</em> 对象.下面来看传给线程池的 <em>mWorker</em> 对象的实现. <em>mWorker</em> 对象是一个 <em>WorkerRunable</em> 对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</div><div class="line">      Params[] mParams;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到 <em>WorkerRunnable</em> 对象就是一个 <em>Callable</em> 对象, <em>Callable</em> 和 <em>Runnable</em> 的区别就是有没有返回值的区别.这里AsyncTask线程池中使用的 <em>Callable</em> .<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">       mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">           <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">               Result result = <span class="keyword">null</span>;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">                   <span class="comment">//noinspection unchecked</span></div><div class="line">                   result = doInBackground(mParams);</div><div class="line">                   Binder.flushPendingCommands();</div><div class="line">               &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line">                   mCancelled.set(<span class="keyword">true</span>);</div><div class="line">                   <span class="keyword">throw</span> tr;</div><div class="line">               &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                   postResult(result);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> result;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line"></div><div class="line">       mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   postResultIfNotInvoked(get());</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   android.util.Log.w(LOG_TAG, e);</div><div class="line">               &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</div><div class="line">                           e.getCause());</div><div class="line">               &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                   postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在AsyncTask的构造函数中,完成了 <em>mWorker</em> 对象的初始化.然后把 <em>mWorker</em> 对象传给了 <em>mFuture</em> 对象. 如果对 <em>FutureTask</em> 不是很理解的同学可以去搜索一下相关的资料,非常简单. <em>FutureTask</em> 只是把要运行的对象和其返回值做了一个封装,方便线程池的回调使用.</p>
<p>在 <em>mWorker</em> 的call方法中,我们发现了第二个回调方法 <em>doInBackground</em> ,这个方法用来执行异步任务的,这里是在异步线程中执行的.<br>当任务执行完成之后,会调用 <em>postResult(result);</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">       Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">               <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">       message.sendToTarget();</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里可看到Handler的常规使用.来看Handler的实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">           AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                   <span class="comment">// There is only one result</span></div><div class="line">                   result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                   result.mTask.onProgressUpdate(result.mData);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里Handler里面有两个回调,先说 <em>MESSAGE_POST_RESULT</em> ,这里回到了asyncTask的 <em>finish</em> 方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">            onCancelled(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onPostExecute(result);</div><div class="line">        &#125;</div><div class="line">        mStatus = Status.FINISHED;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><em>finish</em> 方法,有两个点要说明:首先你在外面调用 <em>cancel</em> 停止AsyncTask的时候,AsyncTask内部并没有停止,而是会继续执行,直到最后在finish中才做的的状态判断,只是忽略掉了返回结果而已.so,如果cancel了AsyncTask,那么是不会回调 <em>onPostExecute</em> 的,同时任务也不是立刻就停止的.如果想要任务马上停止,只能是在 <em>doInBackground</em> 方法中来对AsyncTask的状态做判断,如果状态变化了,里面return,这样可以保证任务立刻停止.<br>还有一个点要注意的是,前面有个问题:为什么AsyncTask执行完成之后不能继续调用execute方法呢.是因为在 <em>finish</em> 方法中,把这个AsyncTask对象的状态设置为 <em>FINISHED</em> ,在execute方法中第一步中就判断如果状态不是 <em>PENDING</em> 就会抛出异常.关键点在这里,所有我们如果还要二次执行任务的话,只能是重新创建一个新的AsyncTask对象了.</p>
<p>回到刚才Handler中,可以看到还有另一个异步回调情况 <em>MESSAGE_POST_PROGRESS</em> 这个是用来干什么的呢?通过字面理解我么可以发现是用来更新进度说明的.在代码中,找到了这个方法 <em>publishProgress</em> .<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * This method can be invoked from &#123;<span class="doctag">@link</span> #doInBackground&#125; to</div><div class="line">    * publish updates on the UI thread while the background computation is</div><div class="line">    * still running. Each call to this method will trigger the execution of</div><div class="line">    * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; on the UI thread.</div><div class="line">    *</div><div class="line">    * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; will not be called if the task has been</div><div class="line">    * canceled.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> values The progress values to update the UI with.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> #onProgressUpdate</div><div class="line">    * <span class="doctag">@see</span> #doInBackground</div><div class="line">    */</div><div class="line"><span class="meta">@WorkerThread</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">           getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                   <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>仔细看方法上面的注释,这个方法可以在 <em>doInBackground</em> 中调用,来更新进度说明.最后这个方法会在主线程中回调 <em>onProgressUpdate</em> .<br>也就是说如果我们复写 <em>onProgressUpdate</em> 方法,我们可以在UI主线程中获取到进度更新提示.</p>
<p>上面提出的3个问题中后两个问题我们已经解释了,3个方法的回调时机非常清晰,同时AsyncTask由于最后finish状态原因是无法再次执行的.<br>最后说说AsyncTask中线程池的实现,这个点由于在不同的android版本的变化会有很多的差异,这里的源码使用是最新的7.0源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</div><div class="line">   * order.  This serialization is global to a particular process.</div><div class="line">   */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">       Runnable mActive;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">           mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       r.run();</div><div class="line">                   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                       scheduleNext();</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">           <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">               scheduleNext();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">               THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里创建了一种叫做 <em>SerialExecutor</em> 的线程池,通过字面理解可以知道是一种串行的线程池,也就是说线程是挨个来交给 <em>THREAD_POOL_EXECUTOR</em> .这里的的 <em>SerialExecutor</em> 用到了 <em>ArrayDeque</em> 这种双向队列数据结构.只允许在结尾插入,在头部取出.可以看下其中的 <em>offer</em> 和 <em>poll</em> 方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> offerLast(e);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> pollFirst();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>首先offer新的任务到 <em>SerialExecutor</em> 中时,判断 <em>mActive</em> 是否存在,如果不存在就去从 <em>ArrayDeque</em> 中取一个出来执行,每当其中一个任务执行完成后,最终会调用 <em>scheduleNext</em> 方法,这样就保证队列中的任务顺序执行了.</p>
<p>最后 <em>SerialExecutor</em> 是把代码交给 <em>THREAD_POOL_EXECUTOR</em> 线程池了,再来看它的实现方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">           <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</div><div class="line"></div><div class="line">   <span class="keyword">static</span> &#123;</div><div class="line">       ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">               CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</div><div class="line">               sPoolWorkQueue, sThreadFactory);</div><div class="line">       threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</div><div class="line">       THREAD_POOL_EXECUTOR = threadPoolExecutor;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里的 <em>THREAD_POOL_EXECUTOR</em> 就是一个线程池的常用实现,这里就不展开了.<br>这里需要说明的是这个 <em>THREAD_POOL_EXECUTOR</em> 存在的意义,通过上面代码我们可以看到asyncTask的任务是顺序执行的,也就是说你有再多的任务也是一个一个的执行的.<br>那这样可能对需求会有影响,所以在 <em>executeOnExecutor</em> 方法中可以看到,我们是可以传入其他的线程池的,这样就可以同时执行很多任务了,而 <em>THREAD_POOL_EXECUTOR</em> 就相当于一个预置的多任务线程池,如果有这种需求,你可以直接把 <em>THREAD_POOL_EXECUTOR</em> 传给 <em>executeOnExecutor</em> 方法,这样就可以让任务同步执行了.</p>
<p>在android2.3之前,AsyncTask使用就是 <em>THREAD_POOL_EXECUTOR</em> 这种线程池模式,不过由于它最对支持128个任务容量,如果超过容量之后就会报错,同时在创建任务的过程中可能会导致ANR,所以从3.0之后就改成现在这种的串行执行的线程池方式了.这个点是要注意的.</p>
<p>如果有大量的异步任务需要执行的,不推荐使用的AsyncTask,毕竟它本身不适合重要大任务量的处理,这个时候应该自己是实现线程池来完成相关的需求.</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.csdn.net/lmj623565791/article/details/38614699" title="Android AsyncTask 源码解析" target="_blank" rel="external"> Android AsyncTask 源码解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-AsyncTask源码分析-android7-0&quot;&gt;&lt;a href=&quot;#android-AsyncTask源码分析-android7-0&quot; class=&quot;headerlink&quot; title=&quot;android AsyncTask源码分析(androi
    
    </summary>
    
    
  </entry>
  
</feed>
